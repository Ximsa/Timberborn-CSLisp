TEST RESULTS: 5:40:15 PM



***** TestConsAndAtoms
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got 2  - expected 2
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got ()  - expected ()
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" "bar")"  - expected "("foo" "bar")"
test: got #t  - expected #t
test: got #t  - expected #t
test: got 2  - expected 2
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got ()  - expected ()
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" "bar")"  - expected "("foo" "bar")"
test: got #t  - expected #t
test: got #t  - expected #t
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" . "bar")"  - expected "("foo" . "bar")"
SUCCESS



***** TestPackagesAndSymbols
test: got "foo"  - expected "foo"
test: got [Native CSLisp.Data.Package]  - expected [Native CSLisp.Data.Package]
test: got "foo"  - expected "foo"
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "foo"  - expected "foo"
test: got [Native CSLisp.Data.Package]  - expected [Native CSLisp.Data.Package]
test: got "fancy:foo"  - expected "fancy:foo"
test: got ""  - expected ""
test: got "foo"  - expected "foo"
test: got ""  - expected ""
test: got ":foo"  - expected ":foo"
test: got [Native ]  - expected [Native ]
test: got [Native CSLisp.Data.Package]  - expected [Native CSLisp.Data.Package]
test: got [Native CSLisp.Data.Package]  - expected [Native CSLisp.Data.Package]
test: got "fancy:foo"  - expected "fancy:foo"
test: got #t  - expected #t
test: got #t  - expected #t
SUCCESS



***** TestEnvironments
test: got 2  - expected 2
test: got 0  - expected 0
test: got 1  - expected 1
test: got 1  - expected 1
test: got 0  - expected 0
test: got 0  - expected 0
test: got temp:env2symbol0  - expected temp:env2symbol0
test: got temp:NEW_SYMBOL  - expected temp:NEW_SYMBOL
test: got 2  - expected 2
test: got 0  - expected 0
SUCCESS



***** TestCharStream
test: got #t  - expected #t
test: got 102  - expected 102
test: got 102  - expected 102
test: got 111  - expected 111
test: got 111  - expected 111
test: got 111  - expected 111
test: got 0  - expected 0
test: got #t  - expected #t
test: got #t  - expected #t
test: got 102  - expected 102
test: got #t  - expected #t
SUCCESS



***** TestParser
ParseNext ==>  1
test: got #t  - expected #t
test: got 1  - expected 1
ParseNext ==>  1.1
test: got #t  - expected #t
test: got 1.1  - expected 1.1
ParseNext ==>  -2
test: got #t  - expected #t
test: got -2  - expected -2
ParseNext ==>  -2
test: got #t  - expected #t
test: got -2  - expected -2
ParseNext ==>  #t
test: got #t  - expected #t
test: got #t  - expected #t
ParseNext ==>  #f
test: got #t  - expected #t
test: got #f  - expected #f
ParseNext ==>  #f
test: got #t  - expected #t
test: got #f  - expected #f
ParseNext ==>  a
test: got #t  - expected #t
test: got a  - expected a
ParseNext ==>  ()
test: got #t  - expected #t
test: got ()  - expected ()
ParseNext ==>  "foo " "
test: got #t  - expected #t
test: got "foo " "  - expected "foo " "
ParseNext ==>  (a b c)
test: got #t  - expected #t
test: got "(a b c)"  - expected "(a b c)"
ParseNext ==>  (1 2.1 -3 #t #f () a b c)
test: got #t  - expected #t
test: got "(1 2.1 -3 #t #f () a b c)"  - expected "(1 2.1 -3 #t #f () a b c)"
ParseNext ==>  (a (b (c d)) e)
test: got #t  - expected #t
test: got "(a (b (c d)) e)"  - expected "(a (b (c d)) e)"
ParseNext ==>  (quote (foo))
ParseNext ==>  (quote ((a b) c))
ParseNext ==>  (quote ())
test: got #t  - expected #t
test: got "(quote (foo))"  - expected "(quote (foo))"
test: got "(quote ((a b) c))"  - expected "(quote ((a b) c))"
test: got "(quote ())"  - expected "(quote ())"
ParseNext ==>  (a b e f)
test: got #t  - expected #t
test: got "(a b e f)"  - expected "(a b e f)"
ParseNext ==>  foo
ParseNext ==>  (quote foo)
ParseNext ==>  (quote foo)
ParseNext ==>  foo
test: got #t  - expected #t
test: got "foo"  - expected "foo"
test: got "(quote foo)"  - expected "(quote foo)"
test: got "(quote foo)"  - expected "(quote foo)"
test: got "foo"  - expected "foo"
ParseNext ==>  (list (quote foo))
test: got #t  - expected #t
test: got "(list (quote foo))"  - expected "(list (quote foo))"
ParseNext ==>  (list (quote foo) (quote foo))
test: got #t  - expected #t
test: got "(list (quote foo) (quote foo))"  - expected "(list (quote foo) (quote foo))"
ParseNext ==>  (list foo)
test: got #t  - expected #t
test: got "(list foo)"  - expected "(list foo)"
ParseNext ==>  (append foo)
test: got #t  - expected #t
test: got "(append foo)"  - expected "(append foo)"
SUCCESS



***** PrintSampleCompilations
COMPILE inputs:  5
ParseNext ==>  5
	CODE BLOCK # 42 ; () => (5)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	RETURN_VAL

COMPILE inputs:  "foo"
ParseNext ==>  "foo"
	CODE BLOCK # 43 ; () => ("foo")
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

COMPILE inputs:  #t
ParseNext ==>  #t
	CODE BLOCK # 44 ; () => (#t)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	RETURN_VAL

COMPILE inputs:  'foo
ParseNext ==>  (quote foo)
	CODE BLOCK # 45 ; () => ((quote foo))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	foo
	2	RETURN_VAL

COMPILE inputs:  (begin 1)
ParseNext ==>  (begin 1)
	CODE BLOCK # 46 ; () => ((begin 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	RETURN_VAL

COMPILE inputs:  (begin 1 2 3)
ParseNext ==>  (begin 1 2 3)
	CODE BLOCK # 47 ; () => ((begin 1 2 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	RETURN_VAL

COMPILE inputs:  x
ParseNext ==>  x
	CODE BLOCK # 48 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (set! x (begin 1 2 3))
ParseNext ==>  (set! x (begin 1 2 3))
	CODE BLOCK # 49 ; () => ((set! x (begin 1 2 3)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	GLOBAL_SET	x
	3	RETURN_VAL

COMPILE inputs:  (begin (set! x (begin 1 2 3)) x)
ParseNext ==>  (begin (set! x (begin 1 2 3)) x)
	CODE BLOCK # 50 ; () => ((begin (set! x (begin 1 2 3)) x))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

COMPILE inputs:  (if p x y)
ParseNext ==>  (if p x y)
	CODE BLOCK # 51 ; () => ((if p x y))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	p
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	x
	4	RETURN_VAL
5	LABEL	"L0"
	6	GLOBAL_GET	y
	7	RETURN_VAL

COMPILE inputs:  (begin (if p x y) z)
ParseNext ==>  (begin (if p x y) z)
	CODE BLOCK # 52 ; () => ((begin (if p x y) z))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	z
	2	RETURN_VAL

COMPILE inputs:  (if 5 x y)
ParseNext ==>  (if 5 x y)
	CODE BLOCK # 53 ; () => ((if 5 x y))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (if #f x y)
ParseNext ==>  (if #f x y)
	CODE BLOCK # 54 ; () => ((if #f x y))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	y
	2	RETURN_VAL

COMPILE inputs:  (if x y)
ParseNext ==>  (if x y)
	CODE BLOCK # 55 ; () => ((if x y))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	y
	4	RETURN_VAL
5	LABEL	"L0"
	6	RETURN_VAL

COMPILE inputs:  (if p x (begin 1 2 x))
ParseNext ==>  (if p x (begin 1 2 x))
	CODE BLOCK # 56 ; () => ((if p x (begin 1 2 x)))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (if (not p) x y)
ParseNext ==>  (if (not p) x y)
	CODE BLOCK # 57 ; () => ((if (not p) x y))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	GLOBAL_GET	p
	3	GLOBAL_GET	not
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L1"	9
	7	GLOBAL_GET	x
	8	RETURN_VAL
9	LABEL	"L1"
	10	GLOBAL_GET	y
	11	RETURN_VAL

COMPILE inputs:  (if (if a b c) x y)
ParseNext ==>  (if (if a b c) x y)
	CODE BLOCK # 58 ; () => ((if (if a b c) x y))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	a
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	b
	4	JMP_TO_LABEL	"L1"	7
5	LABEL	"L0"
	6	GLOBAL_GET	c
7	LABEL	"L1"
	8	JMP_IF_FALSE	"L2"	11
	9	GLOBAL_GET	x
	10	RETURN_VAL
11	LABEL	"L2"
	12	GLOBAL_GET	y
	13	RETURN_VAL

COMPILE inputs:  (lambda () 5)
ParseNext ==>  (lambda () 5)
	CODE BLOCK # 59 ; () => (5)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	RETURN_VAL

	CODE BLOCK # 60 ; () => ((lambda () 5))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #59 : (5)
	2	RETURN_VAL

COMPILE inputs:  ((lambda () 5))
ParseNext ==>  ((lambda () 5))
	CODE BLOCK # 61 ; () => (((lambda () 5)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	RETURN_VAL

COMPILE inputs:  (lambda (a) a)
ParseNext ==>  (lambda (a) a)
	CODE BLOCK # 62 ; (a) => (a)
	0	MAKE_ENV	1	; (a)
	1	LOCAL_GET	0	0	; a
	2	RETURN_VAL

	CODE BLOCK # 63 ; () => ((lambda (a) a))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #62 : (a)
	2	RETURN_VAL

COMPILE inputs:  (lambda (a) (lambda (b) a))
ParseNext ==>  (lambda (a) (lambda (b) a))
	CODE BLOCK # 64 ; (b) => (a)
	0	MAKE_ENV	1	; (b)
	1	LOCAL_GET	1	0	; a
	2	RETURN_VAL

	CODE BLOCK # 65 ; (a) => ((lambda (b) a))
	0	MAKE_ENV	1	; (a)
	1	MAKE_CLOSURE	[Closure]	; #64 : (a)
	2	RETURN_VAL

	CODE BLOCK # 66 ; () => ((lambda (a) (lambda (b) a)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #65 : ((lambda (b) a))
	2	RETURN_VAL

COMPILE inputs:  (set! x (lambda (a) a))
ParseNext ==>  (set! x (lambda (a) a))
	CODE BLOCK # 67 ; (a) => (a)
	0	MAKE_ENV	1	; (a)
	1	LOCAL_GET	0	0	; a
	2	RETURN_VAL

	CODE BLOCK # 68 ; () => ((set! x (lambda (a) a)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #67 : (a)
	2	GLOBAL_SET	x
	3	RETURN_VAL

COMPILE inputs:  ((lambda (a) a) 5)
ParseNext ==>  ((lambda (a) a) 5)
	CODE BLOCK # 69 ; (a) => (a)
	0	MAKE_ENV	1	; (a)
	1	LOCAL_GET	0	0	; a
	2	RETURN_VAL

	CODE BLOCK # 70 ; () => (((lambda (a) a) 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; #69 : (a)
	3	JMP_CLOSURE	1

COMPILE inputs:  ((lambda (x) ((lambda (y z) (f x y z)) 3 x)) 4)
ParseNext ==>  ((lambda (x) ((lambda (y z) (f x y z)) 3 x)) 4)
	CODE BLOCK # 71 ; (y z) => ((f x y z))
	0	MAKE_ENV	2	; (y z)
	1	LOCAL_GET	1	0	; x
	2	LOCAL_GET	0	0	; y
	3	LOCAL_GET	0	1	; z
	4	GLOBAL_GET	f
	5	JMP_CLOSURE	3

	CODE BLOCK # 72 ; (x) => (((lambda (y z) (f x y z)) 3 x))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	3
	2	LOCAL_GET	0	0	; x
	3	MAKE_CLOSURE	[Closure]	; #71 : ((f x y z))
	4	JMP_CLOSURE	2

	CODE BLOCK # 73 ; () => (((lambda (x) ((lambda (y z) (f x y z)) 3 x)) 4))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	4
	2	MAKE_CLOSURE	[Closure]	; #72 : (((lambda (y z) (f x y z)) 3 x))
	3	JMP_CLOSURE	1

COMPILE inputs:  (if a b (f c))
ParseNext ==>  (if a b (f c))
	CODE BLOCK # 74 ; () => ((if a b (f c)))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	a
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	b
	4	RETURN_VAL
5	LABEL	"L0"
	6	GLOBAL_GET	c
	7	GLOBAL_GET	f
	8	JMP_CLOSURE	1

COMPILE inputs:  (if* (+ 1 2) b)
ParseNext ==>  (if* (+ 1 2) b)
	CODE BLOCK # 75 ; () => ((if* (+ 1 2) b))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	12
	9	STACK_POP
	10	GLOBAL_GET	b
	11	RETURN_VAL
12	LABEL	"L1"
	13	RETURN_VAL

COMPILE inputs:  (if* #f b)
ParseNext ==>  (if* #f b)
	CODE BLOCK # 76 ; () => ((if* #f b))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	b
	2	RETURN_VAL

COMPILE inputs:  (begin (- 2 3) (+ 2 3))
ParseNext ==>  (begin (- 2 3) (+ 2 3))
	CODE BLOCK # 77 ; () => ((begin (- 2 3) (+ 2 3)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	-
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	STACK_POP
	8	PUSH_CONST	2
	9	PUSH_CONST	3
	10	GLOBAL_GET	+
	11	JMP_CLOSURE	2

SUCCESS



***** TestVMNoCoreLib


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  5
ParseNext ==>  5
Parsed:  5
Compiled:
	CODE BLOCK # 42 ; () => (5)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 42 ; () => (5)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  #t
ParseNext ==>  #t
Parsed:  #t
Compiled:
	CODE BLOCK # 43 ; () => (#t)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 43 ; () => (#t)
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  "foo"
ParseNext ==>  "foo"
Parsed:  "foo"
Compiled:
	CODE BLOCK # 44 ; () => ("foo")
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 44 ; () => ("foo")
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin 1 2 3)
ParseNext ==>  (begin 1 2 3)
Parsed:  (begin 1 2 3)
Compiled:
	CODE BLOCK # 45 ; () => ((begin 1 2 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 45 ; () => ((begin 1 2 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	3
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   2 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  xyz
ParseNext ==>  xyz
Parsed:  xyz
Compiled:
	CODE BLOCK # 46 ; () => (xyz)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 46 ; () => (xyz)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	xyz
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  xyz
ParseNext ==>  xyz
Parsed:  xyz
Compiled:
	CODE BLOCK # 47 ; () => (xyz)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 47 ; () => (xyz)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	xyz
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! x 5)
ParseNext ==>  (set! x 5)
Parsed:  (set! x 5)
Compiled:
	CODE BLOCK # 48 ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 48 ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x 2) x)
ParseNext ==>  (begin (set! x 2) x)
Parsed:  (begin (set! x 2) x)
Compiled:
	CODE BLOCK # 49 ; () => ((begin (set! x 2) x))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	2
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 49 ; () => ((begin (set! x 2) x))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	2
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 2 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ 2 ]
[ 1]   5 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x #t) (if x 5 6))
ParseNext ==>  (begin (set! x #t) (if x 5 6))
Parsed:  (begin (set! x #t) (if x 5 6))
Compiled:
	CODE BLOCK # 50 ; () => ((begin (set! x #t) (if x 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 50 ; () => ((begin (set! x #t) (if x 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ #t ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ #t ]
[ 1]   5 : JMP_IF_FALSE	"L0"	8
                                      0: [  ]
[ 0]   6 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   7 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x #f) (if x 5 6))
ParseNext ==>  (begin (set! x #f) (if x 5 6))
Parsed:  (begin (set! x #f) (if x 5 6))
Compiled:
	CODE BLOCK # 51 ; () => ((begin (set! x #f) (if x 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 51 ; () => ((begin (set! x #f) (if x 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ #f ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ #f ]
[ 1]   5 : JMP_IF_FALSE	"L0"	8
                                      0: [  ]
[ 0]   8 : LABEL	"L0"
                                      0: [  ]
[ 0]   9 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]  10 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* 5 6))
ParseNext ==>  (begin (if* 5 6))
Parsed:  (begin (if* 5 6))
Compiled:
	CODE BLOCK # 52 ; () => ((begin (if* 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	LABEL	"L0"
	8	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 52 ; () => ((begin (if* 5 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	LABEL	"L0"
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : DUPLICATE
                                      2: [ 5 5 ]
[ 2]   3 : JMP_IF_TRUE	"L0"	7
                                      1: [ 5 ]
[ 1]   7 : LABEL	"L0"
                                      1: [ 5 ]
[ 1]   8 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (if 5 #f) 6))
ParseNext ==>  (begin (if* (if 5 #f) 6))
Parsed:  (begin (if* (if 5 #f) 6))
Compiled:
	CODE BLOCK # 53 ; () => ((begin (if* (if 5 #f) 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	LABEL	"L0"
	8	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 53 ; () => ((begin (if* (if 5 #f) 6)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	LABEL	"L0"
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : DUPLICATE
                                      2: [ #f #f ]
[ 2]   3 : JMP_IF_TRUE	"L0"	7
                                      1: [ #f ]
[ 1]   4 : STACK_POP
                                      0: [  ]
[ 0]   5 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   6 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (+ 1 2) 4) 5)
ParseNext ==>  (begin (if* (+ 1 2) 4) 5)
Parsed:  (begin (if* (core:+ 1 2) 4) 5)
Compiled:
	CODE BLOCK # 54 ; () => ((begin (if* (+ 1 2) 4) 5))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	11
	9	STACK_POP
	10	PUSH_CONST	4
11	LABEL	"L1"
	12	STACK_POP
	13	PUSH_CONST	5
	14	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 54 ; () => ((begin (if* (+ 1 2) 4) 5))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	11
	9	STACK_POP
	10	PUSH_CONST	4
11	LABEL	"L1"
	12	STACK_POP
	13	PUSH_CONST	5
	14	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K0/6] 1 2 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : DUPLICATE
                                      2: [ 3 3 ]
[ 2]   8 : JMP_IF_TRUE	"L1"	11
                                      1: [ 3 ]
[ 1]  11 : LABEL	"L1"
                                      1: [ 3 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]  14 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (if 5 #f) 4) 5)
ParseNext ==>  (begin (if* (if 5 #f) 4) 5)
Parsed:  (begin (if* (if 5 #f) 4) 5)
Compiled:
	CODE BLOCK # 55 ; () => ((begin (if* (if 5 #f) 4) 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	6
	4	STACK_POP
	5	PUSH_CONST	4
6	LABEL	"L0"
	7	STACK_POP
	8	PUSH_CONST	5
	9	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 55 ; () => ((begin (if* (if 5 #f) 4) 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	6
	4	STACK_POP
	5	PUSH_CONST	4
6	LABEL	"L0"
	7	STACK_POP
	8	PUSH_CONST	5
	9	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : DUPLICATE
                                      2: [ #f #f ]
[ 2]   3 : JMP_IF_TRUE	"L0"	6
                                      1: [ #f ]
[ 1]   4 : STACK_POP
                                      0: [  ]
[ 0]   5 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]   6 : LABEL	"L0"
                                      1: [ 4 ]
[ 1]   7 : STACK_POP
                                      0: [  ]
[ 0]   8 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   9 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a) a) 5)
ParseNext ==>  ((lambda (a) a) 5)
Parsed:  ((lambda (a) a) 5)
Compiled:
	CODE BLOCK # 56 ; (a) => (a)
	0	MAKE_ENV	1	; (a)
	1	LOCAL_GET	0	0	; a
	2	RETURN_VAL

	CODE BLOCK # 57 ; () => (((lambda (a) a) 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; #56 : (a)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 57 ; () => (((lambda (a) a) 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; #56 : (a)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #56 : (a)
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (a)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; a
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a . b) b) 5 6 7 8)
ParseNext ==>  ((lambda (a . b) b) 5 6 7 8)
Parsed:  ((lambda (a . b) b) 5 6 7 8)
Compiled:
	CODE BLOCK # 58 ; (a b) => (b)
	0	MAKE_ENVDOT	1	; (a b)
	1	LOCAL_GET	0	1	; b
	2	RETURN_VAL

	CODE BLOCK # 59 ; () => (((lambda (a . b) b) 5 6 7 8))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	PUSH_CONST	6
	3	PUSH_CONST	7
	4	PUSH_CONST	8
	5	MAKE_CLOSURE	[Closure]	; #58 : (b)
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 59 ; () => (((lambda (a . b) b) 5 6 7 8))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	PUSH_CONST	6
	3	PUSH_CONST	7
	4	PUSH_CONST	8
	5	MAKE_CLOSURE	[Closure]	; #58 : (b)
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : PUSH_CONST	6
                                      2: [ 5 6 ]
[ 2]   3 : PUSH_CONST	7
                                      3: [ 5 6 7 ]
[ 3]   4 : PUSH_CONST	8
                                      4: [ 5 6 7 8 ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; #58 : (b)
                                      5: [ 5 6 7 8 [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 5 6 7 8 ]
[ 4]   0 : MAKE_ENVDOT	1	; (a b)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	1	; b
                                      1: [ (6 7 8) ]
[ 1]   2 : RETURN_VAL
test: got "(6 7 8)"  - expected "(6 7 8)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a) (set! a 6) a) 1)
ParseNext ==>  ((lambda (a) (set! a 6) a) 1)
Parsed:  ((lambda (a) (set! a 6) a) 1)
Compiled:
	CODE BLOCK # 60 ; (a) => ((set! a 6) a)
	0	MAKE_ENV	1	; (a)
	1	PUSH_CONST	6
	2	LOCAL_SET	0	0	; a
	3	STACK_POP
	4	LOCAL_GET	0	0	; a
	5	RETURN_VAL

	CODE BLOCK # 61 ; () => (((lambda (a) (set! a 6) a) 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #60 : ((set! a 6) a)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 61 ; () => (((lambda (a) (set! a 6) a) 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #60 : ((set! a 6) a)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #60 : ((set! a 6) a)
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (a)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   2 : LOCAL_SET	0	0	; a
                                      1: [ 6 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; a
                                      1: [ 6 ]
[ 1]   5 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x . rest) (if x 'foo rest)) #t 'a 'b 'c)
ParseNext ==>  ((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c))
Parsed:  ((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c))
Compiled:
	CODE BLOCK # 62 ; (x rest) => ((if x (quote foo) rest))
	0	MAKE_ENVDOT	1	; (x rest)
	1	LOCAL_GET	0	0	; x
	2	JMP_IF_FALSE	"L0"	5
	3	PUSH_CONST	foo
	4	RETURN_VAL
5	LABEL	"L0"
	6	LOCAL_GET	0	1	; rest
	7	RETURN_VAL

	CODE BLOCK # 63 ; () => (((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; #62 : ((if x (quote foo) rest))
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 63 ; () => (((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; #62 : ((if x (quote foo) rest))
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : PUSH_CONST	a
                                      2: [ #t a ]
[ 2]   3 : PUSH_CONST	b
                                      3: [ #t a b ]
[ 3]   4 : PUSH_CONST	c
                                      4: [ #t a b c ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; #62 : ((if x (quote foo) rest))
                                      5: [ #t a b c [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ #t a b c ]
[ 4]   0 : MAKE_ENVDOT	1	; (x rest)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ #t ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   3 : PUSH_CONST	foo
                                      1: [ foo ]
[ 1]   4 : RETURN_VAL
test: got "foo"  - expected "foo"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x . rest) (if x 'foo rest)) #f 'a 'b 'c)
ParseNext ==>  ((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c))
Parsed:  ((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c))
Compiled:
	CODE BLOCK # 64 ; (x rest) => ((if x (quote foo) rest))
	0	MAKE_ENVDOT	1	; (x rest)
	1	LOCAL_GET	0	0	; x
	2	JMP_IF_FALSE	"L0"	5
	3	PUSH_CONST	foo
	4	RETURN_VAL
5	LABEL	"L0"
	6	LOCAL_GET	0	1	; rest
	7	RETURN_VAL

	CODE BLOCK # 65 ; () => (((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; #64 : ((if x (quote foo) rest))
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 65 ; () => (((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#f
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; #64 : ((if x (quote foo) rest))
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : PUSH_CONST	a
                                      2: [ #f a ]
[ 2]   3 : PUSH_CONST	b
                                      3: [ #f a b ]
[ 3]   4 : PUSH_CONST	c
                                      4: [ #f a b c ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; #64 : ((if x (quote foo) rest))
                                      5: [ #f a b c [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ #f a b c ]
[ 4]   0 : MAKE_ENVDOT	1	; (x rest)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ #f ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   5 : LABEL	"L0"
                                      0: [  ]
[ 0]   6 : LOCAL_GET	0	1	; rest
                                      1: [ (a b c) ]
[ 1]   7 : RETURN_VAL
test: got "(a b c)"  - expected "(a b c)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
ParseNext ==>  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
Parsed:  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
Compiled:
	CODE BLOCK # 66 ; (a b c) => ((if a b c))
	0	MAKE_ENV	3	; (a b c)
	1	LOCAL_GET	0	0	; a
	2	JMP_IF_FALSE	"L0"	5
	3	LOCAL_GET	0	1	; b
	4	RETURN_VAL
5	LABEL	"L0"
	6	LOCAL_GET	0	2	; c
	7	RETURN_VAL

	CODE BLOCK # 67 ; () => ((begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #66 : ((if a b c))
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	#t
	5	PUSH_CONST	5
	6	PUSH_CONST	6
	7	GLOBAL_GET	x
	8	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 67 ; () => ((begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6)))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #66 : ((if a b c))
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	#t
	5	PUSH_CONST	5
	6	PUSH_CONST	6
	7	GLOBAL_GET	x
	8	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #66 : ((if a b c))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   5 : PUSH_CONST	5
                                      2: [ #t 5 ]
[ 2]   6 : PUSH_CONST	6
                                      3: [ #t 5 6 ]
[ 3]   7 : GLOBAL_GET	x
                                      4: [ #t 5 6 [Closure] ]
[ 4]   8 : JMP_CLOSURE	3
                                      3: [ #t 5 6 ]
[ 3]   0 : MAKE_ENV	3	; (a b c)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; a
                                      1: [ #t ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   3 : LOCAL_GET	0	1	; b
                                      1: [ 5 ]
[ 1]   4 : RETURN_VAL
test: got "5"  - expected "5"
SUCCESS



***** TestVMPrimitives


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ 1 2)
ParseNext ==>  (+ 1 2)
Parsed:  (core:+ 1 2)
Compiled:
	CODE BLOCK # 42 ; () => ((+ 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 42 ; () => ((+ 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 2 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ (+ 1 2) 3)
ParseNext ==>  (+ (+ 1 2) 3)
Parsed:  (core:+ (core:+ 1 2) 3)
Compiled:
	CODE BLOCK # 43 ; () => ((+ (+ 1 2) 3))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	PUSH_CONST	3
	8	GLOBAL_GET	+
	9	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 43 ; () => ((+ (+ 1 2) 3))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	PUSH_CONST	3
	8	GLOBAL_GET	+
	9	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K0/6] 1 2 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : PUSH_CONST	3
                                      2: [ 3 3 ]
[ 2]   8 : GLOBAL_GET	+
                                      3: [ 3 3 [Closure/core:+] ]
[ 3]   9 : JMP_CLOSURE	2
                                      2: [ 3 3 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 6 ]
[ 1]   1 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ 1 2 3 4)
ParseNext ==>  (+ 1 2 3 4)
Parsed:  (core:+ 1 2 3 4)
Compiled:
	CODE BLOCK # 44 ; () => ((+ 1 2 3 4))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 44 ; () => ((+ 1 2 3 4))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	4
                                      4: [ 1 2 3 4 ]
[ 4]   5 : GLOBAL_GET	+
                                      5: [ 1 2 3 4 [Closure/core:+] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 4 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      1: [ 10 ]
[ 1]   1 : RETURN_VAL
test: got "10"  - expected "10"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (* 1 2 3 4)
ParseNext ==>  (* 1 2 3 4)
Parsed:  (core:* 1 2 3 4)
Compiled:
	CODE BLOCK # 45 ; () => ((* 1 2 3 4))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	*
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 45 ; () => ((* 1 2 3 4))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	*
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	4
                                      4: [ 1 2 3 4 ]
[ 4]   5 : GLOBAL_GET	*
                                      5: [ 1 2 3 4 [Closure/core:*] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 4 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      1: [ 24 ]
[ 1]   1 : RETURN_VAL
test: got "24"  - expected "24"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (= 1 1)
ParseNext ==>  (= 1 1)
Parsed:  (core:= 1 1)
Compiled:
	CODE BLOCK # 46 ; () => ((= 1 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	=
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 46 ; () => ((= 1 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	=
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	=
                                      3: [ 1 1 [Closure/core:=] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"="
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (!= 1 1)
ParseNext ==>  (!= 1 1)
Parsed:  (core:!= 1 1)
Compiled:
	CODE BLOCK # 47 ; () => ((!= 1 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	!=
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 47 ; () => ((!= 1 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	!=
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	!=
                                      3: [ 1 1 [Closure/core:!=] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"!="
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
test: got "#f"  - expected "#f"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cons 1 2)
ParseNext ==>  (cons 1 2)
Parsed:  (core:cons 1 2)
Compiled:
	CODE BLOCK # 48 ; () => ((cons 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	cons
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 48 ; () => ((cons 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	cons
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	cons
                                      3: [ 1 2 [Closure/core:cons] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 . 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 . 2)"  - expected "(1 . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  `(a 1)
ParseNext ==>  (list (quote a) (quote 1))
Parsed:  (list (quote a) (quote 1))
Compiled:
	CODE BLOCK # 49 ; () => ((list (quote a) (quote 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	a
	2	PUSH_CONST	1
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 49 ; () => ((list (quote a) (quote 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	a
	2	PUSH_CONST	1
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	a
                                      1: [ a ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ a 1 ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ a 1 [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ a 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (a 1) ]
[ 1]   1 : RETURN_VAL
test: got "(a 1)"  - expected "(a 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list)
ParseNext ==>  (list)
Parsed:  (list)
Compiled:
	CODE BLOCK # 50 ; () => ((list))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	JMP_CLOSURE	0

Running...
Executing:  
	CODE BLOCK # 50 ; () => ((list))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	list
	2	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	list
                                      1: [ [Closure/core:list] ]
[ 1]   2 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : CALL_PRIMOP	"list"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1)
ParseNext ==>  (list 1)
Parsed:  (list 1)
Compiled:
	CODE BLOCK # 51 ; () => ((list 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_GET	list
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 51 ; () => ((list 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_GET	list
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_GET	list
                                      2: [ 1 [Closure/core:list] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : CALL_PRIMOP	"list"
                                      1: [ (1) ]
[ 1]   1 : RETURN_VAL
test: got "(1)"  - expected "(1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1 2)
ParseNext ==>  (list 1 2)
Parsed:  (list 1 2)
Compiled:
	CODE BLOCK # 52 ; () => ((list 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 52 ; () => ((list 1 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ 1 2 [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2)"  - expected "(1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1 2 3)
ParseNext ==>  (list 1 2 3)
Parsed:  (list 1 2 3)
Compiled:
	CODE BLOCK # 53 ; () => ((list 1 2 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 53 ; () => ((list 1 2 3))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (length '(a b c))
ParseNext ==>  (length (quote (a b c)))
Parsed:  (core:length (quote (a b c)))
Compiled:
	CODE BLOCK # 54 ; () => ((length (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(a b c)
	2	GLOBAL_GET	length
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 54 ; () => ((length (quote (a b c))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(a b c)
	2	GLOBAL_GET	length
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(a b c)
                                      1: [ (a b c) ]
[ 1]   2 : GLOBAL_GET	length
                                      2: [ (a b c) [Closure/core:length] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (a b c) ]
[ 1]   0 : CALL_PRIMOP	"length"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (append '(1 2) '(3 4) '() '(5))
ParseNext ==>  (append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5)))
Parsed:  (append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5)))
Compiled:
	CODE BLOCK # 55 ; () => ((append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(3 4)
	3	PUSH_CONST	()
	4	PUSH_CONST	(5)
	5	GLOBAL_GET	append
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 55 ; () => ((append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(3 4)
	3	PUSH_CONST	()
	4	PUSH_CONST	(5)
	5	GLOBAL_GET	append
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : PUSH_CONST	(3 4)
                                      2: [ (1 2) (3 4) ]
[ 2]   3 : PUSH_CONST	()
                                      3: [ (1 2) (3 4) () ]
[ 3]   4 : PUSH_CONST	(5)
                                      4: [ (1 2) (3 4) () (5) ]
[ 4]   5 : GLOBAL_GET	append
                                      5: [ (1 2) (3 4) () (5) [Closure/core:append] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ (1 2) (3 4) () (5) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (1 2 3 4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 4 5)"  - expected "(1 2 3 4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (append '() '(3 4)) (append '(1 2) '()))
ParseNext ==>  (list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ())))
Parsed:  (list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ())))
Compiled:
	CODE BLOCK # 56 ; () => ((list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ()))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	()
	3	PUSH_CONST	(3 4)
	4	GLOBAL_GET	append
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	SAVE_RETURN	"K1"	12
	8	PUSH_CONST	(1 2)
	9	PUSH_CONST	()
	10	GLOBAL_GET	append
	11	JMP_CLOSURE	2
12	LABEL	"K1"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 56 ; () => ((list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ()))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	()
	3	PUSH_CONST	(3 4)
	4	GLOBAL_GET	append
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	SAVE_RETURN	"K1"	12
	8	PUSH_CONST	(1 2)
	9	PUSH_CONST	()
	10	GLOBAL_GET	append
	11	JMP_CLOSURE	2
12	LABEL	"K1"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/6] () ]
[ 2]   3 : PUSH_CONST	(3 4)
                                      3: [ [K0/6] () (3 4) ]
[ 3]   4 : GLOBAL_GET	append
                                      4: [ [K0/6] () (3 4) [Closure/core:append] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] () (3 4) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      2: [ [K0/6] (3 4) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (3 4) ]
[ 1]   6 : LABEL	"K0"
                                      1: [ (3 4) ]
[ 1]   7 : SAVE_RETURN	"K1"	12
                                      2: [ (3 4) [K1/12] ]
[ 2]   8 : PUSH_CONST	(1 2)
                                      3: [ (3 4) [K1/12] (1 2) ]
[ 3]   9 : PUSH_CONST	()
                                      4: [ (3 4) [K1/12] (1 2) () ]
[ 4]  10 : GLOBAL_GET	append
                                      5: [ (3 4) [K1/12] (1 2) () [Closure/core:append] ]
[ 5]  11 : JMP_CLOSURE	2
                                      4: [ (3 4) [K1/12] (1 2) () ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      3: [ (3 4) [K1/12] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (3 4) (1 2) ]
[ 2]  12 : LABEL	"K1"
                                      2: [ (3 4) (1 2) ]
[ 2]  13 : GLOBAL_GET	list
                                      3: [ (3 4) (1 2) [Closure/core:list] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (3 4) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ ((3 4) (1 2)) ]
[ 1]   1 : RETURN_VAL
test: got "((3 4) (1 2))"  - expected "((3 4) (1 2))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list #t (not #t) #f (not #f) 1 (not 1) 0 (not 0))
ParseNext ==>  (list #t (not #t) #f (not #f) 1 (not 1) 0 (not 0))
Parsed:  (list #t (core:not #t) #f (core:not #f) 1 (core:not 1) 0 (core:not 0))
Compiled:
	CODE BLOCK # 57 ; () => ((list #t (not #t) #f (not #f) 1 (not 1) 0 (not 0)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	SAVE_RETURN	"K0"	6
	3	PUSH_CONST	#t
	4	GLOBAL_GET	not
	5	JMP_CLOSURE	1
6	LABEL	"K0"
	7	PUSH_CONST	#f
	8	SAVE_RETURN	"K1"	12
	9	PUSH_CONST	#f
	10	GLOBAL_GET	not
	11	JMP_CLOSURE	1
12	LABEL	"K1"
	13	PUSH_CONST	1
	14	SAVE_RETURN	"K2"	18
	15	PUSH_CONST	1
	16	GLOBAL_GET	not
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	PUSH_CONST	0
	20	SAVE_RETURN	"K3"	24
	21	PUSH_CONST	0
	22	GLOBAL_GET	not
	23	JMP_CLOSURE	1
24	LABEL	"K3"
	25	GLOBAL_GET	list
	26	JMP_CLOSURE	8

Running...
Executing:  
	CODE BLOCK # 57 ; () => ((list #t (not #t) #f (not #f) 1 (not 1) 0 (not 0)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	SAVE_RETURN	"K0"	6
	3	PUSH_CONST	#t
	4	GLOBAL_GET	not
	5	JMP_CLOSURE	1
6	LABEL	"K0"
	7	PUSH_CONST	#f
	8	SAVE_RETURN	"K1"	12
	9	PUSH_CONST	#f
	10	GLOBAL_GET	not
	11	JMP_CLOSURE	1
12	LABEL	"K1"
	13	PUSH_CONST	1
	14	SAVE_RETURN	"K2"	18
	15	PUSH_CONST	1
	16	GLOBAL_GET	not
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	PUSH_CONST	0
	20	SAVE_RETURN	"K3"	24
	21	PUSH_CONST	0
	22	GLOBAL_GET	not
	23	JMP_CLOSURE	1
24	LABEL	"K3"
	25	GLOBAL_GET	list
	26	JMP_CLOSURE	8

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : SAVE_RETURN	"K0"	6
                                      2: [ #t [K0/6] ]
[ 2]   3 : PUSH_CONST	#t
                                      3: [ #t [K0/6] #t ]
[ 3]   4 : GLOBAL_GET	not
                                      4: [ #t [K0/6] #t [Closure/core:not] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ #t [K0/6] #t ]
[ 3]   0 : CALL_PRIMOP	"not"
                                      3: [ #t [K0/6] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]   6 : LABEL	"K0"
                                      2: [ #t #f ]
[ 2]   7 : PUSH_CONST	#f
                                      3: [ #t #f #f ]
[ 3]   8 : SAVE_RETURN	"K1"	12
                                      4: [ #t #f #f [K1/12] ]
[ 4]   9 : PUSH_CONST	#f
                                      5: [ #t #f #f [K1/12] #f ]
[ 5]  10 : GLOBAL_GET	not
                                      6: [ #t #f #f [K1/12] #f [Closure/core:not] ]
[ 6]  11 : JMP_CLOSURE	1
                                      5: [ #t #f #f [K1/12] #f ]
[ 5]   0 : CALL_PRIMOP	"not"
                                      5: [ #t #f #f [K1/12] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #f #t ]
[ 4]  12 : LABEL	"K1"
                                      4: [ #t #f #f #t ]
[ 4]  13 : PUSH_CONST	1
                                      5: [ #t #f #f #t 1 ]
[ 5]  14 : SAVE_RETURN	"K2"	18
                                      6: [ #t #f #f #t 1 [K2/18] ]
[ 6]  15 : PUSH_CONST	1
                                      7: [ #t #f #f #t 1 [K2/18] 1 ]
[ 7]  16 : GLOBAL_GET	not
                                      8: [ #t #f #f #t 1 [K2/18] 1 [Closure/core:not] ]
[ 8]  17 : JMP_CLOSURE	1
                                      7: [ #t #f #f #t 1 [K2/18] 1 ]
[ 7]   0 : CALL_PRIMOP	"not"
                                      7: [ #t #f #f #t 1 [K2/18] #f ]
[ 7]   1 : RETURN_VAL
                                      6: [ #t #f #f #t 1 #f ]
[ 6]  18 : LABEL	"K2"
                                      6: [ #t #f #f #t 1 #f ]
[ 6]  19 : PUSH_CONST	0
                                      7: [ #t #f #f #t 1 #f 0 ]
[ 7]  20 : SAVE_RETURN	"K3"	24
                                      8: [ #t #f #f #t 1 #f 0 [K3/24] ]
[ 8]  21 : PUSH_CONST	0
                                      9: [ #t #f #f #t 1 #f 0 [K3/24] 0 ]
[ 9]  22 : GLOBAL_GET	not
                                     10: [ #t #f #f #t 1 #f 0 [K3/24] 0 [Closure/core:not] ]
[10]  23 : JMP_CLOSURE	1
                                      9: [ #t #f #f #t 1 #f 0 [K3/24] 0 ]
[ 9]   0 : CALL_PRIMOP	"not"
                                      9: [ #t #f #f #t 1 #f 0 [K3/24] #f ]
[ 9]   1 : RETURN_VAL
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]  24 : LABEL	"K3"
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]  25 : GLOBAL_GET	list
                                      9: [ #t #f #f #t 1 #f 0 #f [Closure/core:list] ]
[ 9]  26 : JMP_CLOSURE	8
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f #t 1 #f 0 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f #t 1 #f 0 #f)"  - expected "(#t #f #f #t 1 #f 0 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (null? ()) (null? '(a)) (null? 0) (null? 1) (null? #f))
ParseNext ==>  (list (null? ()) (null? (quote (a))) (null? 0) (null? 1) (null? #f))
Parsed:  (list (core:null? ()) (core:null? (quote (a))) (core:null? 0) (core:null? 1) (core:null? #f))
Compiled:
	CODE BLOCK # 58 ; () => ((list (null? ()) (null? (quote (a))) (null? 0) (null? 1) (null? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	null?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	null?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	null?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	null?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  
	CODE BLOCK # 58 ; () => ((list (null? ()) (null? (quote (a))) (null? 0) (null? 1) (null? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	null?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	null?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	null?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	null?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #t [K1/10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #t [K1/10] (a) ]
[ 3]   8 : GLOBAL_GET	null?
                                      4: [ #t [K1/10] (a) [Closure/core:null?] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #t [K1/10] (a) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ #t [K1/10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]  10 : LABEL	"K1"
                                      2: [ #t #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #t #f [K2/15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #t #f [K2/15] 0 ]
[ 4]  13 : GLOBAL_GET	null?
                                      5: [ #t #f [K2/15] 0 [Closure/core:null?] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #t #f [K2/15] 0 ]
[ 4]   0 : CALL_PRIMOP	"null?"
                                      4: [ #t #f [K2/15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #t #f #f ]
[ 3]  15 : LABEL	"K2"
                                      3: [ #t #f #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #t #f #f [K3/20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #t #f #f [K3/20] 1 ]
[ 5]  18 : GLOBAL_GET	null?
                                      6: [ #t #f #f [K3/20] 1 [Closure/core:null?] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #t #f #f [K3/20] 1 ]
[ 5]   0 : CALL_PRIMOP	"null?"
                                      5: [ #t #f #f [K3/20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #f #f ]
[ 4]  20 : LABEL	"K3"
                                      4: [ #t #f #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #t #f #f #f [K4/25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #t #f #f #f [K4/25] #f ]
[ 6]  23 : GLOBAL_GET	null?
                                      7: [ #t #f #f #f [K4/25] #f [Closure/core:null?] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #t #f #f #f [K4/25] #f ]
[ 6]   0 : CALL_PRIMOP	"null?"
                                      6: [ #t #f #f #f [K4/25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #t #f #f #f #f ]
[ 5]  25 : LABEL	"K4"
                                      5: [ #t #f #f #f #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #t #f #f #f #f [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #t #f #f #f #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f #f #f)"  - expected "(#t #f #f #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (cons? ()) (cons? '(a)) (cons? 0) (cons? 1) (cons? #f))
ParseNext ==>  (list (cons? ()) (cons? (quote (a))) (cons? 0) (cons? 1) (cons? #f))
Parsed:  (list (core:cons? ()) (core:cons? (quote (a))) (core:cons? 0) (core:cons? 1) (core:cons? #f))
Compiled:
	CODE BLOCK # 59 ; () => ((list (cons? ()) (cons? (quote (a))) (cons? 0) (cons? 1) (cons? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	cons?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	cons?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	cons?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	cons?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  
	CODE BLOCK # 59 ; () => ((list (cons? ()) (cons? (quote (a))) (cons? 0) (cons? 1) (cons? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	cons?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	cons?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	cons?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	cons?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [K0/5] () [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1/10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1/10] (a) ]
[ 3]   8 : GLOBAL_GET	cons?
                                      4: [ #f [K1/10] (a) [Closure/core:cons?] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1/10] (a) ]
[ 3]   0 : CALL_PRIMOP	"cons?"
                                      3: [ #f [K1/10] #t ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #t ]
[ 2]  10 : LABEL	"K1"
                                      2: [ #f #t ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #t [K2/15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #t [K2/15] 0 ]
[ 4]  13 : GLOBAL_GET	cons?
                                      5: [ #f #t [K2/15] 0 [Closure/core:cons?] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #t [K2/15] 0 ]
[ 4]   0 : CALL_PRIMOP	"cons?"
                                      4: [ #f #t [K2/15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #t #f ]
[ 3]  15 : LABEL	"K2"
                                      3: [ #f #t #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #t #f [K3/20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #t #f [K3/20] 1 ]
[ 5]  18 : GLOBAL_GET	cons?
                                      6: [ #f #t #f [K3/20] 1 [Closure/core:cons?] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #t #f [K3/20] 1 ]
[ 5]   0 : CALL_PRIMOP	"cons?"
                                      5: [ #f #t #f [K3/20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #t #f #f ]
[ 4]  20 : LABEL	"K3"
                                      4: [ #f #t #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #t #f #f [K4/25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #t #f #f [K4/25] #f ]
[ 6]  23 : GLOBAL_GET	cons?
                                      7: [ #f #t #f #f [K4/25] #f [Closure/core:cons?] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #t #f #f [K4/25] #f ]
[ 6]   0 : CALL_PRIMOP	"cons?"
                                      6: [ #f #t #f #f [K4/25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #t #f #f #f ]
[ 5]  25 : LABEL	"K4"
                                      5: [ #f #t #f #f #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #f #t #f #f #f [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #f #t #f #f #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #t #f #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #t #f #f #f)"  - expected "(#f #t #f #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (atom? ()) (atom? '(a)) (atom? 0) (atom? 1) (atom? #f))
ParseNext ==>  (list (atom? ()) (atom? (quote (a))) (atom? 0) (atom? 1) (atom? #f))
Parsed:  (list (core:atom? ()) (core:atom? (quote (a))) (core:atom? 0) (core:atom? 1) (core:atom? #f))
Compiled:
	CODE BLOCK # 60 ; () => ((list (atom? ()) (atom? (quote (a))) (atom? 0) (atom? 1) (atom? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	atom?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	atom?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	atom?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	atom?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  
	CODE BLOCK # 60 ; () => ((list (atom? ()) (atom? (quote (a))) (atom? 0) (atom? 1) (atom? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	atom?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	atom?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	atom?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	atom?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] () [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #t [K1/10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #t [K1/10] (a) ]
[ 3]   8 : GLOBAL_GET	atom?
                                      4: [ #t [K1/10] (a) [Closure/core:atom?] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #t [K1/10] (a) ]
[ 3]   0 : CALL_PRIMOP	"atom?"
                                      3: [ #t [K1/10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]  10 : LABEL	"K1"
                                      2: [ #t #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #t #f [K2/15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #t #f [K2/15] 0 ]
[ 4]  13 : GLOBAL_GET	atom?
                                      5: [ #t #f [K2/15] 0 [Closure/core:atom?] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #t #f [K2/15] 0 ]
[ 4]   0 : CALL_PRIMOP	"atom?"
                                      4: [ #t #f [K2/15] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ #t #f #t ]
[ 3]  15 : LABEL	"K2"
                                      3: [ #t #f #t ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #t #f #t [K3/20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #t #f #t [K3/20] 1 ]
[ 5]  18 : GLOBAL_GET	atom?
                                      6: [ #t #f #t [K3/20] 1 [Closure/core:atom?] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #t #f #t [K3/20] 1 ]
[ 5]   0 : CALL_PRIMOP	"atom?"
                                      5: [ #t #f #t [K3/20] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #t #t ]
[ 4]  20 : LABEL	"K3"
                                      4: [ #t #f #t #t ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #t #f #t #t [K4/25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #t #f #t #t [K4/25] #f ]
[ 6]  23 : GLOBAL_GET	atom?
                                      7: [ #t #f #t #t [K4/25] #f [Closure/core:atom?] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #t #f #t #t [K4/25] #f ]
[ 6]   0 : CALL_PRIMOP	"atom?"
                                      6: [ #t #f #t #t [K4/25] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ #t #f #t #t #t ]
[ 5]  25 : LABEL	"K4"
                                      5: [ #t #f #t #t #t ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #t #f #t #t #t [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #t #f #t #t #t ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #t #t #t) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #t #t #t)"  - expected "(#t #f #t #t #t)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (number? ()) (number? '(a)) (number? 0) (number? 1) (number? #f))
ParseNext ==>  (list (number? ()) (number? (quote (a))) (number? 0) (number? 1) (number? #f))
Parsed:  (list (core:number? ()) (core:number? (quote (a))) (core:number? 0) (core:number? 1) (core:number? #f))
Compiled:
	CODE BLOCK # 61 ; () => ((list (number? ()) (number? (quote (a))) (number? 0) (number? 1) (number? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	number?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	number?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	number?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	number?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	number?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  
	CODE BLOCK # 61 ; () => ((list (number? ()) (number? (quote (a))) (number? 0) (number? 1) (number? #f)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	number?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	number?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	number?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	number?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	number?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	number?
                                      3: [ [K0/5] () [Closure/core:number?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"number?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1/10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1/10] (a) ]
[ 3]   8 : GLOBAL_GET	number?
                                      4: [ #f [K1/10] (a) [Closure/core:number?] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1/10] (a) ]
[ 3]   0 : CALL_PRIMOP	"number?"
                                      3: [ #f [K1/10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #f ]
[ 2]  10 : LABEL	"K1"
                                      2: [ #f #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #f [K2/15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #f [K2/15] 0 ]
[ 4]  13 : GLOBAL_GET	number?
                                      5: [ #f #f [K2/15] 0 [Closure/core:number?] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #f [K2/15] 0 ]
[ 4]   0 : CALL_PRIMOP	"number?"
                                      4: [ #f #f [K2/15] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #f #t ]
[ 3]  15 : LABEL	"K2"
                                      3: [ #f #f #t ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #f #t [K3/20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #f #t [K3/20] 1 ]
[ 5]  18 : GLOBAL_GET	number?
                                      6: [ #f #f #t [K3/20] 1 [Closure/core:number?] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #f #t [K3/20] 1 ]
[ 5]   0 : CALL_PRIMOP	"number?"
                                      5: [ #f #f #t [K3/20] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #f #t #t ]
[ 4]  20 : LABEL	"K3"
                                      4: [ #f #f #t #t ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #f #t #t [K4/25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #f #t #t [K4/25] #f ]
[ 6]  23 : GLOBAL_GET	number?
                                      7: [ #f #f #t #t [K4/25] #f [Closure/core:number?] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #f #t #t [K4/25] #f ]
[ 6]   0 : CALL_PRIMOP	"number?"
                                      6: [ #f #f #t #t [K4/25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #f #t #t #f ]
[ 5]  25 : LABEL	"K4"
                                      5: [ #f #f #t #t #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #f #f #t #t #f [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #f #f #t #t #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #f #t #t #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #f #t #t #f)"  - expected "(#f #f #t #t #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (string? ()) (string? '(a)) (string? 0) (string? 1) (string? #f) (string? "foo"))
ParseNext ==>  (list (string? ()) (string? (quote (a))) (string? 0) (string? 1) (string? #f) (string? "foo"))
Parsed:  (list (core:string? ()) (core:string? (quote (a))) (core:string? 0) (core:string? 1) (core:string? #f) (core:string? "foo"))
Compiled:
	CODE BLOCK # 62 ; () => ((list (string? ()) (string? (quote (a))) (string? 0) (string? 1) (string? #f) (string? "foo")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	string?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	string?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	string?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	string?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	string?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	SAVE_RETURN	"K5"	30
	27	PUSH_CONST	"foo"
	28	GLOBAL_GET	string?
	29	JMP_CLOSURE	1
30	LABEL	"K5"
	31	GLOBAL_GET	list
	32	JMP_CLOSURE	6

Running...
Executing:  
	CODE BLOCK # 62 ; () => ((list (string? ()) (string? (quote (a))) (string? 0) (string? 1) (string? #f) (string? "foo")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	string?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	string?
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	string?
	14	JMP_CLOSURE	1
15	LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	string?
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	string?
	24	JMP_CLOSURE	1
25	LABEL	"K4"
	26	SAVE_RETURN	"K5"	30
	27	PUSH_CONST	"foo"
	28	GLOBAL_GET	string?
	29	JMP_CLOSURE	1
30	LABEL	"K5"
	31	GLOBAL_GET	list
	32	JMP_CLOSURE	6

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	string?
                                      3: [ [K0/5] () [Closure/core:string?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"string?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1/10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1/10] (a) ]
[ 3]   8 : GLOBAL_GET	string?
                                      4: [ #f [K1/10] (a) [Closure/core:string?] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1/10] (a) ]
[ 3]   0 : CALL_PRIMOP	"string?"
                                      3: [ #f [K1/10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #f ]
[ 2]  10 : LABEL	"K1"
                                      2: [ #f #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #f [K2/15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #f [K2/15] 0 ]
[ 4]  13 : GLOBAL_GET	string?
                                      5: [ #f #f [K2/15] 0 [Closure/core:string?] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #f [K2/15] 0 ]
[ 4]   0 : CALL_PRIMOP	"string?"
                                      4: [ #f #f [K2/15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #f #f ]
[ 3]  15 : LABEL	"K2"
                                      3: [ #f #f #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #f #f [K3/20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #f #f [K3/20] 1 ]
[ 5]  18 : GLOBAL_GET	string?
                                      6: [ #f #f #f [K3/20] 1 [Closure/core:string?] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #f #f [K3/20] 1 ]
[ 5]   0 : CALL_PRIMOP	"string?"
                                      5: [ #f #f #f [K3/20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #f #f #f ]
[ 4]  20 : LABEL	"K3"
                                      4: [ #f #f #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #f #f #f [K4/25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #f #f #f [K4/25] #f ]
[ 6]  23 : GLOBAL_GET	string?
                                      7: [ #f #f #f #f [K4/25] #f [Closure/core:string?] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #f #f #f [K4/25] #f ]
[ 6]   0 : CALL_PRIMOP	"string?"
                                      6: [ #f #f #f #f [K4/25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #f #f #f #f ]
[ 5]  25 : LABEL	"K4"
                                      5: [ #f #f #f #f #f ]
[ 5]  26 : SAVE_RETURN	"K5"	30
                                      6: [ #f #f #f #f #f [K5/30] ]
[ 6]  27 : PUSH_CONST	"foo"
                                      7: [ #f #f #f #f #f [K5/30] "foo" ]
[ 7]  28 : GLOBAL_GET	string?
                                      8: [ #f #f #f #f #f [K5/30] "foo" [Closure/core:string?] ]
[ 8]  29 : JMP_CLOSURE	1
                                      7: [ #f #f #f #f #f [K5/30] "foo" ]
[ 7]   0 : CALL_PRIMOP	"string?"
                                      7: [ #f #f #f #f #f [K5/30] #t ]
[ 7]   1 : RETURN_VAL
                                      6: [ #f #f #f #f #f #t ]
[ 6]  30 : LABEL	"K5"
                                      6: [ #f #f #f #f #f #t ]
[ 6]  31 : GLOBAL_GET	list
                                      7: [ #f #f #f #f #f #t [Closure/core:list] ]
[ 7]  32 : JMP_CLOSURE	6
                                      6: [ #f #f #f #f #f #t ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #f #f #f #f #t) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #f #f #f #f #t)"  - expected "(#f #f #f #f #f #t)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (car x) (cadr x) (caddr x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (car x) (cadr x) (caddr x)))
Parsed:  (begin (set! x (quote (1 2 3 4 5))) (list (core:car x) (core:cadr x) (core:caddr x)))
Compiled:
	CODE BLOCK # 63 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (car x) (cadr x) (caddr x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	car
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	cadr
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	caddr
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 63 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (car x) (cadr x) (caddr x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	car
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	cadr
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	caddr
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	car
                                      3: [ [K0/8] (1 2 3 4 5) [Closure/core:car] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0/8] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   8 : LABEL	"K0"
                                      1: [ 1 ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ 1 [K1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ 1 [K1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	cadr
                                      4: [ 1 [K1/13] (1 2 3 4 5) [Closure/core:cadr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ 1 [K1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ 1 [K1/13] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 2 ]
[ 2]  13 : LABEL	"K1"
                                      2: [ 1 2 ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ 1 2 [K2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ 1 2 [K2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	caddr
                                      5: [ 1 2 [K2/18] (1 2 3 4 5) [Closure/core:caddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ 1 2 [K2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ 1 2 [K2/18] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 3 ]
[ 3]  18 : LABEL	"K2"
                                      3: [ 1 2 3 ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (cdr x) (cddr x) (cdddr x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (cdr x) (cddr x) (cdddr x)))
Parsed:  (begin (set! x (quote (1 2 3 4 5))) (list (core:cdr x) (core:cddr x) (core:cdddr x)))
Compiled:
	CODE BLOCK # 64 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (cdr x) (cddr x) (cdddr x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	cdr
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	cddr
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	cdddr
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 64 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (cdr x) (cddr x) (cdddr x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	cdr
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	cddr
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	cdddr
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	cdr
                                      3: [ [K0/8] (1 2 3 4 5) [Closure/core:cdr] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0/8] (2 3 4 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3 4 5) ]
[ 1]   8 : LABEL	"K0"
                                      1: [ (2 3 4 5) ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ (2 3 4 5) [K1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ (2 3 4 5) [K1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	cddr
                                      4: [ (2 3 4 5) [K1/13] (1 2 3 4 5) [Closure/core:cddr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ (2 3 4 5) [K1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cddr"
                                      3: [ (2 3 4 5) [K1/13] (3 4 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  13 : LABEL	"K1"
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ (2 3 4 5) (3 4 5) [K2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	cdddr
                                      5: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) [Closure/core:cdddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"cdddr"
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (4 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  18 : LABEL	"K2"
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ (2 3 4 5) (3 4 5) (4 5) [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ((2 3 4 5) (3 4 5) (4 5)) ]
[ 1]   1 : RETURN_VAL
test: got "((2 3 4 5) (3 4 5) (4 5))"  - expected "((2 3 4 5) (3 4 5) (4 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth '(1 2 3 4 5) 2)
ParseNext ==>  (nth (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth (quote (1 2 3 4 5)) 2)
Compiled:
	CODE BLOCK # 65 ; () => ((nth (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 65 ; () => ((nth (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	nth
                                      3: [ (1 2 3 4 5) 2 [Closure/core:nth] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth-tail '(1 2 3 4 5) 2)
ParseNext ==>  (nth-tail (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth-tail (quote (1 2 3 4 5)) 2)
Compiled:
	CODE BLOCK # 66 ; () => ((nth-tail (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth-tail
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 66 ; () => ((nth-tail (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth-tail
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	nth-tail
                                      3: [ (1 2 3 4 5) 2 [Closure/core:nth-tail] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth-tail"
                                      1: [ (4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(4 5)"  - expected "(4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth-cons '(1 2 3 4 5) 2)
ParseNext ==>  (nth-cons (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth-cons (quote (1 2 3 4 5)) 2)
Compiled:
	CODE BLOCK # 67 ; () => ((nth-cons (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth-cons
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 67 ; () => ((nth-cons (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	nth-cons
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	nth-cons
                                      3: [ (1 2 3 4 5) 2 [Closure/core:nth-cons] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth-cons"
                                      1: [ (3 4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(3 4 5)"  - expected "(3 4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (trace "foo" "bar")
ParseNext ==>  (trace "foo" "bar")
Parsed:  (core:trace "foo" "bar")
Compiled:
	CODE BLOCK # 68 ; () => ((trace "foo" "bar"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	PUSH_CONST	"bar"
	3	GLOBAL_GET	trace
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 68 ; () => ((trace "foo" "bar"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	PUSH_CONST	"bar"
	3	GLOBAL_GET	trace
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : PUSH_CONST	"bar"
                                      2: [ "foo" "bar" ]
[ 2]   3 : GLOBAL_GET	trace
                                      3: [ "foo" "bar" [Closure/core:trace] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ "foo" "bar" ]
[ 2]   0 : CALL_PRIMOP	"trace"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! first car) (first '(1 2 3)))
ParseNext ==>  (begin (set! first car) (first (quote (1 2 3))))
Parsed:  (begin (set! first core:car) (first (quote (1 2 3))))
Compiled:
	CODE BLOCK # 69 ; () => ((begin (set! first car) (first (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	(1 2 3)
	5	GLOBAL_GET	first
	6	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 69 ; () => ((begin (set! first car) (first (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	(1 2 3)
	5	GLOBAL_GET	first
	6	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	(1 2 3)
                                      1: [ (1 2 3) ]
[ 1]   5 : GLOBAL_GET	first
                                      2: [ (1 2 3) [Closure/core:car] ]
[ 2]   6 : JMP_CLOSURE	1
                                      1: [ (1 2 3) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  `((list 1 2) ,(list 1 2) ,@(list 1 2))
ParseNext ==>  (list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2)
Parsed:  (list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2)
Compiled:
	CODE BLOCK # 70 ; () => ((list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	7
	2	PUSH_CONST	list
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	3
7	LABEL	"K0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	2
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	2
13	LABEL	"K1"
	14	PUSH_CONST	1
	15	PUSH_CONST	2
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 70 ; () => ((list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	7
	2	PUSH_CONST	list
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	3
7	LABEL	"K0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	2
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	2
13	LABEL	"K1"
	14	PUSH_CONST	1
	15	PUSH_CONST	2
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	7
                                      1: [ [K0/7] ]
[ 1]   2 : PUSH_CONST	list
                                      2: [ [K0/7] list ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/7] list 1 ]
[ 3]   4 : PUSH_CONST	2
                                      4: [ [K0/7] list 1 2 ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/7] list 1 2 [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	3
                                      4: [ [K0/7] list 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/7] (list 1 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (list 1 2) ]
[ 1]   7 : LABEL	"K0"
                                      1: [ (list 1 2) ]
[ 1]   8 : SAVE_RETURN	"K1"	13
                                      2: [ (list 1 2) [K1/13] ]
[ 2]   9 : PUSH_CONST	1
                                      3: [ (list 1 2) [K1/13] 1 ]
[ 3]  10 : PUSH_CONST	2
                                      4: [ (list 1 2) [K1/13] 1 2 ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ (list 1 2) [K1/13] 1 2 [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	2
                                      4: [ (list 1 2) [K1/13] 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      3: [ (list 1 2) [K1/13] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (list 1 2) (1 2) ]
[ 2]  13 : LABEL	"K1"
                                      2: [ (list 1 2) (1 2) ]
[ 2]  14 : PUSH_CONST	1
                                      3: [ (list 1 2) (1 2) 1 ]
[ 3]  15 : PUSH_CONST	2
                                      4: [ (list 1 2) (1 2) 1 2 ]
[ 4]  16 : GLOBAL_GET	list
                                      5: [ (list 1 2) (1 2) 1 2 [Closure/core:list] ]
[ 5]  17 : JMP_CLOSURE	4
                                      4: [ (list 1 2) (1 2) 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ ((list 1 2) (1 2) 1 2) ]
[ 1]   1 : RETURN_VAL
test: got "((list 1 2) (1 2) 1 2)"  - expected "((list 1 2) (1 2) 1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x 5) (set! y '(a b)) `(x ,x ,y ,@y))
ParseNext ==>  (begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y))
Parsed:  (begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y))
Compiled:
	CODE BLOCK # 71 ; () => ((begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	(a b)
	5	GLOBAL_SET	y
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	x
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K0"
	12	SAVE_RETURN	"K1"	16
	13	GLOBAL_GET	x
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	1
16	LABEL	"K1"
	17	SAVE_RETURN	"K2"	21
	18	GLOBAL_GET	y
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	1
21	LABEL	"K2"
	22	GLOBAL_GET	y
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 71 ; () => ((begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	(a b)
	5	GLOBAL_SET	y
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	x
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K0"
	12	SAVE_RETURN	"K1"	16
	13	GLOBAL_GET	x
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	1
16	LABEL	"K1"
	17	SAVE_RETURN	"K2"	21
	18	GLOBAL_GET	y
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	1
21	LABEL	"K2"
	22	GLOBAL_GET	y
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	(a b)
                                      1: [ (a b) ]
[ 1]   5 : GLOBAL_SET	y
                                      1: [ (a b) ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K0"	11
                                      1: [ [K0/11] ]
[ 1]   8 : PUSH_CONST	x
                                      2: [ [K0/11] x ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K0/11] x [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K0/11] x ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/11] (x) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (x) ]
[ 1]  11 : LABEL	"K0"
                                      1: [ (x) ]
[ 1]  12 : SAVE_RETURN	"K1"	16
                                      2: [ (x) [K1/16] ]
[ 2]  13 : GLOBAL_GET	x
                                      3: [ (x) [K1/16] 5 ]
[ 3]  14 : GLOBAL_GET	list
                                      4: [ (x) [K1/16] 5 [Closure/core:list] ]
[ 4]  15 : JMP_CLOSURE	1
                                      3: [ (x) [K1/16] 5 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (x) [K1/16] (5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (x) (5) ]
[ 2]  16 : LABEL	"K1"
                                      2: [ (x) (5) ]
[ 2]  17 : SAVE_RETURN	"K2"	21
                                      3: [ (x) (5) [K2/21] ]
[ 3]  18 : GLOBAL_GET	y
                                      4: [ (x) (5) [K2/21] (a b) ]
[ 4]  19 : GLOBAL_GET	list
                                      5: [ (x) (5) [K2/21] (a b) [Closure/core:list] ]
[ 5]  20 : JMP_CLOSURE	1
                                      4: [ (x) (5) [K2/21] (a b) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ (x) (5) [K2/21] ((a b)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (x) (5) ((a b)) ]
[ 3]  21 : LABEL	"K2"
                                      3: [ (x) (5) ((a b)) ]
[ 3]  22 : GLOBAL_GET	y
                                      4: [ (x) (5) ((a b)) (a b) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (x) (5) ((a b)) (a b) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (x) (5) ((a b)) (a b) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (x 5 (a b) a b) ]
[ 1]   1 : RETURN_VAL
test: got "(x 5 (a b) a b)"  - expected "(x 5 (a b) a b)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro inc1 (x) `(+ ,x 1)) (inc1 2))
ParseNext ==>  (begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 2))
Parsed:  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 2))
Executing:  
	CODE BLOCK # 72 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ 2 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	+
                                      1: [ + ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ + 2 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ + 2 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ + 2 1 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ + 2 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (+ 2 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 72 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

	CODE BLOCK # 73 ; () => ((begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	2
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 73 ; () => ((begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 2)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	2
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 2 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 2 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 2 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro foo (op . rest) `(,op ,@(map number? rest))) (foo list 1 #f 'a))
ParseNext ==>  (begin (defmacro foo (op . rest) (append (list op) (map number? rest))) (foo list 1 #f (quote a)))
Parsed:  (begin (defmacro foo (op . rest) (append (list op) (core:map core:number? rest))) (foo list 1 #f (quote a)))
Executing:  
	CODE BLOCK # 74 ; (op rest) => ((append (list op) (map number? rest)))
	0	MAKE_ENVDOT	1	; (op rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; op
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	11
	7	GLOBAL_GET	number?
	8	LOCAL_GET	0	1	; rest
	9	GLOBAL_GET	map
	10	JMP_CLOSURE	2
11	LABEL	"K1"
	12	GLOBAL_GET	append
	13	JMP_CLOSURE	2

                                      4: [ list 1 #f (quote a) ]
[ 4]   0 : MAKE_ENVDOT	1	; (op rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; op
                                      2: [ [K0/5] list ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K0/5] list [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] list ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/5] (list) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (list) ]
[ 1]   5 : LABEL	"K0"
                                      1: [ (list) ]
[ 1]   6 : SAVE_RETURN	"K1"	11
                                      2: [ (list) [K1/11] ]
[ 2]   7 : GLOBAL_GET	number?
                                      3: [ (list) [K1/11] [Closure/core:number?] ]
[ 3]   8 : LOCAL_GET	0	1	; rest
                                      4: [ (list) [K1/11] [Closure/core:number?] (1 #f (quote a)) ]
[ 4]   9 : GLOBAL_GET	map
                                      5: [ (list) [K1/11] [Closure/core:number?] (1 #f (quote a)) [Closure/core:map] ]
[ 5]  10 : JMP_CLOSURE	2
                                      4: [ (list) [K1/11] [Closure/core:number?] (1 #f (quote a)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ 1 ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ #f ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ (quote a) ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
                                      3: [ (list) [K1/11] (#t #f #f) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (list) (#t #f #f) ]
[ 2]  11 : LABEL	"K1"
                                      2: [ (list) (#t #f #f) ]
[ 2]  12 : GLOBAL_GET	append
                                      3: [ (list) (#t #f #f) [Closure/core:append] ]
[ 3]  13 : JMP_CLOSURE	2
                                      2: [ (list) (#t #f #f) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (list #t #f #f) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 74 ; (op rest) => ((append (list op) (map number? rest)))
	0	MAKE_ENVDOT	1	; (op rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; op
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	11
	7	GLOBAL_GET	number?
	8	LOCAL_GET	0	1	; rest
	9	GLOBAL_GET	map
	10	JMP_CLOSURE	2
11	LABEL	"K1"
	12	GLOBAL_GET	append
	13	JMP_CLOSURE	2

	CODE BLOCK # 75 ; () => ((begin (defmacro foo (op . rest) (append (list op) (map number? rest))) (foo list 1 #f (quote a))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	PUSH_CONST	#f
	3	PUSH_CONST	#f
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 75 ; () => ((begin (defmacro foo (op . rest) (append (list op) (map number? rest))) (foo list 1 #f (quote a))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	#t
	2	PUSH_CONST	#f
	3	PUSH_CONST	#f
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : PUSH_CONST	#f
                                      2: [ #t #f ]
[ 2]   3 : PUSH_CONST	#f
                                      3: [ #t #f #f ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ #t #f #f [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ #t #f #f ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f)"  - expected "(#t #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro lettest (bindings . body) `((lambda ,(map car bindings) ,@body) ,@(map cadr bindings))) (lettest ((x 1) (y 2)) (+ x y)))
ParseNext ==>  (begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))) (lettest ((x 1) (y 2)) (+ x y)))
Parsed:  (begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (core:map core:car bindings)) body)) (core:map core:cadr bindings))) (lettest ((x 1) (y 2)) (core:+ x y)))
Executing:  
	CODE BLOCK # 76 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1) (y 2)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x y)) ((+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x y) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x y) (+ x y)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x y) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x y) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x y) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x y) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (+ x y))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x y) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x y) (+ x y))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (+ x y))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (+ x y))) [K5/30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (+ x y))) (1 2) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x y) (+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (+ x y))) (1 2) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 76 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

	CODE BLOCK # 77 ; (x y) => ((+ x y))
	0	MAKE_ENV	2	; (x y)
	1	LOCAL_GET	0	0	; x
	2	LOCAL_GET	0	1	; y
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK # 78 ; () => ((begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))) (lettest ((x 1) (y 2)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; #77 : ((+ x y))
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 78 ; () => ((begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))) (lettest ((x 1) (y 2)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; #77 : ((+ x y))
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; #77 : ((+ x y))
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	1	; y
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 2 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro inc1 (x) `(+ ,x 1)) (inc1 (inc1 (inc1 1))))
ParseNext ==>  (begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 (inc1 (inc1 1))))
Parsed:  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 (inc1 (inc1 1))))
Executing:  
	CODE BLOCK # 79 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ (inc1 (inc1 1)) ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	+
                                      1: [ + ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ + (inc1 (inc1 1)) ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ + (inc1 (inc1 1)) 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ + (inc1 (inc1 1)) 1 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ + (inc1 (inc1 1)) 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (+ (inc1 (inc1 1)) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 79 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ (inc1 1) ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	+
                                      1: [ + ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ + (inc1 1) ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ + (inc1 1) 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ + (inc1 1) 1 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ + (inc1 1) 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (+ (inc1 1) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 79 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	+
                                      1: [ + ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ + 1 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ + 1 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ + 1 1 [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ + 1 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (+ 1 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 79 ; (x) => ((list (quote +) x (quote 1)))
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

	CODE BLOCK # 80 ; () => ((begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 (inc1 (inc1 1)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	1
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"K1"
	8	PUSH_CONST	1
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"K0"
	12	PUSH_CONST	1
	13	GLOBAL_GET	+
	14	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 80 ; () => ((begin (defmacro inc1 (x) (list (quote +) x (quote 1))) (inc1 (inc1 (inc1 1)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	1
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"K1"
	8	PUSH_CONST	1
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"K0"
	12	PUSH_CONST	1
	13	GLOBAL_GET	+
	14	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	11
                                      1: [ [K0/11] ]
[ 1]   2 : SAVE_RETURN	"K1"	7
                                      2: [ [K0/11] [K1/7] ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/11] [K1/7] 1 ]
[ 3]   4 : PUSH_CONST	1
                                      4: [ [K0/11] [K1/7] 1 1 ]
[ 4]   5 : GLOBAL_GET	+
                                      5: [ [K0/11] [K1/7] 1 1 [Closure/core:+] ]
[ 5]   6 : JMP_CLOSURE	2
                                      4: [ [K0/11] [K1/7] 1 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [K0/11] [K1/7] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/11] 2 ]
[ 2]   7 : LABEL	"K1"
                                      2: [ [K0/11] 2 ]
[ 2]   8 : PUSH_CONST	1
                                      3: [ [K0/11] 2 1 ]
[ 3]   9 : GLOBAL_GET	+
                                      4: [ [K0/11] 2 1 [Closure/core:+] ]
[ 4]  10 : JMP_CLOSURE	2
                                      3: [ [K0/11] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/11] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]  11 : LABEL	"K0"
                                      1: [ 3 ]
[ 1]  12 : PUSH_CONST	1
                                      2: [ 3 1 ]
[ 2]  13 : GLOBAL_GET	+
                                      3: [ 3 1 [Closure/core:+] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ 3 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 4 ]
[ 1]   1 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro add (x y) `(+ ,x ,y)) (mx1 '(add 1 (add 2 3))))
ParseNext ==>  (begin (defmacro add (x y) (list (quote +) x y)) (mx1 (quote (add 1 (add 2 3)))))
Parsed:  (begin (defmacro add (x y) (list (quote core:+) x y)) (core:mx1 (quote (add 1 (add 2 3)))))
Compiled:
	CODE BLOCK # 81 ; (x y) => ((list (quote +) x y))
	0	MAKE_ENV	2	; (x y)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	LOCAL_GET	0	1	; y
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

	CODE BLOCK # 82 ; () => ((begin (defmacro add (x y) (list (quote +) x y)) (mx1 (quote (add 1 (add 2 3))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(add 1 (add 2 3))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 82 ; () => ((begin (defmacro add (x y) (list (quote +) x y)) (mx1 (quote (add 1 (add 2 3))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(add 1 (add 2 3))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(add 1 (add 2 3))
                                      1: [ (add 1 (add 2 3)) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (add 1 (add 2 3)) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (add 1 (add 2 3)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 81 ; (x y) => ((list (quote +) x y))
	0	MAKE_ENV	2	; (x y)
	1	PUSH_CONST	+
	2	LOCAL_GET	0	0	; x
	3	LOCAL_GET	0	1	; y
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      2: [ 1 (add 2 3) ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	+
                                      1: [ + ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ + 1 ]
[ 2]   3 : LOCAL_GET	0	1	; y
                                      3: [ + 1 (add 2 3) ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ + 1 (add 2 3) [Closure/core:list] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ + 1 (add 2 3) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (+ 1 (add 2 3)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (+ 1 (add 2 3)) ]
[ 1]   1 : RETURN_VAL
test: got "(core:+ 1 (add 2 3))"  - expected "(core:+ 1 (add 2 3))"
SUCCESS



***** TestPackages


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-get)
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 42 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 42 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-get)
Parsed:  (core:package-get)
Compiled:
	CODE BLOCK # 43 ; () => ((package-get))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	package-get
	2	JMP_CLOSURE	0

Running...
Executing:  
	CODE BLOCK # 43 ; () => ((package-get))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	package-get
	2	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	package-get
                                      1: [ [Closure/core:package-get] ]
[ 1]   2 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : CALL_PRIMOP	"package-get"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (car '(1 2))
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 44 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 44 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK # 45 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 45 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (car (quote (1 2)))
Parsed:  (core:car (quote (1 2)))
Compiled:
	CODE BLOCK # 46 ; () => ((car (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	car
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 46 ; () => ((car (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	car
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	car
                                      2: [ (1 2) [Closure/core:car] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set nil) (set! x 5) (package-set "foo") (package-import "core") (set! x (+ 1 5)) (package-set nil) x
ParseNext ==>  (package-set nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	CODE BLOCK # 47 ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 47 ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ () [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! x 5)
Parsed:  (set! x 5)
Compiled:
	CODE BLOCK # 48 ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 48 ; () => ((set! x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : RETURN_VAL
test: got "5"  - expected "5"
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 49 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 49 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK # 50 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 50 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! x (+ 1 5))
Parsed:  (set! foo:x (core:+ 1 5))
Compiled:
	CODE BLOCK # 51 ; () => ((set! x (+ 1 5)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	GLOBAL_SET	x
	8	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 51 ; () => ((set! x (+ 1 5)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	GLOBAL_SET	x
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	5
                                      3: [ [K0/6] 1 5 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K0/6] 1 5 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 5 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/6] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   6 : LABEL	"K0"
                                      1: [ 6 ]
[ 1]   7 : GLOBAL_SET	x
                                      1: [ 6 ]
[ 1]   8 : RETURN_VAL
test: got "6"  - expected "6"
ParseNext ==>  (package-set nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	CODE BLOCK # 52 ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 52 ; () => ((package-set nil))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	nil
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ () [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  x
Parsed:  x
Compiled:
	CODE BLOCK # 53 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 53 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (set! first car) (first '(1 2))
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 54 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 54 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
ParseNext ==>  (package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	CODE BLOCK # 55 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 55 ; () => ((package-import "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "core" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! first car)
Parsed:  (set! foo:first core:car)
Compiled:
	CODE BLOCK # 56 ; () => ((set! first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 56 ; () => ((set! first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure/core:car]"  - expected "[Closure/core:car]"
ParseNext ==>  (first (quote (1 2)))
Parsed:  (foo:first (quote (1 2)))
Compiled:
	CODE BLOCK # 57 ; () => ((first (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	first
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 57 ; () => ((first (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	first
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	first
                                      2: [ (1 2) [Closure/core:car] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "a") (package-export '(afoo)) (set! afoo 1) (package-set "b") (package-import "a") afoo
ParseNext ==>  (package-set "a")
Parsed:  (core:package-set "a")
Compiled:
	CODE BLOCK # 58 ; () => ((package-set "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 58 ; () => ((package-set "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "a" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "a" ]
[ 1]   1 : RETURN_VAL
test: got ""a""  - expected ""a""
ParseNext ==>  (package-export (quote (afoo)))
Parsed:  (core:package-export (quote (a:afoo)))
Compiled:
	CODE BLOCK # 59 ; () => ((package-export (quote (afoo))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(afoo)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 59 ; () => ((package-export (quote (afoo))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(afoo)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(afoo)
                                      1: [ (afoo) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (afoo) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (afoo) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  (set! afoo 1)
Parsed:  (set! a:afoo 1)
Compiled:
	CODE BLOCK # 60 ; () => ((set! afoo 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_SET	afoo
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 60 ; () => ((set! afoo 1))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	GLOBAL_SET	afoo
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_SET	afoo
                                      1: [ 1 ]
[ 1]   3 : RETURN_VAL
test: got "1"  - expected "1"
ParseNext ==>  (package-set "b")
Parsed:  (core:package-set "b")
Compiled:
	CODE BLOCK # 61 ; () => ((package-set "b"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 61 ; () => ((package-set "b"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"b"
                                      1: [ "b" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "b" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "b" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "b" ]
[ 1]   1 : RETURN_VAL
test: got ""b""  - expected ""b""
ParseNext ==>  (package-import "a")
Parsed:  (core:package-import "a")
Compiled:
	CODE BLOCK # 62 ; () => ((package-import "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 62 ; () => ((package-import "a"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	package-import
                                      2: [ "a" [Closure/core:package-import] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
ParseNext ==>  afoo
Parsed:  a:afoo
Compiled:
	CODE BLOCK # 63 ; () => (afoo)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	afoo
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 63 ; () => (afoo)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	afoo
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	afoo
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 64 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 64 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (+ (+ 1 2) 3) 4)
ParseNext ==>  (begin (+ (+ 1 2) 3) 4)
Parsed:  (begin (core:+ (core:+ 1 2) 3) 4)
Compiled:
	CODE BLOCK # 65 ; () => ((begin (+ (+ 1 2) 3) 4))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"K1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"K0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 65 ; () => ((begin (+ (+ 1 2) 3) 4))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	+
	6	JMP_CLOSURE	2
7	LABEL	"K1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	+
	10	JMP_CLOSURE	2
11	LABEL	"K0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	11
                                      1: [ [K0/11] ]
[ 1]   2 : SAVE_RETURN	"K1"	7
                                      2: [ [K0/11] [K1/7] ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/11] [K1/7] 1 ]
[ 3]   4 : PUSH_CONST	2
                                      4: [ [K0/11] [K1/7] 1 2 ]
[ 4]   5 : GLOBAL_GET	+
                                      5: [ [K0/11] [K1/7] 1 2 [Closure/core:+] ]
[ 5]   6 : JMP_CLOSURE	2
                                      4: [ [K0/11] [K1/7] 1 2 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [K0/11] [K1/7] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/11] 3 ]
[ 2]   7 : LABEL	"K1"
                                      2: [ [K0/11] 3 ]
[ 2]   8 : PUSH_CONST	3
                                      3: [ [K0/11] 3 3 ]
[ 3]   9 : GLOBAL_GET	+
                                      4: [ [K0/11] 3 3 [Closure/core:+] ]
[ 4]  10 : JMP_CLOSURE	2
                                      3: [ [K0/11] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/11] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]  11 : LABEL	"K0"
                                      1: [ 6 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  14 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5)))
ParseNext ==>  (begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5)))
Parsed:  (begin (set! foo:incf (lambda (foo:x) (core:+ foo:x 1))) (foo:incf (foo:incf 5)))
Compiled:
	CODE BLOCK # 66 ; (x) => ((+ x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK # 67 ; () => ((begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #66 : ((+ x 1))
	2	GLOBAL_SET	incf
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	incf
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	GLOBAL_GET	incf
	10	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 67 ; () => ((begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #66 : ((+ x 1))
	2	GLOBAL_SET	incf
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	incf
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	GLOBAL_GET	incf
	10	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #66 : ((+ x 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	incf
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0/8] ]
[ 1]   5 : PUSH_CONST	5
                                      2: [ [K0/8] 5 ]
[ 2]   6 : GLOBAL_GET	incf
                                      3: [ [K0/8] 5 [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0/8] 5 ]
[ 2]   0 : MAKE_ENV	1	; (x)
                                      1: [ [K0/8] ]
[ 1]   1 : LOCAL_GET	0	0	; x
                                      2: [ [K0/8] 5 ]
[ 2]   2 : PUSH_CONST	1
                                      3: [ [K0/8] 5 1 ]
[ 3]   3 : GLOBAL_GET	+
                                      4: [ [K0/8] 5 1 [Closure/core:+] ]
[ 4]   4 : JMP_CLOSURE	2
                                      3: [ [K0/8] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/8] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   8 : LABEL	"K0"
                                      1: [ 6 ]
[ 1]   9 : GLOBAL_GET	incf
                                      2: [ 6 [Closure] ]
[ 2]  10 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 6 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 6 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 6 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 6 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 7 ]
[ 1]   1 : RETURN_VAL
test: got "7"  - expected "7"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))) (fact 5)
ParseNext ==>  (set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1))))))
Parsed:  (set! foo:fact (lambda (foo:x) (if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1))))))
Compiled:
	CODE BLOCK # 68 ; (x) => ((if (<= x 1) 1 (* x (fact (- x 1)))))
	0	MAKE_ENV	1	; (x)
	1	SAVE_RETURN	"K0"	6
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	<=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	1
	9	RETURN_VAL
10	LABEL	"L3"
	11	LOCAL_GET	0	0	; x
	12	SAVE_RETURN	"K1"	21
	13	SAVE_RETURN	"K2"	18
	14	LOCAL_GET	0	0	; x
	15	PUSH_CONST	1
	16	GLOBAL_GET	-
	17	JMP_CLOSURE	2
18	LABEL	"K2"
	19	GLOBAL_GET	fact
	20	JMP_CLOSURE	1
21	LABEL	"K1"
	22	GLOBAL_GET	*
	23	JMP_CLOSURE	2

	CODE BLOCK # 69 ; () => ((set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #68 : ((if (<= x 1) 1 (* x (fact (- x 1)))))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 69 ; () => ((set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #68 : ((if (<= x 1) 1 (* x (fact (- x 1)))))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #68 : ((if (<= x 1) 1 (* x (fact (- x 1)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (fact 5)
Parsed:  (foo:fact 5)
Compiled:
	CODE BLOCK # 70 ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 70 ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	fact
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 5 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 5 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 5 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]  12 : SAVE_RETURN	"K1"	21
                                      2: [ 5 [K1/21] ]
[ 2]  13 : SAVE_RETURN	"K2"	18
                                      3: [ 5 [K1/21] [K2/18] ]
[ 3]  14 : LOCAL_GET	0	0	; x
                                      4: [ 5 [K1/21] [K2/18] 5 ]
[ 4]  15 : PUSH_CONST	1
                                      5: [ 5 [K1/21] [K2/18] 5 1 ]
[ 5]  16 : GLOBAL_GET	-
                                      6: [ 5 [K1/21] [K2/18] 5 1 [Closure/core:-] ]
[ 6]  17 : JMP_CLOSURE	2
                                      5: [ 5 [K1/21] [K2/18] 5 1 ]
[ 5]   0 : CALL_PRIMOP	"-"
                                      4: [ 5 [K1/21] [K2/18] 4 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [K1/21] 4 ]
[ 3]  18 : LABEL	"K2"
                                      3: [ 5 [K1/21] 4 ]
[ 3]  19 : GLOBAL_GET	fact
                                      4: [ 5 [K1/21] 4 [Closure] ]
[ 4]  20 : JMP_CLOSURE	1
                                      3: [ 5 [K1/21] 4 ]
[ 3]   0 : MAKE_ENV	1	; (x)
                                      2: [ 5 [K1/21] ]
[ 2]   1 : SAVE_RETURN	"K0"	6
                                      3: [ 5 [K1/21] [K0/6] ]
[ 3]   2 : LOCAL_GET	0	0	; x
                                      4: [ 5 [K1/21] [K0/6] 4 ]
[ 4]   3 : PUSH_CONST	1
                                      5: [ 5 [K1/21] [K0/6] 4 1 ]
[ 5]   4 : GLOBAL_GET	<=
                                      6: [ 5 [K1/21] [K0/6] 4 1 [Closure/core:<=] ]
[ 6]   5 : JMP_CLOSURE	2
                                      5: [ 5 [K1/21] [K0/6] 4 1 ]
[ 5]   0 : CALL_PRIMOP	"<="
                                      4: [ 5 [K1/21] [K0/6] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [K1/21] #f ]
[ 3]   6 : LABEL	"K0"
                                      3: [ 5 [K1/21] #f ]
[ 3]   7 : JMP_IF_FALSE	"L3"	10
                                      2: [ 5 [K1/21] ]
[ 2]  10 : LABEL	"L3"
                                      2: [ 5 [K1/21] ]
[ 2]  11 : LOCAL_GET	0	0	; x
                                      3: [ 5 [K1/21] 4 ]
[ 3]  12 : SAVE_RETURN	"K1"	21
                                      4: [ 5 [K1/21] 4 [K1/21] ]
[ 4]  13 : SAVE_RETURN	"K2"	18
                                      5: [ 5 [K1/21] 4 [K1/21] [K2/18] ]
[ 5]  14 : LOCAL_GET	0	0	; x
                                      6: [ 5 [K1/21] 4 [K1/21] [K2/18] 4 ]
[ 6]  15 : PUSH_CONST	1
                                      7: [ 5 [K1/21] 4 [K1/21] [K2/18] 4 1 ]
[ 7]  16 : GLOBAL_GET	-
                                      8: [ 5 [K1/21] 4 [K1/21] [K2/18] 4 1 [Closure/core:-] ]
[ 8]  17 : JMP_CLOSURE	2
                                      7: [ 5 [K1/21] 4 [K1/21] [K2/18] 4 1 ]
[ 7]   0 : CALL_PRIMOP	"-"
                                      6: [ 5 [K1/21] 4 [K1/21] [K2/18] 3 ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [K1/21] 4 [K1/21] 3 ]
[ 5]  18 : LABEL	"K2"
                                      5: [ 5 [K1/21] 4 [K1/21] 3 ]
[ 5]  19 : GLOBAL_GET	fact
                                      6: [ 5 [K1/21] 4 [K1/21] 3 [Closure] ]
[ 6]  20 : JMP_CLOSURE	1
                                      5: [ 5 [K1/21] 4 [K1/21] 3 ]
[ 5]   0 : MAKE_ENV	1	; (x)
                                      4: [ 5 [K1/21] 4 [K1/21] ]
[ 4]   1 : SAVE_RETURN	"K0"	6
                                      5: [ 5 [K1/21] 4 [K1/21] [K0/6] ]
[ 5]   2 : LOCAL_GET	0	0	; x
                                      6: [ 5 [K1/21] 4 [K1/21] [K0/6] 3 ]
[ 6]   3 : PUSH_CONST	1
                                      7: [ 5 [K1/21] 4 [K1/21] [K0/6] 3 1 ]
[ 7]   4 : GLOBAL_GET	<=
                                      8: [ 5 [K1/21] 4 [K1/21] [K0/6] 3 1 [Closure/core:<=] ]
[ 8]   5 : JMP_CLOSURE	2
                                      7: [ 5 [K1/21] 4 [K1/21] [K0/6] 3 1 ]
[ 7]   0 : CALL_PRIMOP	"<="
                                      6: [ 5 [K1/21] 4 [K1/21] [K0/6] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [K1/21] 4 [K1/21] #f ]
[ 5]   6 : LABEL	"K0"
                                      5: [ 5 [K1/21] 4 [K1/21] #f ]
[ 5]   7 : JMP_IF_FALSE	"L3"	10
                                      4: [ 5 [K1/21] 4 [K1/21] ]
[ 4]  10 : LABEL	"L3"
                                      4: [ 5 [K1/21] 4 [K1/21] ]
[ 4]  11 : LOCAL_GET	0	0	; x
                                      5: [ 5 [K1/21] 4 [K1/21] 3 ]
[ 5]  12 : SAVE_RETURN	"K1"	21
                                      6: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] ]
[ 6]  13 : SAVE_RETURN	"K2"	18
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] ]
[ 7]  14 : LOCAL_GET	0	0	; x
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] 3 ]
[ 8]  15 : PUSH_CONST	1
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] 3 1 ]
[ 9]  16 : GLOBAL_GET	-
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] 3 1 [Closure/core:-] ]
[10]  17 : JMP_CLOSURE	2
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] 3 1 ]
[ 9]   0 : CALL_PRIMOP	"-"
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K2/18] 2 ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 ]
[ 7]  18 : LABEL	"K2"
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 ]
[ 7]  19 : GLOBAL_GET	fact
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [Closure] ]
[ 8]  20 : JMP_CLOSURE	1
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 ]
[ 7]   0 : MAKE_ENV	1	; (x)
                                      6: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] ]
[ 6]   1 : SAVE_RETURN	"K0"	6
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] ]
[ 7]   2 : LOCAL_GET	0	0	; x
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] 2 ]
[ 8]   3 : PUSH_CONST	1
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] 2 1 ]
[ 9]   4 : GLOBAL_GET	<=
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] 2 1 [Closure/core:<=] ]
[10]   5 : JMP_CLOSURE	2
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] 2 1 ]
[ 9]   0 : CALL_PRIMOP	"<="
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] [K0/6] #f ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] #f ]
[ 7]   6 : LABEL	"K0"
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] #f ]
[ 7]   7 : JMP_IF_FALSE	"L3"	10
                                      6: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] ]
[ 6]  10 : LABEL	"L3"
                                      6: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] ]
[ 6]  11 : LOCAL_GET	0	0	; x
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 ]
[ 7]  12 : SAVE_RETURN	"K1"	21
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] ]
[ 8]  13 : SAVE_RETURN	"K2"	18
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] ]
[ 9]  14 : LOCAL_GET	0	0	; x
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] 2 ]
[10]  15 : PUSH_CONST	1
                                     11: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] 2 1 ]
[11]  16 : GLOBAL_GET	-
                                     12: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] 2 1 [Closure/core:-] ]
[12]  17 : JMP_CLOSURE	2
                                     11: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] 2 1 ]
[11]   0 : CALL_PRIMOP	"-"
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K2/18] 1 ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] 1 ]
[ 9]  18 : LABEL	"K2"
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] 1 ]
[ 9]  19 : GLOBAL_GET	fact
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] 1 [Closure] ]
[10]  20 : JMP_CLOSURE	1
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] 1 ]
[ 9]   0 : MAKE_ENV	1	; (x)
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] ]
[ 8]   1 : SAVE_RETURN	"K0"	6
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] ]
[ 9]   2 : LOCAL_GET	0	0	; x
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] 1 ]
[10]   3 : PUSH_CONST	1
                                     11: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] 1 1 ]
[11]   4 : GLOBAL_GET	<=
                                     12: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] 1 1 [Closure/core:<=] ]
[12]   5 : JMP_CLOSURE	2
                                     11: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] 1 1 ]
[11]   0 : CALL_PRIMOP	"<="
                                     10: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] [K0/6] #t ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] #t ]
[ 9]   6 : LABEL	"K0"
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] #t ]
[ 9]   7 : JMP_IF_FALSE	"L3"	10
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] ]
[ 8]   8 : PUSH_CONST	1
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 [K1/21] 1 ]
[ 9]   9 : RETURN_VAL
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 1 ]
[ 8]  21 : LABEL	"K1"
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 1 ]
[ 8]  22 : GLOBAL_GET	*
                                      9: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 1 [Closure/core:*] ]
[ 9]  23 : JMP_CLOSURE	2
                                      8: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 1 ]
[ 8]   0 : CALL_PRIMOP	"*"
                                      7: [ 5 [K1/21] 4 [K1/21] 3 [K1/21] 2 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 5 [K1/21] 4 [K1/21] 3 2 ]
[ 6]  21 : LABEL	"K1"
                                      6: [ 5 [K1/21] 4 [K1/21] 3 2 ]
[ 6]  22 : GLOBAL_GET	*
                                      7: [ 5 [K1/21] 4 [K1/21] 3 2 [Closure/core:*] ]
[ 7]  23 : JMP_CLOSURE	2
                                      6: [ 5 [K1/21] 4 [K1/21] 3 2 ]
[ 6]   0 : CALL_PRIMOP	"*"
                                      5: [ 5 [K1/21] 4 [K1/21] 6 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 5 [K1/21] 4 6 ]
[ 4]  21 : LABEL	"K1"
                                      4: [ 5 [K1/21] 4 6 ]
[ 4]  22 : GLOBAL_GET	*
                                      5: [ 5 [K1/21] 4 6 [Closure/core:*] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ 5 [K1/21] 4 6 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 5 [K1/21] 24 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 5 24 ]
[ 2]  21 : LABEL	"K1"
                                      2: [ 5 24 ]
[ 2]  22 : GLOBAL_GET	*
                                      3: [ 5 24 [Closure/core:*] ]
[ 3]  23 : JMP_CLOSURE	2
                                      2: [ 5 24 ]
[ 2]   0 : CALL_PRIMOP	"*"
                                      1: [ 120 ]
[ 1]   1 : RETURN_VAL
test: got "120"  - expected "120"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))) (set! fact (lambda (x) (fact-helper x 1))) (fact 5)
ParseNext ==>  (set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod)))))
Parsed:  (set! foo:fact-helper (lambda (foo:x foo:prod) (if (core:<= foo:x 1) foo:prod (foo:fact-helper (core:- foo:x 1) (core:* foo:x foo:prod)))))
Compiled:
	CODE BLOCK # 71 ; (x prod) => ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	0	MAKE_ENV	2	; (x prod)
	1	SAVE_RETURN	"K0"	6
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	<=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	LOCAL_GET	0	1	; prod
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	LOCAL_GET	0	0	; x
	13	PUSH_CONST	1
	14	GLOBAL_GET	-
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	SAVE_RETURN	"K2"	22
	18	LOCAL_GET	0	0	; x
	19	LOCAL_GET	0	1	; prod
	20	GLOBAL_GET	*
	21	JMP_CLOSURE	2
22	LABEL	"K2"
	23	GLOBAL_GET	fact-helper
	24	JMP_CLOSURE	2

	CODE BLOCK # 72 ; () => ((set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #71 : ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	2	GLOBAL_SET	fact-helper
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 72 ; () => ((set! fact-helper (lambda (x prod) (if (<= x 1) prod (fact-helper (- x 1) (* x prod))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #71 : ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
	2	GLOBAL_SET	fact-helper
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #71 : ((if (<= x 1) prod (fact-helper (- x 1) (* x prod))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact-helper
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (set! fact (lambda (x) (fact-helper x 1)))
Parsed:  (set! foo:fact (lambda (foo:x) (foo:fact-helper foo:x 1)))
Compiled:
	CODE BLOCK # 73 ; (x) => ((fact-helper x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	fact-helper
	4	JMP_CLOSURE	2

	CODE BLOCK # 74 ; () => ((set! fact (lambda (x) (fact-helper x 1))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #73 : ((fact-helper x 1))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 74 ; () => ((set! fact (lambda (x) (fact-helper x 1))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #73 : ((fact-helper x 1))
	2	GLOBAL_SET	fact
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #73 : ((fact-helper x 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fact
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (fact 5)
Parsed:  (foo:fact 5)
Compiled:
	CODE BLOCK # 75 ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 75 ; () => ((fact 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	fact
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	fact
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 5 1 ]
[ 2]   3 : GLOBAL_GET	fact-helper
                                      3: [ 5 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 5 1 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 5 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 5 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 5 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [K1/16] 5 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [K1/16] 5 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [K1/16] 5 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [K1/16] 4 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 4 ]
[ 1]  16 : LABEL	"K1"
                                      1: [ 4 ]
[ 1]  17 : SAVE_RETURN	"K2"	22
                                      2: [ 4 [K2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 4 [K2/22] 5 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 4 [K2/22] 5 1 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 4 [K2/22] 5 1 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 4 [K2/22] 5 1 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 4 [K2/22] 5 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 4 5 ]
[ 2]  22 : LABEL	"K2"
                                      2: [ 4 5 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 4 5 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 4 5 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 4 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 4 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 4 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 4 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [K1/16] 4 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [K1/16] 4 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [K1/16] 4 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 4 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [K1/16] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]  16 : LABEL	"K1"
                                      1: [ 3 ]
[ 1]  17 : SAVE_RETURN	"K2"	22
                                      2: [ 3 [K2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 3 [K2/22] 4 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 3 [K2/22] 4 5 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 3 [K2/22] 4 5 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 3 [K2/22] 4 5 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 3 [K2/22] 20 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 3 20 ]
[ 2]  22 : LABEL	"K2"
                                      2: [ 3 20 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 3 20 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 3 20 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 3 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 3 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 3 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [K1/16] 3 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [K1/16] 3 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [K1/16] 3 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [K1/16] 2 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 2 ]
[ 1]  16 : LABEL	"K1"
                                      1: [ 2 ]
[ 1]  17 : SAVE_RETURN	"K2"	22
                                      2: [ 2 [K2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 2 [K2/22] 3 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 2 [K2/22] 3 20 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 2 [K2/22] 3 20 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 2 [K2/22] 3 20 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 2 [K2/22] 60 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 2 60 ]
[ 2]  22 : LABEL	"K2"
                                      2: [ 2 60 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 2 60 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 2 60 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 2 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 2 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 2 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : LOCAL_GET	0	0	; x
                                      2: [ [K1/16] 2 ]
[ 2]  13 : PUSH_CONST	1
                                      3: [ [K1/16] 2 1 ]
[ 3]  14 : GLOBAL_GET	-
                                      4: [ [K1/16] 2 1 [Closure/core:-] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"-"
                                      2: [ [K1/16] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]  16 : LABEL	"K1"
                                      1: [ 1 ]
[ 1]  17 : SAVE_RETURN	"K2"	22
                                      2: [ 1 [K2/22] ]
[ 2]  18 : LOCAL_GET	0	0	; x
                                      3: [ 1 [K2/22] 2 ]
[ 3]  19 : LOCAL_GET	0	1	; prod
                                      4: [ 1 [K2/22] 2 60 ]
[ 4]  20 : GLOBAL_GET	*
                                      5: [ 1 [K2/22] 2 60 [Closure/core:*] ]
[ 5]  21 : JMP_CLOSURE	2
                                      4: [ 1 [K2/22] 2 60 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 1 [K2/22] 120 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 120 ]
[ 2]  22 : LABEL	"K2"
                                      2: [ 1 120 ]
[ 2]  23 : GLOBAL_GET	fact-helper
                                      3: [ 1 120 [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ 1 120 ]
[ 2]   0 : MAKE_ENV	2	; (x prod)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0/6] 1 1 ]
[ 3]   4 : GLOBAL_GET	<=
                                      4: [ [K0/6] 1 1 [Closure/core:<=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0/6] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]   8 : LOCAL_GET	0	1	; prod
                                      1: [ 120 ]
[ 1]   9 : RETURN_VAL
test: got "120"  - expected "120"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! add +) (add 3 (add 2 1)))
ParseNext ==>  (begin (set! add +) (add 3 (add 2 1)))
Parsed:  (begin (set! foo:add core:+) (foo:add 3 (foo:add 2 1)))
Compiled:
	CODE BLOCK # 76 ; () => ((begin (set! add +) (add 3 (add 2 1))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	+
	2	GLOBAL_SET	add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"K0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	add
	9	JMP_CLOSURE	2
10	LABEL	"K0"
	11	GLOBAL_GET	add
	12	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 76 ; () => ((begin (set! add +) (add 3 (add 2 1))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	+
	2	GLOBAL_SET	add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"K0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	add
	9	JMP_CLOSURE	2
10	LABEL	"K0"
	11	GLOBAL_GET	add
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	+
                                      1: [ [Closure/core:+] ]
[ 1]   2 : GLOBAL_SET	add
                                      1: [ [Closure/core:+] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   5 : SAVE_RETURN	"K0"	10
                                      2: [ 3 [K0/10] ]
[ 2]   6 : PUSH_CONST	2
                                      3: [ 3 [K0/10] 2 ]
[ 3]   7 : PUSH_CONST	1
                                      4: [ 3 [K0/10] 2 1 ]
[ 4]   8 : GLOBAL_GET	add
                                      5: [ 3 [K0/10] 2 1 [Closure/core:+] ]
[ 5]   9 : JMP_CLOSURE	2
                                      4: [ 3 [K0/10] 2 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ 3 [K0/10] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 3 3 ]
[ 2]  10 : LABEL	"K0"
                                      2: [ 3 3 ]
[ 2]  11 : GLOBAL_GET	add
                                      3: [ 3 3 [Closure/core:+] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 3 3 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 6 ]
[ 1]   1 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! kar car) (set! car cdr) (set! result (car '(1 2 3))) (set! car kar) result)
ParseNext ==>  (begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result)
Parsed:  (begin (set! foo:kar core:car) (set! core:car core:cdr) (set! foo:result (core:car (quote (1 2 3)))) (set! core:car foo:kar) foo:result)
Compiled:
	CODE BLOCK # 77 ; () => ((begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	kar
	3	STACK_POP
	4	GLOBAL_GET	cdr
	5	GLOBAL_SET	car
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	car
	10	JMP_CLOSURE	1
11	LABEL	"K0"
	12	GLOBAL_SET	result
	13	STACK_POP
	14	GLOBAL_GET	kar
	15	GLOBAL_SET	car
	16	STACK_POP
	17	GLOBAL_GET	result
	18	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 77 ; () => ((begin (set! kar car) (set! car cdr) (set! result (car (quote (1 2 3)))) (set! car kar) result))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	kar
	3	STACK_POP
	4	GLOBAL_GET	cdr
	5	GLOBAL_SET	car
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	car
	10	JMP_CLOSURE	1
11	LABEL	"K0"
	12	GLOBAL_SET	result
	13	STACK_POP
	14	GLOBAL_GET	kar
	15	GLOBAL_SET	car
	16	STACK_POP
	17	GLOBAL_GET	result
	18	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	kar
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   5 : GLOBAL_SET	car
                                      1: [ [Closure/core:cdr] ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K0"	11
                                      1: [ [K0/11] ]
[ 1]   8 : PUSH_CONST	(1 2 3)
                                      2: [ [K0/11] (1 2 3) ]
[ 2]   9 : GLOBAL_GET	car
                                      3: [ [K0/11] (1 2 3) [Closure/core:cdr] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K0/11] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0/11] (2 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3) ]
[ 1]  11 : LABEL	"K0"
                                      1: [ (2 3) ]
[ 1]  12 : GLOBAL_SET	result
                                      1: [ (2 3) ]
[ 1]  13 : STACK_POP
                                      0: [  ]
[ 0]  14 : GLOBAL_GET	kar
                                      1: [ [Closure/core:car] ]
[ 1]  15 : GLOBAL_SET	car
                                      1: [ [Closure/core:car] ]
[ 1]  16 : STACK_POP
                                      0: [  ]
[ 0]  17 : GLOBAL_GET	result
                                      1: [ (2 3) ]
[ 1]  18 : RETURN_VAL
test: got "(2 3)"  - expected "(2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x) (set! x 5) x) 6)
ParseNext ==>  ((lambda (x) (set! x 5) x) 6)
Parsed:  ((lambda (foo:x) (set! foo:x 5) foo:x) 6)
Compiled:
	CODE BLOCK # 78 ; (x) => ((set! x 5) x)
	0	MAKE_ENV	1	; (x)
	1	PUSH_CONST	5
	2	LOCAL_SET	0	0	; x
	3	STACK_POP
	4	LOCAL_GET	0	0	; x
	5	RETURN_VAL

	CODE BLOCK # 79 ; () => (((lambda (x) (set! x 5) x) 6))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; #78 : ((set! x 5) x)
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 79 ; () => (((lambda (x) (set! x 5) x) 6))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; #78 : ((set! x 5) x)
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #78 : ((set! x 5) x)
                                      2: [ 6 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : LOCAL_SET	0	0	; x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; x
                                      1: [ 5 ]
[ 1]   5 : RETURN_VAL
test: got "5"  - expected "5"
SUCCESS



***** TestStandardLibs
ParseNext ==>  (package-set "core")
Executing:  
	CODE BLOCK # 42 ; () => ((package-set "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "core" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "core" ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-export (quote (let let* letrec define and or cond case first second third rest fold-left fold-right)))
Executing:  
	CODE BLOCK # 43 ; () => ((package-export (quote (let let* letrec define and or cond case first second third rest fold-left fold-right))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let let* letrec define and or cond case first second third rest fold-left fold-right)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let let* letrec define and or cond case first second third rest fold-left fold-right)
                                      1: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
Executing:  
	CODE BLOCK # 45 ; () => ((defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
Executing:  
	CODE BLOCK # 47 ; () => ((defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
Executing:  
	CODE BLOCK # 51 ; () => ((defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
Executing:  
	CODE BLOCK # 53 ; () => ((defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
Executing:  
	CODE BLOCK # 55 ; () => ((defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
Executing:  
	CODE BLOCK # 57 ; () => ((defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro cond (first . rest) (if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
Executing:  
	CODE BLOCK # 59 ; () => ((defmacro cond (first . rest) (if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro case (key . rest) (let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] ((keyval (gensym "KEY"))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((keyval (gensym "KEY"))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((keyval (gensym "KEY"))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ let [K2/25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ let [K2/25] [K3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [K2/25] [K3/22] (keyval (gensym "KEY")) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]  22 : LABEL	"K3"
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [K2/25] (keyval (gensym "KEY")) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K2/25] ((keyval (gensym "KEY"))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((keyval (gensym "KEY"))) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ let ((keyval (gensym "KEY"))) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ let ((keyval (gensym "KEY"))) [K4/44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) ]
[ 4]  31 : LABEL	"K5"
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]  37 : LABEL	"K7"
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ]
[ 5]  40 : LABEL	"K6"
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  44 : LABEL	"K4"
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [K1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"K1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((keyval (gensym "KEY"))) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ keyval ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (keyval) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((keyval)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((keyval)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((keyval)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (gensym "KEY") ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] ((gensym "KEY")) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) (gensym "KEY")) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 63 ; () => ((defmacro case (key . rest) (let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (define first car)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ first car ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (first) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (first) (car) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (first) (car) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (first) (car) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! first car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! first car) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! first car) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! first car) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! first car) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! first car) [K4/28] quote first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! first car) [K4/28] quote first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! first car) [K4/28] quote first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! first car) [K4/28] (quote first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! first car) (quote first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! first car) (quote first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! first car) (quote first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 64 ; () => ((define first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	first
                                      1: [ first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define second cadr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ second cadr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (second) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (second) (cadr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (second) (cadr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (second) (cadr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! second cadr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! second cadr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! second cadr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! second cadr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! second cadr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! second cadr) [K4/28] quote second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! second cadr) [K4/28] quote second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! second cadr) [K4/28] quote second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! second cadr) [K4/28] (quote second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! second cadr) (quote second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! second cadr) (quote second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 65 ; () => ((define second cadr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cadr
	2	GLOBAL_SET	second
	3	STACK_POP
	4	PUSH_CONST	second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cadr
                                      1: [ [Closure/core:cadr] ]
[ 1]   2 : GLOBAL_SET	second
                                      1: [ [Closure/core:cadr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	second
                                      1: [ second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define third caddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ third caddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (third) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (third) (caddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (third) (caddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (third) (caddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! third caddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! third caddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! third caddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! third caddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! third caddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! third caddr) [K4/28] quote third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! third caddr) [K4/28] quote third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! third caddr) [K4/28] quote third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! third caddr) [K4/28] (quote third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! third caddr) (quote third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! third caddr) (quote third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 66 ; () => ((define third caddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	caddr
	2	GLOBAL_SET	third
	3	STACK_POP
	4	PUSH_CONST	third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	caddr
                                      1: [ [Closure/core:caddr] ]
[ 1]   2 : GLOBAL_SET	third
                                      1: [ [Closure/core:caddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	third
                                      1: [ third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define rest cdr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ rest cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] rest ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] rest [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] rest ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] rest ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] rest [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (rest) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (rest) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (rest) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (rest) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (rest) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (rest) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! rest cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! rest cdr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! rest cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! rest cdr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! rest cdr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! rest cdr) [K4/28] quote rest ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! rest cdr) [K4/28] quote rest [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! rest cdr) [K4/28] quote rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! rest cdr) [K4/28] (quote rest) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! rest cdr) (quote rest) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! rest cdr) (quote rest)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 67 ; () => ((define rest cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	rest
	3	STACK_POP
	4	PUSH_CONST	rest
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	rest
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	rest
                                      1: [ rest ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-first cdr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-first cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-first) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-first) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-first) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-first) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-first cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-first cdr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-first cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-first cdr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-first cdr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-first cdr) [K4/28] quote after-first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-first cdr) [K4/28] quote after-first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-first cdr) [K4/28] quote after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-first cdr) [K4/28] (quote after-first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-first cdr) (quote after-first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-first cdr) (quote after-first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 68 ; () => ((define after-first cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	after-first
	3	STACK_POP
	4	PUSH_CONST	after-first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	after-first
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-first
                                      1: [ after-first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-second cddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-second cddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-second) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-second) (cddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-second) (cddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-second) (cddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-second cddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-second cddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-second cddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-second cddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-second cddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-second cddr) [K4/28] quote after-second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-second cddr) [K4/28] quote after-second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-second cddr) [K4/28] quote after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-second cddr) [K4/28] (quote after-second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-second cddr) (quote after-second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-second cddr) (quote after-second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 69 ; () => ((define after-second cddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cddr
	2	GLOBAL_SET	after-second
	3	STACK_POP
	4	PUSH_CONST	after-second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cddr
                                      1: [ [Closure/core:cddr] ]
[ 1]   2 : GLOBAL_SET	after-second
                                      1: [ [Closure/core:cddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-second
                                      1: [ after-second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-third cdddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-third cdddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-third) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-third) (cdddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-third) (cdddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-third) (cdddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-third cdddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-third cdddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-third cdddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-third cdddr) [K4/28] quote after-third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-third cdddr) [K4/28] quote after-third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-third cdddr) [K4/28] quote after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-third cdddr) [K4/28] (quote after-third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-third cdddr) (quote after-third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-third cdddr) (quote after-third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 70 ; () => ((define after-third cdddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdddr
	2	GLOBAL_SET	after-third
	3	STACK_POP
	4	PUSH_CONST	after-third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdddr
                                      1: [ [Closure/core:cdddr] ]
[ 1]   2 : GLOBAL_SET	after-third
                                      1: [ [Closure/core:cdddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-third
                                      1: [ after-third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (fold-left fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (fold-left fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (fold-left fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (fold-left fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (fold-left fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (fold-left fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] fold-left ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-left ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define fold-left ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define fold-left [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define fold-left [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-left [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-left [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-left [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-left [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-left [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define fold-left [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define fold-left [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-left [K6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define fold-left [K6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-left [K6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] fold-left ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] fold-left [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] fold-left ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] fold-left ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] fold-left [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (fold-left) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (fold-left) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (fold-left) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] (quote fold-left) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 72 ; () => ((define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #71 : ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
	2	GLOBAL_SET	fold-left
	3	STACK_POP
	4	PUSH_CONST	fold-left
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #71 : ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-left
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-left
                                      1: [ fold-left ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (fold-right fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (fold-right fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (fold-right fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (fold-right fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (fold-right fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (fold-right fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] fold-right ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-right ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define fold-right ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define fold-right [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define fold-right [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-right [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-right [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-right [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-right [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-right [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define fold-right [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define fold-right [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-right [K6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define fold-right [K6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-right [K6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] fold-right ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] fold-right [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] fold-right ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] fold-right ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] fold-right [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (fold-right) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (fold-right) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (fold-right) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] (quote fold-right) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 74 ; () => ((define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #73 : ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
	2	GLOBAL_SET	fold-right
	3	STACK_POP
	4	PUSH_CONST	fold-right
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #73 : ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-right
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-right
                                      1: [ fold-right ]
[ 1]   5 : RETURN_VAL


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (map number? '(a 2 "foo"))
ParseNext ==>  (map number? (quote (a 2 "foo")))
Parsed:  (core:map core:number? (quote (core:a 2 "foo")))
Compiled:
	CODE BLOCK # 75 ; () => ((map number? (quote (a 2 "foo"))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	number?
	2	PUSH_CONST	(a 2 "foo")
	3	GLOBAL_GET	map
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 75 ; () => ((map number? (quote (a 2 "foo"))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	number?
	2	PUSH_CONST	(a 2 "foo")
	3	GLOBAL_GET	map
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	number?
                                      1: [ [Closure/core:number?] ]
[ 1]   2 : PUSH_CONST	(a 2 "foo")
                                      2: [ [Closure/core:number?] (a 2 "foo") ]
[ 2]   3 : GLOBAL_GET	map
                                      3: [ [Closure/core:number?] (a 2 "foo") [Closure/core:map] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ [Closure/core:number?] (a 2 "foo") ]
[ 2]   0 : CALL_PRIMOP	"map"
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ a ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ 2 ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
Executing:  core:number?
	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
                                      1: [ (#f #t #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #t #f)"  - expected "(#f #t #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
ParseNext ==>  (package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	CODE BLOCK # 76 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 76 ; () => ((package-set "foo"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "foo" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1)) x))
ParseNext ==>  (mx1 (quote (let ((x 1)) x)))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1)) foo:x)))
Compiled:
	CODE BLOCK # 77 ; () => ((mx1 (quote (let ((x 1)) x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1)) x)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 77 ; () => ((mx1 (quote (let ((x 1)) x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1)) x)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let ((x 1)) x)
                                      1: [ (let ((x 1)) x) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let ((x 1)) x) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let ((x 1)) x) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) x ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) (x) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x)) (x) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) (x) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x) x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x) x) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x) x) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x) x) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x) x) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x) x)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) x)) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x) x)) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x) x)) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) x)) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) x)) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) x)) [K5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) x)) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) x)) [K5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) x)) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) x)) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) x) 1) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (x) x) 1) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x) foo:x) 1)"  - expected "((lambda (foo:x) foo:x) 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1) (y 2)) (set! y 42) (+ x y)))
ParseNext ==>  (mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y))))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))))
Compiled:
	CODE BLOCK # 78 ; () => ((mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 78 ; () => ((mx1 (quote (let ((x 1) (y 2)) (set! y 42) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let ((x 1) (y 2)) (set! y 42) (+ x y))
                                      1: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let ((x 1) (y 2)) (set! y 42) (+ x y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 1) (y 2)) (set! y 42) (+ x y) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x y) (set! y 42) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x y) (set! y 42) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"  - expected "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let* ((x 1) (y 2)) (+ x y)))
ParseNext ==>  (mx1 (quote (let* ((x 1) (y 2)) (+ x y))))
Parsed:  (core:mx1 (quote (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))))
Compiled:
	CODE BLOCK # 79 ; () => ((mx1 (quote (let* ((x 1) (y 2)) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 79 ; () => ((mx1 (quote (let* ((x 1) (y 2)) (+ x y)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let* ((x 1) (y 2)) (+ x y))
                                      1: [ (let* ((x 1) (y 2)) (+ x y)) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (let* ((x 1) (y 2)) (+ x y)) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let* ((x 1) (y 2)) (+ x y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((x 1) (y 2)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] ((x 1) (y 2)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((x 1) (y 2)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((x 1) (y 2)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ let [K2/25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ let [K2/25] [K3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [K2/25] [K3/22] ((x 1) (y 2)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [K2/25] [K3/22] ((x 1) (y 2)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [K2/25] [K3/22] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [K2/25] [K3/22] (x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K2/25] (x 1) ]
[ 3]  22 : LABEL	"K3"
                                      3: [ let [K2/25] (x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [K2/25] (x 1) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [K2/25] (x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K2/25] ((x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((x 1)) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ let ((x 1)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ let ((x 1)) [K4/44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ let ((x 1)) [K4/44] [K5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((x 1)) [K4/44] [K5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((x 1)) [K4/44] [K5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((x 1)) [K4/44] [K5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((x 1)) [K4/44] [K5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((x 1)) [K4/44] (let*) ]
[ 4]  31 : LABEL	"K5"
                                      4: [ let ((x 1)) [K4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ let ((x 1)) [K4/44] (let*) [K6/40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y 2)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y 2)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((y 2)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y 2)) ]
[ 6]  37 : LABEL	"K7"
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y 2)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y 2)) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y 2)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] (((y 2))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((x 1)) [K4/44] (let*) (((y 2))) ]
[ 5]  40 : LABEL	"K6"
                                      5: [ let ((x 1)) [K4/44] (let*) (((y 2))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((x 1)) [K4/44] (let*) (((y 2))) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((x 1)) [K4/44] (let*) (((y 2))) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((x 1)) [K4/44] (let*) (((y 2))) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((x 1)) [K4/44] (let* ((y 2)) (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]  44 : LABEL	"K4"
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((x 1)) (let* ((y 2)) (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((x 1)) (let* ((y 2)) (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((x 1)) (let* ((y 2)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (let ((x 1)) (let* ((y 2)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
test: got "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"  - expected "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define x 5))
ParseNext ==>  (mx1 (quote (define x 5)))
Parsed:  (core:mx1 (quote (core:define foo:x 5)))
Compiled:
	CODE BLOCK # 80 ; () => ((mx1 (quote (define x 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define x 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 80 ; () => ((mx1 (quote (define x 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define x 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(define x 5)
                                      1: [ (define x 5) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (define x 5) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (define x 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (x) (5) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x 5) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! x 5) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! x 5) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x 5) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x 5) [K4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x 5) [K4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x 5) [K4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x 5) [K4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x 5) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
test: got "(begin (set! foo:x 5) (quote foo:x))"  - expected "(begin (set! foo:x 5) (quote foo:x))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define (x y) 5))
ParseNext ==>  (mx1 (quote (define (x y) 5)))
Parsed:  (core:mx1 (quote (core:define (foo:x foo:y) 5)))
Compiled:
	CODE BLOCK # 81 ; () => ((mx1 (quote (define (x y) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define (x y) 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 81 ; () => ((mx1 (quote (define (x y) 5))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(define (x y) 5)
	2	GLOBAL_GET	mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(define (x y) 5)
                                      1: [ (define (x y) 5) ]
[ 1]   2 : GLOBAL_GET	mx1
                                      2: [ (define (x y) 5) [Closure/core:mx1] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (define (x y) 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (x y) 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (x y) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (x y) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (x y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (x y) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (x y) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (x y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] x ]
[ 3]   1 : RETURN_VAL
                                      2: [ define x ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define x ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define x [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define x [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define x [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define x [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define x [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define x [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define x [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define x [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define x [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define x [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define x [K6/56] (lambda) [K8/52] (y) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define x [K6/56] (lambda) [K8/52] ((y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define x [K6/56] (lambda) ((y)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define x [K6/56] (lambda) ((y)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define x [K6/56] (lambda) ((y)) (5) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define x [K6/56] (lambda) ((y)) (5) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define x [K6/56] (lambda) ((y)) (5) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define x [K6/56] (lambda (y) 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define x (lambda (y) 5) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define x (lambda (y) 5) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define x (lambda (y) 5) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define x (lambda (y) 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define x (lambda (y) 5)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (define x (lambda (y) 5)) ]
[ 1]   1 : RETURN_VAL
test: got "(core:define foo:x (lambda (foo:y) 5))"  - expected "(core:define foo:x (lambda (foo:y) 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (gensym) (gensym) (gensym "bar_"))
ParseNext ==>  (list (gensym) (gensym) (gensym "bar_"))
Parsed:  (core:list (core:gensym) (core:gensym) (core:gensym "bar_"))
Compiled:
	CODE BLOCK # 82 ; () => ((list (gensym) (gensym) (gensym "bar_")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"K0"
	5	SAVE_RETURN	"K1"	8
	6	GLOBAL_GET	gensym
	7	JMP_CLOSURE	0
8	LABEL	"K1"
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	gensym
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 82 ; () => ((list (gensym) (gensym) (gensym "bar_")))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	4
	2	GLOBAL_GET	gensym
	3	JMP_CLOSURE	0
4	LABEL	"K0"
	5	SAVE_RETURN	"K1"	8
	6	GLOBAL_GET	gensym
	7	JMP_CLOSURE	0
8	LABEL	"K1"
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	gensym
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	4
                                      1: [ [K0/4] ]
[ 1]   2 : GLOBAL_GET	gensym
                                      2: [ [K0/4] [Closure/core:gensym] ]
[ 2]   3 : JMP_CLOSURE	0
                                      1: [ [K0/4] ]
[ 1]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [K0/4] GENSYM-1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ GENSYM-1 ]
[ 1]   4 : LABEL	"K0"
                                      1: [ GENSYM-1 ]
[ 1]   5 : SAVE_RETURN	"K1"	8
                                      2: [ GENSYM-1 [K1/8] ]
[ 2]   6 : GLOBAL_GET	gensym
                                      3: [ GENSYM-1 [K1/8] [Closure/core:gensym] ]
[ 3]   7 : JMP_CLOSURE	0
                                      2: [ GENSYM-1 [K1/8] ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      3: [ GENSYM-1 [K1/8] GENSYM-2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ GENSYM-1 GENSYM-2 ]
[ 2]   8 : LABEL	"K1"
                                      2: [ GENSYM-1 GENSYM-2 ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ GENSYM-1 GENSYM-2 [K2/13] ]
[ 3]  10 : PUSH_CONST	"bar_"
                                      4: [ GENSYM-1 GENSYM-2 [K2/13] "bar_" ]
[ 4]  11 : GLOBAL_GET	gensym
                                      5: [ GENSYM-1 GENSYM-2 [K2/13] "bar_" [Closure/core:gensym] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ GENSYM-1 GENSYM-2 [K2/13] "bar_" ]
[ 4]   0 : CALL_PRIMOP	"gensym"
                                      4: [ GENSYM-1 GENSYM-2 [K2/13] bar_3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]  13 : LABEL	"K2"
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]  14 : GLOBAL_GET	list
                                      4: [ GENSYM-1 GENSYM-2 bar_3 [Closure/core:list] ]
[ 4]  15 : JMP_CLOSURE	3
                                      3: [ GENSYM-1 GENSYM-2 bar_3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (GENSYM-1 GENSYM-2 bar_3) ]
[ 1]   1 : RETURN_VAL
test: got "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"  - expected "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (+ x 1))
ParseNext ==>  (let ((x 1)) (+ x 1))
Parsed:  (core:let ((foo:x 1)) (core:+ foo:x 1))
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (+ x 1) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((+ x 1)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x)) ((+ x 1)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((+ x 1)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x) (+ x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x) (+ x 1)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x) (+ x 1)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x) (+ x 1)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x) (+ x 1)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x) (+ x 1))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (+ x 1))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x) (+ x 1))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x) (+ x 1))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (+ x 1))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (+ x 1))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (+ x 1))) [K5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (+ x 1))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (+ x 1))) [K5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (+ x 1))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (+ x 1))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (+ x 1)) 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 83 ; (x) => ((+ x 1))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	PUSH_CONST	1
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK # 84 ; () => ((let ((x 1)) (+ x 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #83 : ((+ x 1))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 84 ; () => ((let ((x 1)) (+ x 1)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #83 : ((+ x 1))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #83 : ((+ x 1))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1) (y 2)) (set! y 42) (+ x y))
ParseNext ==>  (let ((x 1) (y 2)) (set! y 42) (+ x y))
Parsed:  (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 1) (y 2)) (set! y 42) (+ x y) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! y 42) (+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x y) (set! y 42) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x y) (set! y 42) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x y) (set! y 42) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] [Closure/core:cadr] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) [K5/30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! y 42) (+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! y 42) (+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 85 ; (x y) => ((set! y 42) (+ x y))
	0	MAKE_ENV	2	; (x y)
	1	PUSH_CONST	42
	2	LOCAL_SET	0	1	; y
	3	STACK_POP
	4	LOCAL_GET	0	0	; x
	5	LOCAL_GET	0	1	; y
	6	GLOBAL_GET	+
	7	JMP_CLOSURE	2

	CODE BLOCK # 86 ; () => ((let ((x 1) (y 2)) (set! y 42) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; #85 : ((set! y 42) (+ x y))
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 86 ; () => ((let ((x 1) (y 2)) (set! y 42) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; #85 : ((set! y 42) (+ x y))
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; #85 : ((set! y 42) (+ x y))
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	42
                                      1: [ 42 ]
[ 1]   2 : LOCAL_SET	0	1	; y
                                      1: [ 42 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   5 : LOCAL_GET	0	1	; y
                                      2: [ 1 42 ]
[ 2]   6 : GLOBAL_GET	+
                                      3: [ 1 42 [Closure/core:+] ]
[ 3]   7 : JMP_CLOSURE	2
                                      2: [ 1 42 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 43 ]
[ 1]   1 : RETURN_VAL
test: got "43"  - expected "43"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let* ((x 1) (y x)) (+ x y))
ParseNext ==>  (let* ((x 1) (y x)) (+ x y))
Parsed:  (core:let* ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y))
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((x 1) (y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] ((x 1) (y x)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((x 1) (y x)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((x 1) (y x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ let [K2/25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ let [K2/25] [K3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [K2/25] [K3/22] ((x 1) (y x)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [K2/25] [K3/22] ((x 1) (y x)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [K2/25] [K3/22] ((x 1) (y x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [K2/25] [K3/22] (x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K2/25] (x 1) ]
[ 3]  22 : LABEL	"K3"
                                      3: [ let [K2/25] (x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [K2/25] (x 1) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [K2/25] (x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K2/25] ((x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((x 1)) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ let ((x 1)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ let ((x 1)) [K4/44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ let ((x 1)) [K4/44] [K5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((x 1)) [K4/44] [K5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((x 1)) [K4/44] [K5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((x 1)) [K4/44] [K5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((x 1)) [K4/44] [K5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((x 1)) [K4/44] (let*) ]
[ 4]  31 : LABEL	"K5"
                                      4: [ let ((x 1)) [K4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ let ((x 1)) [K4/44] (let*) [K6/40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y x)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y x)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((x 1) (y x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] [K7/37] ((y x)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y x)) ]
[ 6]  37 : LABEL	"K7"
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y x)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y x)) [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] ((y x)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((x 1)) [K4/44] (let*) [K6/40] (((y x))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((x 1)) [K4/44] (let*) (((y x))) ]
[ 5]  40 : LABEL	"K6"
                                      5: [ let ((x 1)) [K4/44] (let*) (((y x))) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((x 1)) [K4/44] (let*) (((y x))) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((x 1)) [K4/44] (let*) (((y x))) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((x 1)) [K4/44] (let*) (((y x))) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((x 1)) [K4/44] (let* ((y x)) (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]  44 : LABEL	"K4"
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((x 1)) (let* ((y x)) (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((x 1)) (let* ((y x)) (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((x 1)) (let* ((y x)) (+ x y))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] ((y x)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((y x)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((y x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ let [K2/25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ let [K2/25] [K3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [K2/25] [K3/22] ((y x)) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [K2/25] [K3/22] ((y x)) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [K2/25] [K3/22] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [K2/25] [K3/22] (y x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K2/25] (y x) ]
[ 3]  22 : LABEL	"K3"
                                      3: [ let [K2/25] (y x) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [K2/25] (y x) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [K2/25] (y x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K2/25] ((y x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((y x)) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ let ((y x)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ let ((y x)) [K4/44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ let ((y x)) [K4/44] [K5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((y x)) [K4/44] [K5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((y x)) [K4/44] [K5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((y x)) [K4/44] [K5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((y x)) [K4/44] [K5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((y x)) [K4/44] (let*) ]
[ 4]  31 : LABEL	"K5"
                                      4: [ let ((y x)) [K4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ let ((y x)) [K4/44] (let*) [K6/40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ let ((y x)) [K4/44] (let*) [K6/40] [K7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((y x)) [K4/44] (let*) [K6/40] [K7/37] ((y x)) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((y x)) [K4/44] (let*) [K6/40] [K7/37] ((y x)) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((y x)) [K4/44] (let*) [K6/40] [K7/37] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((y x)) [K4/44] (let*) [K6/40] [K7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((y x)) [K4/44] (let*) [K6/40] () ]
[ 6]  37 : LABEL	"K7"
                                      6: [ let ((y x)) [K4/44] (let*) [K6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((y x)) [K4/44] (let*) [K6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((y x)) [K4/44] (let*) [K6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((y x)) [K4/44] (let*) [K6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((y x)) [K4/44] (let*) (()) ]
[ 5]  40 : LABEL	"K6"
                                      5: [ let ((y x)) [K4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((y x)) [K4/44] (let*) (()) ((+ x y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((y x)) [K4/44] (let*) (()) ((+ x y)) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((y x)) [K4/44] (let*) (()) ((+ x y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((y x)) [K4/44] (let* () (+ x y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]  44 : LABEL	"K4"
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((y x)) (let* () (+ x y)) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((y x)) (let* () (+ x y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((y x)) (let* () (+ x y))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [K1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"K1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((+ x y)) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((+ x y)) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (+ x y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (let ((y x)) (begin (+ x y))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (begin (+ x y)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (begin (+ x y)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) [K5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (let ((y x)) (begin (+ x y))))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (let ((y x)) (begin (+ x y)))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((y x)) (begin (+ x y)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((y)) ((begin (+ x y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((y)) ((begin (+ x y))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((y)) ((begin (+ x y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (y) (begin (+ x y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (y) (begin (+ x y))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (y) (begin (+ x y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (y) (begin (+ x y))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (y) (begin (+ x y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (y) (begin (+ x y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (y) (begin (+ x y)))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (y) (begin (+ x y)))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (y) (begin (+ x y)))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (y) (begin (+ x y)))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (y) (begin (+ x y)))) [K5/30] [Closure/core:cadr] ((y x)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (y) (begin (+ x y)))) [K5/30] [Closure/core:cadr] ((y x)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (y) (begin (+ x y)))) [K5/30] [Closure/core:cadr] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (y) (begin (+ x y)))) [K5/30] (x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (y) (begin (+ x y)))) (x) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (y) (begin (+ x y)))) (x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (y) (begin (+ x y))) x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 87 ; (y) => ((begin (+ x y)))
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	1	0	; x
	2	LOCAL_GET	0	0	; y
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK # 88 ; (x) => ((let ((y x)) (begin (+ x y))))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	MAKE_CLOSURE	[Closure]	; #87 : ((begin (+ x y)))
	3	JMP_CLOSURE	1

	CODE BLOCK # 89 ; () => ((let* ((x 1) (y x)) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #88 : ((let ((y x)) (begin (+ x y))))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 89 ; () => ((let* ((x 1) (y x)) (+ x y)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #88 : ((let ((y x)) (begin (+ x y))))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #88 : ((let ((y x)) (begin (+ x y))))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #87 : ((begin (+ x y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (let ((y x)) (+ x y)))
ParseNext ==>  (let ((x 1)) (let ((y x)) (+ x y)))
Parsed:  (core:let ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1)) (let ((y x)) (+ x y)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((let ((y x)) (+ x y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x) (let ((y x)) (+ x y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x) (let ((y x)) (+ x y))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x) (let ((y x)) (+ x y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x) (let ((y x)) (+ x y)))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] [Closure/core:cadr] ((x 1)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] [Closure/core:cadr] ((x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) [K5/30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (let ((y x)) (+ x y)))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (let ((y x)) (+ x y))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((y x)) (+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((y x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((y)) ((+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((y)) ((+ x y)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((y)) ((+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (y) (+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (y) (+ x y)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (y) (+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (y) (+ x y)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (y) (+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (y) (+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (y) (+ x y))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (y) (+ x y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (y) (+ x y))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (y) (+ x y))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (y) (+ x y))) [K5/30] [Closure/core:cadr] ((y x)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (y) (+ x y))) [K5/30] [Closure/core:cadr] ((y x)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (y) (+ x y))) [K5/30] [Closure/core:cadr] ((y x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (y) (+ x y))) [K5/30] (x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (y) (+ x y))) (x) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (y) (+ x y))) (x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (y) (+ x y)) x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 90 ; (y) => ((+ x y))
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	1	0	; x
	2	LOCAL_GET	0	0	; y
	3	GLOBAL_GET	+
	4	JMP_CLOSURE	2

	CODE BLOCK # 91 ; (x) => ((let ((y x)) (+ x y)))
	0	MAKE_ENV	1	; (x)
	1	LOCAL_GET	0	0	; x
	2	MAKE_CLOSURE	[Closure]	; #90 : ((+ x y))
	3	JMP_CLOSURE	1

	CODE BLOCK # 92 ; () => ((let ((x 1)) (let ((y x)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #91 : ((let ((y x)) (+ x y)))
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 92 ; () => ((let ((x 1)) (let ((y x)) (+ x y))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; #91 : ((let ((y x)) (+ x y)))
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #91 : ((let ((y x)) (+ x y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (x)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; #90 : ((+ x y))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	+
                                      3: [ 1 1 [Closure/core:+] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (letrec ((x (lambda () y)) (y 1)) (x))
ParseNext ==>  (letrec ((x (lambda () y)) (y 1)) (x))
Parsed:  (core:letrec ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x))
Executing:  
	CODE BLOCK # 50 ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	15
	7	SAVE_RETURN	"K2"	12
	8	MAKE_CLOSURE	[Closure]	; #48 : ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"K2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"K1"
	16	SAVE_RETURN	"K4"	21
	17	MAKE_CLOSURE	[Closure]	; #49 : ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"K4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((x (lambda () y)) (y 1)) (x) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	let
                                      2: [ [K0/5] let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K0/5] let [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/5] (let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (let) ]
[ 1]   5 : LABEL	"K0"
                                      1: [ (let) ]
[ 1]   6 : SAVE_RETURN	"K1"	15
                                      2: [ (let) [K1/15] ]
[ 2]   7 : SAVE_RETURN	"K2"	12
                                      3: [ (let) [K1/15] [K2/12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; #48 : ((list (car v) nil))
                                      4: [ (let) [K1/15] [K2/12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) [K1/15] [K2/12] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]  10 : GLOBAL_GET	map
                                      6: [ (let) [K1/15] [K2/12] [Closure] ((x (lambda () y)) (y 1)) [Closure/core:map] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (let) [K1/15] [K2/12] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK # 48 ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"K3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (x (lambda () y)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K3"	5
                                      1: [ [K3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [K3/5] (x (lambda () y)) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [K3/5] (x (lambda () y)) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K3/5] (x (lambda () y)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K3/5] x ]
[ 2]   1 : RETURN_VAL
                                      1: [ x ]
[ 1]   5 : LABEL	"K3"
                                      1: [ x ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ x () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ x () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ x () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (x ()) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 48 ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"K3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

                                      1: [ (y 1) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K3"	5
                                      1: [ [K3/5] ]
[ 1]   2 : LOCAL_GET	0	0	; v
                                      2: [ [K3/5] (y 1) ]
[ 2]   3 : GLOBAL_GET	car
                                      3: [ [K3/5] (y 1) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K3/5] (y 1) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K3/5] y ]
[ 2]   1 : RETURN_VAL
                                      1: [ y ]
[ 1]   5 : LABEL	"K3"
                                      1: [ y ]
[ 1]   6 : GLOBAL_GET	nil
                                      2: [ y () ]
[ 2]   7 : GLOBAL_GET	list
                                      3: [ y () [Closure/core:list] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ y () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (y ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) [K1/15] [K2/12] ((x ()) (y ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) [K1/15] ((x ()) (y ())) ]
[ 3]  12 : LABEL	"K2"
                                      3: [ (let) [K1/15] ((x ()) (y ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (let) [K1/15] ((x ()) (y ())) [Closure/core:list] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (let) [K1/15] ((x ()) (y ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (let) [K1/15] (((x ()) (y ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (let) (((x ()) (y ()))) ]
[ 2]  15 : LABEL	"K1"
                                      2: [ (let) (((x ()) (y ()))) ]
[ 2]  16 : SAVE_RETURN	"K4"	21
                                      3: [ (let) (((x ()) (y ()))) [K4/21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; #49 : ((append (list (quote set!)) v))
                                      4: [ (let) (((x ()) (y ()))) [K4/21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; bindings
                                      5: [ (let) (((x ()) (y ()))) [K4/21] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]  19 : GLOBAL_GET	map
                                      6: [ (let) (((x ()) (y ()))) [K4/21] [Closure] ((x (lambda () y)) (y 1)) [Closure/core:map] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (let) (((x ()) (y ()))) [K4/21] [Closure] ((x (lambda () y)) (y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK # 49 ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (x (lambda () y)) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K5"	5
                                      1: [ [K5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [K5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"K5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (x (lambda () y)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (x (lambda () y)) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (x (lambda () y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! x (lambda () y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 49 ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (y 1) ]
[ 1]   0 : MAKE_ENV	1	; (v)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K5"	5
                                      1: [ [K5/5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [K5/5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K5/5] set! [Closure/core:list] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K5/5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K5/5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : LABEL	"K5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; v
                                      2: [ (set!) (y 1) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (y 1) [Closure/core:append] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (y 1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! y 1) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (let) (((x ()) (y ()))) [K4/21] ((set! x (lambda () y)) (set! y 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ]
[ 3]  21 : LABEL	"K4"
                                      3: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ]
[ 3]  22 : LOCAL_GET	0	1	; body
                                      4: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) [Closure/core:append] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (let) (((x ()) (y ()))) ((set! x (lambda () y)) (set! y 1)) ((x)) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (let ((x ()) (y ())) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      4: [ ((x ()) (y ())) (set! x (lambda () y)) (set! y 1) (x) ]
[ 4]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x ()) (y ())) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x ()) (y ())) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x ()) (y ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x y)) ((set! x (lambda () y)) (set! y 1) (x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] [Closure/core:cadr] ((x ()) (y ())) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] [Closure/core:cadr] ((x ()) (y ())) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] [Closure/core:cadr] ((x ()) (y ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) [K5/30] (() ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x))) (() ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (set! x (lambda () y)) (set! y 1) (x)) () ()) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 93 ; () => (y)
	0	MAKE_ENV	0	; ()
	1	LOCAL_GET	1	1	; y
	2	RETURN_VAL

	CODE BLOCK # 94 ; (x y) => ((set! x (lambda () y)) (set! y 1) (x))
	0	MAKE_ENV	2	; (x y)
	1	MAKE_CLOSURE	[Closure]	; #93 : (y)
	2	LOCAL_SET	0	0	; x
	3	STACK_POP
	4	PUSH_CONST	1
	5	LOCAL_SET	0	1	; y
	6	STACK_POP
	7	LOCAL_GET	0	0	; x
	8	JMP_CLOSURE	0

	CODE BLOCK # 95 ; () => ((letrec ((x (lambda () y)) (y 1)) (x)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; #94 : ((set! x (lambda () y)) (set! y 1) (x))
	4	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 95 ; () => ((letrec ((x (lambda () y)) (y 1)) (x)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; #94 : ((set! x (lambda () y)) (set! y 1) (x))
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ () () ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; #94 : ((set! x (lambda () y)) (set! y 1) (x))
                                      3: [ () () [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ () () ]
[ 2]   0 : MAKE_ENV	2	; (x y)
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #93 : (y)
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   5 : LOCAL_SET	0	1	; y
                                      1: [ 1 ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; x
                                      1: [ [Closure] ]
[ 1]   8 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	1	; y
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get))
ParseNext ==>  (begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get))
Parsed:  (begin (core:let ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) (foo:set 5) (foo:get))
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((x 0)) (define (set v) (set! x v)) (define (get) x) ]
[ 3]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((x 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (x) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((x)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((x)) ((define (set v) (set! x v)) (define (get) x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (x) (define (set v) (set! x v)) (define (get) x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] [Closure/core:cadr] ((x 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] [Closure/core:cadr] ((x 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] [Closure/core:cadr] ((x 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) [K5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x) (define (set v) (set! x v)) (define (get) x)) 0) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (set v) (set! x v) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (set v) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (set v) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (set v) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (set v) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (set v) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (set v) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] set ]
[ 3]   1 : RETURN_VAL
                                      2: [ define set ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define set ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define set [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define set [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define set [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define set [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define set [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define set [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define set [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define set [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define set [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define set [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define set [K6/56] (lambda) [K8/52] [K9/49] (set v) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define set [K6/56] (lambda) [K8/52] [K9/49] (set v) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define set [K6/56] (lambda) [K8/52] [K9/49] (set v) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define set [K6/56] (lambda) [K8/52] [K9/49] (v) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define set [K6/56] (lambda) [K8/52] (v) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define set [K6/56] (lambda) [K8/52] (v) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define set [K6/56] (lambda) [K8/52] (v) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define set [K6/56] (lambda) [K8/52] (v) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define set [K6/56] (lambda) [K8/52] ((v)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define set [K6/56] (lambda) ((v)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define set [K6/56] (lambda) ((v)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define set [K6/56] (lambda) ((v)) ((set! x v)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define set [K6/56] (lambda) ((v)) ((set! x v)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define set [K6/56] (lambda) ((v)) ((set! x v)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define set [K6/56] (lambda (v) (set! x v)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define set (lambda (v) (set! x v)) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define set (lambda (v) (set! x v)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define set (lambda (v) (set! x v))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ set (lambda (v) (set! x v)) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] set ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] set [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] set ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] set ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] set [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (set) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (set) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (set) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (set) ((lambda (v) (set! x v))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (set) ((lambda (v) (set! x v))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (set) ((lambda (v) (set! x v))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! set (lambda (v) (set! x v))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! set (lambda (v) (set! x v))) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! set (lambda (v) (set! x v))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! set (lambda (v) (set! x v))) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! set (lambda (v) (set! x v))) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! set (lambda (v) (set! x v))) [K4/28] quote set ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! set (lambda (v) (set! x v))) [K4/28] quote set [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! set (lambda (v) (set! x v))) [K4/28] quote set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! set (lambda (v) (set! x v))) [K4/28] (quote set) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! set (lambda (v) (set! x v))) (quote set) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! set (lambda (v) (set! x v))) (quote set) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! set (lambda (v) (set! x v))) (quote set)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (get) x ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (get) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (get) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (get) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (get) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (get) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (get) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] get ]
[ 3]   1 : RETURN_VAL
                                      2: [ define get ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define get ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define get [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define get [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define get [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define get [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define get [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define get [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define get [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define get [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define get [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define get [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define get [K6/56] (lambda) [K8/52] [K9/49] (get) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define get [K6/56] (lambda) [K8/52] [K9/49] (get) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define get [K6/56] (lambda) [K8/52] [K9/49] (get) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define get [K6/56] (lambda) [K8/52] [K9/49] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ define get [K6/56] (lambda) [K8/52] () ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define get [K6/56] (lambda) [K8/52] () ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define get [K6/56] (lambda) [K8/52] () [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define get [K6/56] (lambda) [K8/52] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define get [K6/56] (lambda) [K8/52] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define get [K6/56] (lambda) (()) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define get [K6/56] (lambda) (()) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define get [K6/56] (lambda) (()) (x) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define get [K6/56] (lambda) (()) (x) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define get [K6/56] (lambda) (()) (x) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define get [K6/56] (lambda () x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define get (lambda () x) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define get (lambda () x) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define get (lambda () x) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define get (lambda () x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define get (lambda () x)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ get (lambda () x) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] get ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] get [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] get ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] get ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] get [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (get) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (get) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (get) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (get) ((lambda () x)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (get) ((lambda () x)) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (get) ((lambda () x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! get (lambda () x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! get (lambda () x)) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! get (lambda () x)) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! get (lambda () x)) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! get (lambda () x)) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! get (lambda () x)) [K4/28] quote get ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! get (lambda () x)) [K4/28] quote get [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! get (lambda () x)) [K4/28] quote get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! get (lambda () x)) [K4/28] (quote get) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! get (lambda () x)) (quote get) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! get (lambda () x)) (quote get) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! get (lambda () x)) (quote get)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 96 ; (v) => ((set! x v))
	0	MAKE_ENV	1	; (v)
	1	LOCAL_GET	0	0	; v
	2	LOCAL_SET	1	0	; x
	3	RETURN_VAL

	CODE BLOCK # 97 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	LOCAL_GET	1	0	; x
	2	RETURN_VAL

	CODE BLOCK # 98 ; (x) => ((define (set v) (set! x v)) (define (get) x))
	0	MAKE_ENV	1	; (x)
	1	MAKE_CLOSURE	[Closure]	; #96 : ((set! x v))
	2	GLOBAL_SET	set
	3	STACK_POP
	4	MAKE_CLOSURE	[Closure]	; #97 : (x)
	5	GLOBAL_SET	get
	6	STACK_POP
	7	PUSH_CONST	get
	8	RETURN_VAL

	CODE BLOCK # 99 ; () => ((begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; #98 : ((define (set v) (set! x v)) (define (get) x))
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	STACK_POP
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	set
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	STACK_POP
	13	GLOBAL_GET	get
	14	JMP_CLOSURE	0

Running...
Executing:  
	CODE BLOCK # 99 ; () => ((begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; #98 : ((define (set v) (set! x v)) (define (get) x))
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	STACK_POP
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	set
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	STACK_POP
	13	GLOBAL_GET	get
	14	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [K0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; #98 : ((define (set v) (set! x v)) (define (get) x))
                                      3: [ [K0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (x)
                                      1: [ [K0/5] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; #96 : ((set! x v))
                                      2: [ [K0/5] [Closure] ]
[ 2]   2 : GLOBAL_SET	set
                                      2: [ [K0/5] [Closure] ]
[ 2]   3 : STACK_POP
                                      1: [ [K0/5] ]
[ 1]   4 : MAKE_CLOSURE	[Closure]	; #97 : (x)
                                      2: [ [K0/5] [Closure] ]
[ 2]   5 : GLOBAL_SET	get
                                      2: [ [K0/5] [Closure] ]
[ 2]   6 : STACK_POP
                                      1: [ [K0/5] ]
[ 1]   7 : PUSH_CONST	get
                                      2: [ [K0/5] get ]
[ 2]   8 : RETURN_VAL
                                      1: [ get ]
[ 1]   5 : LABEL	"K0"
                                      1: [ get ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : PUSH_CONST	5
                                      2: [ [K1/11] 5 ]
[ 2]   9 : GLOBAL_GET	set
                                      3: [ [K1/11] 5 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 5 ]
[ 2]   0 : MAKE_ENV	1	; (v)
                                      1: [ [K1/11] ]
[ 1]   1 : LOCAL_GET	0	0	; v
                                      2: [ [K1/11] 5 ]
[ 2]   2 : LOCAL_SET	1	0	; x
                                      2: [ [K1/11] 5 ]
[ 2]   3 : RETURN_VAL
                                      1: [ 5 ]
[ 1]  11 : LABEL	"K1"
                                      1: [ 5 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : GLOBAL_GET	get
                                      1: [ [Closure] ]
[ 1]  14 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define x 5) x
ParseNext ==>  (define x 5)
Parsed:  (core:define foo:x 5)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x 5 ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (x) (5) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x 5) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! x 5) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! x 5) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x 5) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x 5) [K4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x 5) [K4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x 5) [K4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x 5) [K4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x 5) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x 5) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x 5) (quote x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 100 ; () => ((define x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 100 ; () => ((define x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	x
                                      1: [ x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
ParseNext ==>  x
Parsed:  foo:x
Compiled:
	CODE BLOCK # 101 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 101 ; () => (x)
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define (x y) y) (x 5)
ParseNext ==>  (define (x y) y)
Parsed:  (core:define (foo:x foo:y) foo:y)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (x y) y ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (x y) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (x y) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (x y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (x y) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (x y) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (x y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] x ]
[ 3]   1 : RETURN_VAL
                                      2: [ define x ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define x ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define x [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define x [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define x [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define x [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define x [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define x [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define x [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define x [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define x [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define x [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (x y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define x [K6/56] (lambda) [K8/52] [K9/49] (y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define x [K6/56] (lambda) [K8/52] (y) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define x [K6/56] (lambda) [K8/52] (y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define x [K6/56] (lambda) [K8/52] ((y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define x [K6/56] (lambda) ((y)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define x [K6/56] (lambda) ((y)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define x [K6/56] (lambda) ((y)) (y) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define x [K6/56] (lambda) ((y)) (y) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define x [K6/56] (lambda) ((y)) (y) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define x [K6/56] (lambda (y) y) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define x (lambda (y) y) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define x (lambda (y) y) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define x (lambda (y) y) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define x (lambda (y) y) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define x (lambda (y) y)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ x (lambda (y) y) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] x ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] x [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] x [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (x) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (x) ((lambda (y) y)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (x) ((lambda (y) y)) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (x) ((lambda (y) y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! x (lambda (y) y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! x (lambda (y) y)) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! x (lambda (y) y)) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! x (lambda (y) y)) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! x (lambda (y) y)) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! x (lambda (y) y)) [K4/28] quote x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! x (lambda (y) y)) [K4/28] quote x [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! x (lambda (y) y)) [K4/28] quote x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! x (lambda (y) y)) [K4/28] (quote x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! x (lambda (y) y)) (quote x) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! x (lambda (y) y)) (quote x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! x (lambda (y) y)) (quote x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 102 ; (y) => (y)
	0	MAKE_ENV	1	; (y)
	1	LOCAL_GET	0	0	; y
	2	RETURN_VAL

	CODE BLOCK # 103 ; () => ((define (x y) y))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #102 : (y)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 103 ; () => ((define (x y) y))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #102 : (y)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #102 : (y)
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	x
                                      1: [ x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
ParseNext ==>  (x 5)
Parsed:  (foo:x 5)
Compiled:
	CODE BLOCK # 104 ; () => ((x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	x
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 104 ; () => ((x 5))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	5
	2	GLOBAL_GET	x
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	x
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1	; (y)
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; y
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cons (first '(1 2 3)) (rest '(1 2 3)))
ParseNext ==>  (cons (first (quote (1 2 3))) (rest (quote (1 2 3))))
Parsed:  (core:cons (core:first (quote (1 2 3))) (core:rest (quote (1 2 3))))
Compiled:
	CODE BLOCK # 105 ; () => ((cons (first (quote (1 2 3))) (rest (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	first
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	rest
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	GLOBAL_GET	cons
	12	JMP_CLOSURE	2

Running...
Executing:  
	CODE BLOCK # 105 ; () => ((cons (first (quote (1 2 3))) (rest (quote (1 2 3)))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	first
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	rest
	9	JMP_CLOSURE	1
10	LABEL	"K1"
	11	GLOBAL_GET	cons
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	(1 2 3)
                                      2: [ [K0/5] (1 2 3) ]
[ 2]   3 : GLOBAL_GET	first
                                      3: [ [K0/5] (1 2 3) [Closure/core:car] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0/5] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   5 : LABEL	"K0"
                                      1: [ 1 ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ 1 [K1/10] ]
[ 2]   7 : PUSH_CONST	(1 2 3)
                                      3: [ 1 [K1/10] (1 2 3) ]
[ 3]   8 : GLOBAL_GET	rest
                                      4: [ 1 [K1/10] (1 2 3) [Closure/core:cdr] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ 1 [K1/10] (1 2 3) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ 1 [K1/10] (2 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2 3) ]
[ 2]  10 : LABEL	"K1"
                                      2: [ 1 (2 3) ]
[ 2]  11 : GLOBAL_GET	cons
                                      3: [ 1 (2 3) [Closure/core:cons] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 1 (2 3) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3))
ParseNext ==>  (list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3))
Parsed:  (core:list (core:and 1) (core:and 1 2) (core:and 1 2 3) (core:and 1 #f 2 3))
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] 1 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1/11] 1 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1/11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : LABEL	"K1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	car
                                      2: [ (1) [Closure/core:car] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (2) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (2) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (2) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (2) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (2) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [K5/35] 1 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5/35] 1 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5/35] 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5/35] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (1) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if) (1) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (1) (2) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (1) (2) [K6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (1) (2) [K6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (1) (2) [K6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (1) (2) [K6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (1) (2) [K6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  41 : LABEL	"K6"
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (1) (2) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (1) (2) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 1 2 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ 1 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 2 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if 1 [K7/56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if 1 [K7/56] [K8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if 1 [K7/56] [K8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [K7/56] [K8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [K7/56] [K8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [K7/56] [K8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [K7/56] (and) ]
[ 4]  52 : LABEL	"K8"
                                      4: [ if 1 [K7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if 1 [K7/56] (and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [K7/56] (and) (2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [K7/56] (and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [K7/56] (and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (and 2 3) ]
[ 3]  56 : LABEL	"K7"
                                      3: [ if 1 (and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (and 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [K5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (2) (3) [K6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [K6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [K6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [K6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [K6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : LABEL	"K6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      4: [ 1 #f 2 3 ]
[ 4]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (#f 2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (#f 2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (#f 2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (#f 2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (#f 2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (#f 2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 3 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 3 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 3 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 3 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if 1 [K7/56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if 1 [K7/56] [K8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if 1 [K7/56] [K8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [K7/56] [K8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [K7/56] [K8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [K7/56] [K8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [K7/56] (and) ]
[ 4]  52 : LABEL	"K8"
                                      4: [ if 1 [K7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if 1 [K7/56] (and) (#f 2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [K7/56] (and) (#f 2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [K7/56] (and) (#f 2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [K7/56] (and #f 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (and #f 2 3) ]
[ 3]  56 : LABEL	"K7"
                                      3: [ if 1 (and #f 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (and #f 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (and #f 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (and #f 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (and #f 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ #f 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (2 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (2 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (2 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (2 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 2 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; first
                                      2: [ if #f ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if #f [K7/56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if #f [K7/56] [K8/52] ]
[ 4]  49 : PUSH_CONST	and
                                      5: [ if #f [K7/56] [K8/52] and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if #f [K7/56] [K8/52] and [Closure/core:list] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if #f [K7/56] [K8/52] and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if #f [K7/56] [K8/52] (and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if #f [K7/56] (and) ]
[ 4]  52 : LABEL	"K8"
                                      4: [ if #f [K7/56] (and) ]
[ 4]  53 : LOCAL_GET	0	1	; rest
                                      5: [ if #f [K7/56] (and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if #f [K7/56] (and) (2 3) [Closure/core:append] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if #f [K7/56] (and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if #f [K7/56] (and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if #f (and 2 3) ]
[ 3]  56 : LABEL	"K7"
                                      3: [ if #f (and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if #f (and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if #f (and 2 3) #f [Closure/core:list] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if #f (and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if #f (and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4/30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if) [K5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (2) (3) [K6/41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [K6/41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [K6/41] #f [Closure/core:list] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [K6/41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [K6/41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : LABEL	"K6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure/core:append] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 106 ; () => ((list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 106 ; () => ((list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	#f
                                      4: [ 1 2 3 #f ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ 1 2 3 #f [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0)))
ParseNext ==>  (list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0)))
Parsed:  (core:list (core:or 1) (core:or 2 1) (core:or (core:< 1 0) (core:< 2 0) 3) (core:or (core:< 1 0) (core:< 2 0)))
Executing:  
	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] 1 ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1/11] 1 [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1/11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : LABEL	"K1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	car
                                      2: [ (1) [Closure/core:car] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ 2 1 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (1) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (1) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (1) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (1) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (1) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (1) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [K5/35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5/35] 2 [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5/35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5/35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) (2) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if*) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) (2) (1) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) (2) (1) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) (2) (1) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* 2 1) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      3: [ (< 1 0) (< 2 0) 3 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] ((< 2 0) 3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((< 2 0) 3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((< 2 0) 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] ((< 2 0) 3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] ((< 2 0) 3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] ((< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 2 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 2 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 2 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  39 : LABEL	"L8"
                                      0: [  ]
[ 0]  40 : PUSH_CONST	if*
                                      1: [ if* ]
[ 1]  41 : LOCAL_GET	0	0	; first
                                      2: [ if* (< 1 0) ]
[ 2]  42 : SAVE_RETURN	"K6"	51
                                      3: [ if* (< 1 0) [K6/51] ]
[ 3]  43 : SAVE_RETURN	"K7"	47
                                      4: [ if* (< 1 0) [K6/51] [K7/47] ]
[ 4]  44 : PUSH_CONST	or
                                      5: [ if* (< 1 0) [K6/51] [K7/47] or ]
[ 5]  45 : GLOBAL_GET	list
                                      6: [ if* (< 1 0) [K6/51] [K7/47] or [Closure/core:list] ]
[ 6]  46 : JMP_CLOSURE	1
                                      5: [ if* (< 1 0) [K6/51] [K7/47] or ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if* (< 1 0) [K6/51] [K7/47] (or) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if* (< 1 0) [K6/51] (or) ]
[ 4]  47 : LABEL	"K7"
                                      4: [ if* (< 1 0) [K6/51] (or) ]
[ 4]  48 : LOCAL_GET	0	1	; rest
                                      5: [ if* (< 1 0) [K6/51] (or) ((< 2 0) 3) ]
[ 5]  49 : GLOBAL_GET	append
                                      6: [ if* (< 1 0) [K6/51] (or) ((< 2 0) 3) [Closure/core:append] ]
[ 6]  50 : JMP_CLOSURE	2
                                      5: [ if* (< 1 0) [K6/51] (or) ((< 2 0) 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if* (< 1 0) [K6/51] (or (< 2 0) 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]  51 : LABEL	"K6"
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]  52 : GLOBAL_GET	list
                                      4: [ if* (< 1 0) (or (< 2 0) 3) [Closure/core:list] ]
[ 4]  53 : JMP_CLOSURE	3
                                      3: [ if* (< 1 0) (or (< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (if* (< 1 0) (or (< 2 0) 3)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (< 2 0) 3 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (3) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (3) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] (3) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [K5/35] (< 2 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5/35] (< 2 0) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5/35] (< 2 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5/35] ((< 2 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((< 2 0)) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if*) ((< 2 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) ((< 2 0)) (3) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((< 2 0)) (3) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((< 2 0)) (3) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (< 2 0) 3) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (< 1 0) (< 2 0) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] ((< 2 0)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((< 2 0)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((< 2 0)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2/24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2/24] [K3/20] ]
[ 2]  17 : LOCAL_GET	0	1	; rest
                                      3: [ [K2/24] [K3/20] ((< 2 0)) ]
[ 3]  18 : GLOBAL_GET	length
                                      4: [ [K2/24] [K3/20] ((< 2 0)) [Closure/core:length] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2/24] [K3/20] ((< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2/24] [K3/20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2/24] 1 ]
[ 2]  20 : LABEL	"K3"
                                      2: [ [K2/24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2/24] 1 1 ]
[ 3]  22 : GLOBAL_GET	=
                                      4: [ [K2/24] 1 1 [Closure/core:=] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2/24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4/30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4/30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4/30] if* [Closure/core:list] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4/30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4/30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5/35] ]
[ 2]  32 : LOCAL_GET	0	0	; first
                                      3: [ (if*) [K5/35] (< 1 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5/35] (< 1 0) [Closure/core:list] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5/35] (< 1 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5/35] ((< 1 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((< 1 0)) ]
[ 2]  35 : LABEL	"K5"
                                      2: [ (if*) ((< 1 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; rest
                                      3: [ (if*) ((< 1 0)) ((< 2 0)) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((< 1 0)) ((< 2 0)) [Closure/core:append] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((< 1 0)) ((< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (< 1 0) (< 2 0)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 107 ; () => ((list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	LABEL	"L0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	<
	12	JMP_CLOSURE	2
13	LABEL	"K1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"K2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	<
	21	JMP_CLOSURE	2
22	LABEL	"K2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	LABEL	"L3"
28	LABEL	"L4"
	29	SAVE_RETURN	"K5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	<
	33	JMP_CLOSURE	2
34	LABEL	"K5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"K6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	<
	42	JMP_CLOSURE	2
43	LABEL	"K6"
44	LABEL	"L7"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	4

Running...
Executing:  
	CODE BLOCK # 107 ; () => ((list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	LABEL	"L0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	<
	12	JMP_CLOSURE	2
13	LABEL	"K1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"K2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	<
	21	JMP_CLOSURE	2
22	LABEL	"K2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	LABEL	"L3"
28	LABEL	"L4"
	29	SAVE_RETURN	"K5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	<
	33	JMP_CLOSURE	2
34	LABEL	"K5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"K6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	<
	42	JMP_CLOSURE	2
43	LABEL	"K6"
44	LABEL	"L7"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : DUPLICATE
                                      3: [ 1 2 2 ]
[ 3]   4 : JMP_IF_TRUE	"L0"	7
                                      2: [ 1 2 ]
[ 2]   7 : LABEL	"L0"
                                      2: [ 1 2 ]
[ 2]   8 : SAVE_RETURN	"K1"	13
                                      3: [ 1 2 [K1/13] ]
[ 3]   9 : PUSH_CONST	1
                                      4: [ 1 2 [K1/13] 1 ]
[ 4]  10 : PUSH_CONST	0
                                      5: [ 1 2 [K1/13] 1 0 ]
[ 5]  11 : GLOBAL_GET	<
                                      6: [ 1 2 [K1/13] 1 0 [Closure/core:<] ]
[ 6]  12 : JMP_CLOSURE	2
                                      5: [ 1 2 [K1/13] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [K1/13] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  13 : LABEL	"K1"
                                      3: [ 1 2 #f ]
[ 3]  14 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  15 : JMP_IF_TRUE	"L4"	28
                                      3: [ 1 2 #f ]
[ 3]  16 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  17 : SAVE_RETURN	"K2"	22
                                      3: [ 1 2 [K2/22] ]
[ 3]  18 : PUSH_CONST	2
                                      4: [ 1 2 [K2/22] 2 ]
[ 4]  19 : PUSH_CONST	0
                                      5: [ 1 2 [K2/22] 2 0 ]
[ 5]  20 : GLOBAL_GET	<
                                      6: [ 1 2 [K2/22] 2 0 [Closure/core:<] ]
[ 6]  21 : JMP_CLOSURE	2
                                      5: [ 1 2 [K2/22] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [K2/22] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  22 : LABEL	"K2"
                                      3: [ 1 2 #f ]
[ 3]  23 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  24 : JMP_IF_TRUE	"L3"	27
                                      3: [ 1 2 #f ]
[ 3]  25 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  26 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]  27 : LABEL	"L3"
                                      3: [ 1 2 3 ]
[ 3]  28 : LABEL	"L4"
                                      3: [ 1 2 3 ]
[ 3]  29 : SAVE_RETURN	"K5"	34
                                      4: [ 1 2 3 [K5/34] ]
[ 4]  30 : PUSH_CONST	1
                                      5: [ 1 2 3 [K5/34] 1 ]
[ 5]  31 : PUSH_CONST	0
                                      6: [ 1 2 3 [K5/34] 1 0 ]
[ 6]  32 : GLOBAL_GET	<
                                      7: [ 1 2 3 [K5/34] 1 0 [Closure/core:<] ]
[ 7]  33 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [K5/34] 1 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [K5/34] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  34 : LABEL	"K5"
                                      4: [ 1 2 3 #f ]
[ 4]  35 : DUPLICATE
                                      5: [ 1 2 3 #f #f ]
[ 5]  36 : JMP_IF_TRUE	"L7"	44
                                      4: [ 1 2 3 #f ]
[ 4]  37 : STACK_POP
                                      3: [ 1 2 3 ]
[ 3]  38 : SAVE_RETURN	"K6"	43
                                      4: [ 1 2 3 [K6/43] ]
[ 4]  39 : PUSH_CONST	2
                                      5: [ 1 2 3 [K6/43] 2 ]
[ 5]  40 : PUSH_CONST	0
                                      6: [ 1 2 3 [K6/43] 2 0 ]
[ 6]  41 : GLOBAL_GET	<
                                      7: [ 1 2 3 [K6/43] 2 0 [Closure/core:<] ]
[ 7]  42 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [K6/43] 2 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [K6/43] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  43 : LABEL	"K6"
                                      4: [ 1 2 3 #f ]
[ 4]  44 : LABEL	"L7"
                                      4: [ 1 2 3 #f ]
[ 4]  45 : GLOBAL_GET	list
                                      5: [ 1 2 3 #f [Closure/core:list] ]
[ 5]  46 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 1 4) 4) 0)
ParseNext ==>  (cond ((= 1 2) 2) ((= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 1 4) 4) 0)
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((= 1 2) 2) ((= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (((= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (((= 1 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (((= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 1 2) 2) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 1 2) 2) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 2) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 1 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 1 2) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 1 2) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 1 2) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 1 2) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 1 2) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 2) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 1 2) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 1 2) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 1 2) [K5/46] (begin) (2) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 2) [K5/46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 1 2) (begin 2) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 1 2) (begin 2) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond ((= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 2) (begin 2) (cond ((= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 1 4) 4) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 1 4) 4) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 4) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 1 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 1 4) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 1 4) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 1 4) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 1 4) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 1 4) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 4) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 1 4) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 1 4) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 1 4) [K5/46] (begin) (4) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 4) [K5/46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 1 4) (begin 4) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 1 4) (begin 4) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 1 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] 0 ]
[ 2]   9 : GLOBAL_GET	cons?
                                      3: [ [K1/11] 0 [Closure/core:cons?] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1/11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 108 ; () => ((cond ((= 1 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 108 ; () => ((cond ((= 1 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [K0/6] 1 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : PUSH_CONST	1
                                      2: [ [K1/16] 1 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [K1/16] 1 4 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [K1/16] 1 4 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 1 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1/16] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  16 : LABEL	"K1"
                                      1: [ #f ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  20 : LABEL	"L2"
                                      0: [  ]
[ 0]  21 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]  22 : RETURN_VAL
test: got "0"  - expected "0"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 2 2) 2) ((= 1 4) 4) 0)
ParseNext ==>  (cond ((= 2 2) 2) ((= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 2 2) 2) ((core:= 1 4) 4) 0)
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((= 2 2) 2) ((= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (((= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (((= 1 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (((= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 2 2) 2) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 2 2) 2) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 2 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 2 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 2 2) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 2 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 2 2) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 2 2) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 2 2) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 2 2) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 2 2) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 2 2) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 2 2) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 2 2) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 2 2) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 2 2) [K5/46] (begin) [K7/43] ((= 2 2) 2) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 2 2) [K5/46] (begin) [K7/43] ((= 2 2) 2) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 2 2) [K5/46] (begin) [K7/43] ((= 2 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 2 2) [K5/46] (begin) [K7/43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 2 2) [K5/46] (begin) (2) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 2 2) [K5/46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 2 2) [K5/46] (begin) (2) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 2 2) [K5/46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 2 2) [K5/46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 2 2) (begin 2) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 2 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 2 2) (begin 2) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 2 2) (begin 2) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 2 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 2 2) (begin 2) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 2 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 2 2) (begin 2) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 2 2) (begin 2) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 2 2) (begin 2) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 2 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 2 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 2 2) (begin 2) [K8/56] (cond) (((= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 2 2) (begin 2) [K8/56] (cond ((= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 2 2) (begin 2) (cond ((= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 1 4) 4) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 1 4) 4) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 4) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 1 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 1 4) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 1 4) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 1 4) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 1 4) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 1 4) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 4) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 1 4) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 1 4) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] ((= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 4) [K5/46] (begin) [K7/43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 1 4) [K5/46] (begin) (4) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 1 4) [K5/46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 4) [K5/46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 1 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 1 4) (begin 4) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 1 4) (begin 4) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 4) (begin 4) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 1 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 4) (begin 4) [K8/56] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 1 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 1 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] 0 ]
[ 2]   9 : GLOBAL_GET	cons?
                                      3: [ [K1/11] 0 [Closure/core:cons?] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1/11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 109 ; () => ((cond ((= 2 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 109 ; () => ((cond ((= 2 2) 2) ((= 1 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ [K0/6] 2 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 2 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [K0/6] 2 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 2 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/6] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]   8 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   9 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 4 4) 4) 0)
ParseNext ==>  (cond ((= 1 2) 2) ((= 4 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 4 4) 4) 0)
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((= 1 2) 2) ((= 4 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (((= 4 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (((= 4 4) 4) 0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (((= 4 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 1 2) 2) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 1 2) 2) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 1 2) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 1 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 1 2) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 1 2) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 1 2) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 1 2) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 1 2) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 1 2) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 1 2) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 1 2) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] ((= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 1 2) [K5/46] (begin) [K7/43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 1 2) [K5/46] (begin) (2) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 1 2) [K5/46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 1 2) [K5/46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 1 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 1 2) (begin 2) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 1 2) (begin 2) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 1 2) (begin 2) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 4 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 4 4) 4) 0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 1 2) (begin 2) [K8/56] (cond) (((= 4 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 1 2) (begin 2) [K8/56] (cond ((= 4 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 1 2) (begin 2) (cond ((= 4 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((= 4 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (0) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (0) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= 4 4) 4) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= 4 4) 4) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= 4 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= 4 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= 4 4) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= 4 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= 4 4) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= 4 4) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= 4 4) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= 4 4) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= 4 4) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= 4 4) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 4 4) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= 4 4) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= 4 4) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= 4 4) [K5/46] (begin) [K7/43] ((= 4 4) 4) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= 4 4) [K5/46] (begin) [K7/43] ((= 4 4) 4) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= 4 4) [K5/46] (begin) [K7/43] ((= 4 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= 4 4) [K5/46] (begin) [K7/43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 4 4) [K5/46] (begin) (4) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= 4 4) [K5/46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= 4 4) [K5/46] (begin) (4) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= 4 4) [K5/46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= 4 4) [K5/46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= 4 4) (begin 4) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= 4 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= 4 4) (begin 4) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= 4 4) (begin 4) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= 4 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= 4 4) (begin 4) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= 4 4) (begin 4) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= 4 4) (begin 4) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= 4 4) (begin 4) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= 4 4) (begin 4) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= 4 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= 4 4) (begin 4) [K8/56] (cond) (0) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= 4 4) (begin 4) [K8/56] (cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= 4 4) (begin 4) [K8/56] (cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= 4 4) (begin 4) (cond 0) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= 4 4) (begin 4) (cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= 4 4) (begin 4) (cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] 0 ]
[ 2]   9 : GLOBAL_GET	cons?
                                      3: [ [K1/11] 0 [Closure/core:cons?] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1/11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure/core:list] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 110 ; () => ((cond ((= 1 2) 2) ((= 4 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 110 ; () => ((cond ((= 1 2) 2) ((= 4 4) 4) 0))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [K0/6] 1 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1/16] ]
[ 1]  12 : PUSH_CONST	4
                                      2: [ [K1/16] 4 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [K1/16] 4 4 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [K1/16] 4 4 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1/16] 4 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1/16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : LABEL	"K1"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  19 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (case (+ 1 2) (2 #f) (3 #t) 'error)
ParseNext ==>  (case (+ 1 2) (2 #f) (3 #t) (quote error))
Parsed:  (core:case (core:+ 1 2) (2 #f) (3 #t) (quote foo:error))
Executing:  
	CODE BLOCK # 62 ; (key rest) => ((let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	0	MAKE_ENVDOT	1	; (key rest)
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	"KEY"
	3	GLOBAL_GET	gensym
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	MAKE_CLOSURE	[Closure]	; #61 : ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	7	JMP_CLOSURE	1

                                      4: [ (+ 1 2) (2 #f) (3 #t) (quote error) ]
[ 4]   0 : MAKE_ENVDOT	1	; (key rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	"KEY"
                                      2: [ [K0/5] "KEY" ]
[ 2]   3 : GLOBAL_GET	gensym
                                      3: [ [K0/5] "KEY" [Closure/core:gensym] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] "KEY" ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [K0/5] KEY4 ]
[ 2]   1 : RETURN_VAL
                                      1: [ KEY4 ]
[ 1]   5 : LABEL	"K0"
                                      1: [ KEY4 ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; #61 : ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
                                      2: [ KEY4 [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ KEY4 ]
[ 1]   0 : MAKE_ENV	1	; (keyval)
                                      0: [  ]
[ 0]   1 : PUSH_CONST	let
                                      1: [ let ]
[ 1]   2 : SAVE_RETURN	"K1"	11
                                      2: [ let [K1/11] ]
[ 2]   3 : SAVE_RETURN	"K2"	8
                                      3: [ let [K1/11] [K2/8] ]
[ 3]   4 : LOCAL_GET	0	0	; keyval
                                      4: [ let [K1/11] [K2/8] KEY4 ]
[ 4]   5 : LOCAL_GET	1	0	; key
                                      5: [ let [K1/11] [K2/8] KEY4 (+ 1 2) ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ let [K1/11] [K2/8] KEY4 (+ 1 2) [Closure/core:list] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ let [K1/11] [K2/8] KEY4 (+ 1 2) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ let [K1/11] [K2/8] (KEY4 (+ 1 2)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K1/11] (KEY4 (+ 1 2)) ]
[ 3]   8 : LABEL	"K2"
                                      3: [ let [K1/11] (KEY4 (+ 1 2)) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ let [K1/11] (KEY4 (+ 1 2)) [Closure/core:list] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ let [K1/11] (KEY4 (+ 1 2)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K1/11] ((KEY4 (+ 1 2))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((KEY4 (+ 1 2))) ]
[ 2]  11 : LABEL	"K1"
                                      2: [ let ((KEY4 (+ 1 2))) ]
[ 2]  12 : SAVE_RETURN	"K3"	26
                                      3: [ let ((KEY4 (+ 1 2))) [K3/26] ]
[ 3]  13 : SAVE_RETURN	"K4"	17
                                      4: [ let ((KEY4 (+ 1 2))) [K3/26] [K4/17] ]
[ 4]  14 : PUSH_CONST	cond
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] [K4/17] cond ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ let ((KEY4 (+ 1 2))) [K3/26] [K4/17] cond [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] [K4/17] cond ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] [K4/17] (cond) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) ]
[ 4]  17 : LABEL	"K4"
                                      4: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) ]
[ 4]  18 : SAVE_RETURN	"K5"	23
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] ]
[ 5]  19 : MAKE_CLOSURE	[Closure]	; #60 : ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
                                      6: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] [Closure] ]
[ 6]  20 : LOCAL_GET	1	1	; rest
                                      7: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] [Closure] ((2 #f) (3 #t) (quote error)) ]
[ 7]  21 : GLOBAL_GET	map
                                      8: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] [Closure] ((2 #f) (3 #t) (quote error)) [Closure/core:map] ]
[ 8]  22 : JMP_CLOSURE	2
                                      7: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] [Closure] ((2 #f) (3 #t) (quote error)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  
	CODE BLOCK # 60 ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"K8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"K9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (2 #f) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [K6/5] (2 #f) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [K6/5] (2 #f) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6/5] (2 #f) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [K7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [K7/17] = KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7/17] = KEY4 [K8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [K7/17] = KEY4 [K8/14] (2 #f) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [K7/17] = KEY4 [K8/14] (2 #f) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7/17] = KEY4 [K8/14] (2 #f) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7/17] = KEY4 [K8/14] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7/17] = KEY4 2 ]
[ 4]  14 : LABEL	"K8"
                                      4: [ [K7/17] = KEY4 2 ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [K7/17] = KEY4 2 [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7/17] = KEY4 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7/17] (= KEY4 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= KEY4 2) ]
[ 1]  17 : LABEL	"K7"
                                      1: [ (= KEY4 2) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (= KEY4 2) [K9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= KEY4 2) [K9/22] (2 #f) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= KEY4 2) [K9/22] (2 #f) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= KEY4 2) [K9/22] (2 #f) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= KEY4 2) [K9/22] (#f) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= KEY4 2) (#f) ]
[ 2]  22 : LABEL	"K9"
                                      2: [ (= KEY4 2) (#f) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= KEY4 2) (#f) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= KEY4 2) (#f) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= KEY4 2) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 60 ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"K8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"K9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (3 #t) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [K6/5] (3 #t) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [K6/5] (3 #t) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6/5] (3 #t) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [K7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [K7/17] = KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7/17] = KEY4 [K8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [K7/17] = KEY4 [K8/14] (3 #t) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [K7/17] = KEY4 [K8/14] (3 #t) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7/17] = KEY4 [K8/14] (3 #t) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7/17] = KEY4 [K8/14] 3 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7/17] = KEY4 3 ]
[ 4]  14 : LABEL	"K8"
                                      4: [ [K7/17] = KEY4 3 ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [K7/17] = KEY4 3 [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7/17] = KEY4 3 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7/17] (= KEY4 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= KEY4 3) ]
[ 1]  17 : LABEL	"K7"
                                      1: [ (= KEY4 3) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (= KEY4 3) [K9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= KEY4 3) [K9/22] (3 #t) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= KEY4 3) [K9/22] (3 #t) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= KEY4 3) [K9/22] (3 #t) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= KEY4 3) [K9/22] (#t) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= KEY4 3) (#t) ]
[ 2]  22 : LABEL	"K9"
                                      2: [ (= KEY4 3) (#t) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= KEY4 3) (#t) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= KEY4 3) (#t) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= KEY4 3) #t) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 60 ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"K8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"K9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

                                      1: [ (quote error) ]
[ 1]   0 : MAKE_ENV	1	; (elt)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6/5] ]
[ 1]   2 : LOCAL_GET	0	0	; elt
                                      2: [ [K6/5] (quote error) ]
[ 2]   3 : GLOBAL_GET	cons?
                                      3: [ [K6/5] (quote error) [Closure/core:cons?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6/5] (quote error) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7/17] ]
[ 1]   8 : PUSH_CONST	=
                                      2: [ [K7/17] = ]
[ 2]   9 : LOCAL_GET	1	0	; keyval
                                      3: [ [K7/17] = KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7/17] = KEY4 [K8/14] ]
[ 4]  11 : LOCAL_GET	0	0	; elt
                                      5: [ [K7/17] = KEY4 [K8/14] (quote error) ]
[ 5]  12 : GLOBAL_GET	car
                                      6: [ [K7/17] = KEY4 [K8/14] (quote error) [Closure/core:car] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7/17] = KEY4 [K8/14] (quote error) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7/17] = KEY4 [K8/14] quote ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7/17] = KEY4 quote ]
[ 4]  14 : LABEL	"K8"
                                      4: [ [K7/17] = KEY4 quote ]
[ 4]  15 : GLOBAL_GET	list
                                      5: [ [K7/17] = KEY4 quote [Closure/core:list] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7/17] = KEY4 quote ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7/17] (= KEY4 quote) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (= KEY4 quote) ]
[ 1]  17 : LABEL	"K7"
                                      1: [ (= KEY4 quote) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (= KEY4 quote) [K9/22] ]
[ 2]  19 : LOCAL_GET	0	0	; elt
                                      3: [ (= KEY4 quote) [K9/22] (quote error) ]
[ 3]  20 : GLOBAL_GET	cdr
                                      4: [ (= KEY4 quote) [K9/22] (quote error) [Closure/core:cdr] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (= KEY4 quote) [K9/22] (quote error) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (= KEY4 quote) [K9/22] (error) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (= KEY4 quote) (error) ]
[ 2]  22 : LABEL	"K9"
                                      2: [ (= KEY4 quote) (error) ]
[ 2]  23 : GLOBAL_GET	cons
                                      3: [ (= KEY4 quote) (error) [Closure/core:cons] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (= KEY4 quote) (error) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((= KEY4 quote) error) ]
[ 1]   1 : RETURN_VAL
                                      6: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) [K5/23] (((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) (((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 5]  23 : LABEL	"K5"
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) (((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 5]  24 : GLOBAL_GET	append
                                      6: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) (((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) [Closure/core:append] ]
[ 6]  25 : JMP_CLOSURE	2
                                      5: [ let ((KEY4 (+ 1 2))) [K3/26] (cond) (((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((KEY4 (+ 1 2))) [K3/26] (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((KEY4 (+ 1 2))) (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 3]  26 : LABEL	"K3"
                                      3: [ let ((KEY4 (+ 1 2))) (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 3]  27 : GLOBAL_GET	list
                                      4: [ let ((KEY4 (+ 1 2))) (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) [Closure/core:list] ]
[ 4]  28 : JMP_CLOSURE	3
                                      3: [ let ((KEY4 (+ 1 2))) (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((KEY4 (+ 1 2))) (cond ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((= KEY4 2) #f) ((= KEY4 3) #t) ((= KEY4 quote) error) ]
[ 3]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (((= KEY4 3) #t) ((= KEY4 quote) error)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= KEY4 2) #f) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= KEY4 2) #f) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= KEY4 2) #f) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= KEY4 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= KEY4 2) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= KEY4 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= KEY4 2) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= KEY4 2) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= KEY4 2) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= KEY4 2) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= KEY4 2) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= KEY4 2) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= KEY4 2) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= KEY4 2) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= KEY4 2) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= KEY4 2) [K5/46] (begin) [K7/43] ((= KEY4 2) #f) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= KEY4 2) [K5/46] (begin) [K7/43] ((= KEY4 2) #f) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= KEY4 2) [K5/46] (begin) [K7/43] ((= KEY4 2) #f) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= KEY4 2) [K5/46] (begin) [K7/43] (#f) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= KEY4 2) [K5/46] (begin) (#f) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= KEY4 2) [K5/46] (begin) (#f) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= KEY4 2) [K5/46] (begin) (#f) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= KEY4 2) [K5/46] (begin) (#f) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= KEY4 2) [K5/46] (begin #f) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= KEY4 2) (begin #f) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= KEY4 2) (begin #f) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= KEY4 2) (begin #f) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= KEY4 2) (begin #f) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= KEY4 2) (begin #f) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= KEY4 2) (begin #f) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= KEY4 2) (begin #f) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= KEY4 2) (begin #f) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= KEY4 2) (begin #f) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= KEY4 2) (begin #f) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= KEY4 2) (begin #f) [K8/56] (cond) (((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= KEY4 2) (begin #f) [K8/56] (cond) (((= KEY4 3) #t) ((= KEY4 quote) error)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= KEY4 2) (begin #f) [K8/56] (cond) (((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= KEY4 2) (begin #f) [K8/56] (cond ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= KEY4 2) (begin #f) (cond ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= KEY4 2) (begin #f) (cond ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= KEY4 2) (begin #f) (cond ((= KEY4 3) #t) ((= KEY4 quote) error)) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= KEY4 2) (begin #f) (cond ((= KEY4 3) #t) ((= KEY4 quote) error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= KEY4 2) (begin #f) (cond ((= KEY4 3) #t) ((= KEY4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((= KEY4 3) #t) ((= KEY4 quote) error) ]
[ 2]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] (((= KEY4 quote) error)) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] (((= KEY4 quote) error)) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (((= KEY4 quote) error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4/32] ]
[ 2]  29 : LOCAL_GET	0	0	; first
                                      3: [ if [K4/32] ((= KEY4 3) #t) ]
[ 3]  30 : GLOBAL_GET	car
                                      4: [ if [K4/32] ((= KEY4 3) #t) [Closure/core:car] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4/32] ((= KEY4 3) #t) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4/32] (= KEY4 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (= KEY4 3) ]
[ 2]  32 : LABEL	"K4"
                                      2: [ if (= KEY4 3) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (= KEY4 3) [K5/46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (= KEY4 3) [K5/46] [K6/38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (= KEY4 3) [K5/46] [K6/38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (= KEY4 3) [K5/46] [K6/38] begin [Closure/core:list] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (= KEY4 3) [K5/46] [K6/38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (= KEY4 3) [K5/46] [K6/38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= KEY4 3) [K5/46] (begin) ]
[ 4]  38 : LABEL	"K6"
                                      4: [ if (= KEY4 3) [K5/46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (= KEY4 3) [K5/46] (begin) [K7/43] ]
[ 5]  40 : LOCAL_GET	0	0	; first
                                      6: [ if (= KEY4 3) [K5/46] (begin) [K7/43] ((= KEY4 3) #t) ]
[ 6]  41 : GLOBAL_GET	cdr
                                      7: [ if (= KEY4 3) [K5/46] (begin) [K7/43] ((= KEY4 3) #t) [Closure/core:cdr] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (= KEY4 3) [K5/46] (begin) [K7/43] ((= KEY4 3) #t) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (= KEY4 3) [K5/46] (begin) [K7/43] (#t) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= KEY4 3) [K5/46] (begin) (#t) ]
[ 5]  43 : LABEL	"K7"
                                      5: [ if (= KEY4 3) [K5/46] (begin) (#t) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (= KEY4 3) [K5/46] (begin) (#t) [Closure/core:append] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (= KEY4 3) [K5/46] (begin) (#t) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (= KEY4 3) [K5/46] (begin #t) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (= KEY4 3) (begin #t) ]
[ 3]  46 : LABEL	"K5"
                                      3: [ if (= KEY4 3) (begin #t) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (= KEY4 3) (begin #t) [K8/56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (= KEY4 3) (begin #t) [K8/56] [K9/52] ]
[ 5]  49 : PUSH_CONST	cond
                                      6: [ if (= KEY4 3) (begin #t) [K8/56] [K9/52] cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (= KEY4 3) (begin #t) [K8/56] [K9/52] cond [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (= KEY4 3) (begin #t) [K8/56] [K9/52] cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (= KEY4 3) (begin #t) [K8/56] [K9/52] (cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (= KEY4 3) (begin #t) [K8/56] (cond) ]
[ 5]  52 : LABEL	"K9"
                                      5: [ if (= KEY4 3) (begin #t) [K8/56] (cond) ]
[ 5]  53 : LOCAL_GET	0	1	; rest
                                      6: [ if (= KEY4 3) (begin #t) [K8/56] (cond) (((= KEY4 quote) error)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (= KEY4 3) (begin #t) [K8/56] (cond) (((= KEY4 quote) error)) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (= KEY4 3) (begin #t) [K8/56] (cond) (((= KEY4 quote) error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (= KEY4 3) (begin #t) [K8/56] (cond ((= KEY4 quote) error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (= KEY4 3) (begin #t) (cond ((= KEY4 quote) error)) ]
[ 4]  56 : LABEL	"K8"
                                      4: [ if (= KEY4 3) (begin #t) (cond ((= KEY4 quote) error)) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (= KEY4 3) (begin #t) (cond ((= KEY4 quote) error)) [Closure/core:list] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (= KEY4 3) (begin #t) (cond ((= KEY4 quote) error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (= KEY4 3) (begin #t) (cond ((= KEY4 quote) error))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ ((= KEY4 quote) error) ]
[ 1]   0 : MAKE_ENVDOT	1	; (first rest)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	1	; rest
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : LOCAL_GET	0	0	; first
                                      2: [ [K1/11] ((= KEY4 quote) error) ]
[ 2]   9 : GLOBAL_GET	cons?
                                      3: [ [K1/11] ((= KEY4 quote) error) [Closure/core:cons?] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] ((= KEY4 quote) error) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1/11] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  11 : LABEL	"K1"
                                      1: [ #t ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  13 : SAVE_RETURN	"K2"	17
                                      1: [ [K2/17] ]
[ 1]  14 : PUSH_CONST	begin
                                      2: [ [K2/17] begin ]
[ 2]  15 : GLOBAL_GET	list
                                      3: [ [K2/17] begin [Closure/core:list] ]
[ 3]  16 : JMP_CLOSURE	1
                                      2: [ [K2/17] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K2/17] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  17 : LABEL	"K2"
                                      1: [ (begin) ]
[ 1]  18 : LOCAL_GET	0	0	; first
                                      2: [ (begin) ((= KEY4 quote) error) ]
[ 2]  19 : GLOBAL_GET	append
                                      3: [ (begin) ((= KEY4 quote) error) [Closure/core:append] ]
[ 3]  20 : JMP_CLOSURE	2
                                      2: [ (begin) ((= KEY4 quote) error) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (= KEY4 quote) error) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((KEY4 (+ 1 2))) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((KEY4 (+ 1 2))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((KEY4 (+ 1 2))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((KEY4 (+ 1 2))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (KEY4 (+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ KEY4 ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (KEY4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (KEY4) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (KEY4) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (KEY4) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (KEY4) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((KEY4)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((KEY4)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((KEY4)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((KEY4)) ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((KEY4)) ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((KEY4)) ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] [Closure/core:cadr] ((KEY4 (+ 1 2))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] [Closure/core:cadr] ((KEY4 (+ 1 2))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] [Closure/core:cadr] ((KEY4 (+ 1 2))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (KEY4 (+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (+ 1 2) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) [K5/30] ((+ 1 2)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ((+ 1 2)) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ((+ 1 2)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ((+ 1 2)) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))) ((+ 1 2)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (KEY4) (if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error)))) (+ 1 2)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 111 ; (KEY4) => ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))
	0	MAKE_ENV	1	; (KEY4)
	1	SAVE_RETURN	"K1"	6
	2	LOCAL_GET	0	0	; KEY4
	3	PUSH_CONST	2
	4	GLOBAL_GET	=
	5	JMP_CLOSURE	2
6	LABEL	"K1"
	7	JMP_IF_FALSE	"L5"	10
	8	PUSH_CONST	#f
	9	RETURN_VAL
10	LABEL	"L5"
	11	SAVE_RETURN	"K2"	16
	12	LOCAL_GET	0	0	; KEY4
	13	PUSH_CONST	3
	14	GLOBAL_GET	=
	15	JMP_CLOSURE	2
16	LABEL	"K2"
	17	JMP_IF_FALSE	"L4"	20
	18	PUSH_CONST	#t
	19	RETURN_VAL
20	LABEL	"L4"
	21	SAVE_RETURN	"K3"	26
	22	LOCAL_GET	0	0	; KEY4
	23	GLOBAL_GET	quote
	24	GLOBAL_GET	=
	25	JMP_CLOSURE	2
26	LABEL	"K3"
	27	STACK_POP
	28	GLOBAL_GET	error
	29	RETURN_VAL

	CODE BLOCK # 112 ; () => ((case (+ 1 2) (2 #f) (3 #t) (quote error)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	MAKE_CLOSURE	[Closure]	; #111 : ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))
	8	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 112 ; () => ((case (+ 1 2) (2 #f) (3 #t) (quote error)))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K0"
	7	MAKE_CLOSURE	[Closure]	; #111 : ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))
	8	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0/6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0/6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K0/6] 1 2 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0/6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0/6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : MAKE_CLOSURE	[Closure]	; #111 : ((if (= KEY4 2) (begin #f) (if (= KEY4 3) (begin #t) (begin (= KEY4 quote) error))))
                                      2: [ 3 [Closure] ]
[ 2]   8 : JMP_CLOSURE	1
                                      1: [ 3 ]
[ 1]   0 : MAKE_ENV	1	; (KEY4)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K1"	6
                                      1: [ [K1/6] ]
[ 1]   2 : LOCAL_GET	0	0	; KEY4
                                      2: [ [K1/6] 3 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K1/6] 3 2 ]
[ 3]   4 : GLOBAL_GET	=
                                      4: [ [K1/6] 3 2 [Closure/core:=] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K1/6] 3 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1/6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : LABEL	"K1"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L5"	10
                                      0: [  ]
[ 0]  10 : LABEL	"L5"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K2"	16
                                      1: [ [K2/16] ]
[ 1]  12 : LOCAL_GET	0	0	; KEY4
                                      2: [ [K2/16] 3 ]
[ 2]  13 : PUSH_CONST	3
                                      3: [ [K2/16] 3 3 ]
[ 3]  14 : GLOBAL_GET	=
                                      4: [ [K2/16] 3 3 [Closure/core:=] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K2/16] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2/16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : LABEL	"K2"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L4"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]  19 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-left cons '() '(1 2))
ParseNext ==>  (fold-left cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-left core:cons (quote ()) (quote (1 2)))
Compiled:
	CODE BLOCK # 113 ; () => ((fold-left cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-left
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 113 ; () => ((fold-left cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-left
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cons
                                      1: [ [Closure/core:cons] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure/core:cons] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   4 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0/10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0/10] [K1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [K0/10] [K1/6] (1 2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [K0/10] [K1/6] (1 2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0/10] [K1/6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0/10] [K1/6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/10] 2 ]
[ 2]   6 : LABEL	"K1"
                                      2: [ [K0/10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0/10] 2 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [K0/10] 2 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0/10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; fn
                                      1: [ [Closure/core:cons] ]
[ 1]  16 : SAVE_RETURN	"K2"	25
                                      2: [ [Closure/core:cons] [K2/25] ]
[ 2]  17 : LOCAL_GET	0	1	; base
                                      3: [ [Closure/core:cons] [K2/25] () ]
[ 3]  18 : SAVE_RETURN	"K3"	22
                                      4: [ [Closure/core:cons] [K2/25] () [K3/22] ]
[ 4]  19 : LOCAL_GET	0	2	; lst
                                      5: [ [Closure/core:cons] [K2/25] () [K3/22] (1 2) ]
[ 5]  20 : GLOBAL_GET	car
                                      6: [ [Closure/core:cons] [K2/25] () [K3/22] (1 2) [Closure/core:car] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure/core:cons] [K2/25] () [K3/22] (1 2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure/core:cons] [K2/25] () [K3/22] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:cons] [K2/25] () 1 ]
[ 4]  22 : LABEL	"K3"
                                      4: [ [Closure/core:cons] [K2/25] () 1 ]
[ 4]  23 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:cons] [K2/25] () 1 [Closure/core:cons] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure/core:cons] [K2/25] () 1 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure/core:cons] [K2/25] (() . 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure/core:cons] (() . 1) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ [Closure/core:cons] (() . 1) ]
[ 2]  26 : SAVE_RETURN	"K4"	30
                                      3: [ [Closure/core:cons] (() . 1) [K4/30] ]
[ 3]  27 : LOCAL_GET	0	2	; lst
                                      4: [ [Closure/core:cons] (() . 1) [K4/30] (1 2) ]
[ 4]  28 : GLOBAL_GET	cdr
                                      5: [ [Closure/core:cons] (() . 1) [K4/30] (1 2) [Closure/core:cdr] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure/core:cons] (() . 1) [K4/30] (1 2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure/core:cons] (() . 1) [K4/30] (2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]  30 : LABEL	"K4"
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]  31 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] (() . 1) (2) [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] (() . 1) (2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0/10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0/10] [K1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [K0/10] [K1/6] (2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [K0/10] [K1/6] (2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0/10] [K1/6] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0/10] [K1/6] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/10] 1 ]
[ 2]   6 : LABEL	"K1"
                                      2: [ [K0/10] 1 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0/10] 1 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [K0/10] 1 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0/10] 1 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; fn
                                      1: [ [Closure/core:cons] ]
[ 1]  16 : SAVE_RETURN	"K2"	25
                                      2: [ [Closure/core:cons] [K2/25] ]
[ 2]  17 : LOCAL_GET	0	1	; base
                                      3: [ [Closure/core:cons] [K2/25] (() . 1) ]
[ 3]  18 : SAVE_RETURN	"K3"	22
                                      4: [ [Closure/core:cons] [K2/25] (() . 1) [K3/22] ]
[ 4]  19 : LOCAL_GET	0	2	; lst
                                      5: [ [Closure/core:cons] [K2/25] (() . 1) [K3/22] (2) ]
[ 5]  20 : GLOBAL_GET	car
                                      6: [ [Closure/core:cons] [K2/25] (() . 1) [K3/22] (2) [Closure/core:car] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure/core:cons] [K2/25] (() . 1) [K3/22] (2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure/core:cons] [K2/25] (() . 1) [K3/22] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure/core:cons] [K2/25] (() . 1) 2 ]
[ 4]  22 : LABEL	"K3"
                                      4: [ [Closure/core:cons] [K2/25] (() . 1) 2 ]
[ 4]  23 : LOCAL_GET	0	0	; fn
                                      5: [ [Closure/core:cons] [K2/25] (() . 1) 2 [Closure/core:cons] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure/core:cons] [K2/25] (() . 1) 2 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure/core:cons] [K2/25] ((() . 1) . 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure/core:cons] ((() . 1) . 2) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ [Closure/core:cons] ((() . 1) . 2) ]
[ 2]  26 : SAVE_RETURN	"K4"	30
                                      3: [ [Closure/core:cons] ((() . 1) . 2) [K4/30] ]
[ 3]  27 : LOCAL_GET	0	2	; lst
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [K4/30] (2) ]
[ 4]  28 : GLOBAL_GET	cdr
                                      5: [ [Closure/core:cons] ((() . 1) . 2) [K4/30] (2) [Closure/core:cdr] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [K4/30] (2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure/core:cons] ((() . 1) . 2) [K4/30] () ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]  30 : LABEL	"K4"
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]  31 : GLOBAL_GET	fold-left
                                      4: [ [Closure/core:cons] ((() . 1) . 2) () [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] ((() . 1) . 2) () ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0/10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0/10] [K1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [K0/10] [K1/6] () ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [K0/10] [K1/6] () [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0/10] [K1/6] () ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0/10] [K1/6] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/10] 0 ]
[ 2]   6 : LABEL	"K1"
                                      2: [ [K0/10] 0 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0/10] 0 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [K0/10] 0 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0/10] 0 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/10] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  10 : LABEL	"K0"
                                      1: [ #t ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  12 : LOCAL_GET	0	1	; base
                                      1: [ ((() . 1) . 2) ]
[ 1]  13 : RETURN_VAL
test: got "((() . 1) . 2)"  - expected "((() . 1) . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-right cons '() '(1 2))
ParseNext ==>  (fold-right cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-right core:cons (quote ()) (quote (1 2)))
Compiled:
	CODE BLOCK # 114 ; () => ((fold-right cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 114 ; () => ((fold-right cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	fold-right
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cons
                                      1: [ [Closure/core:cons] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure/core:cons] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   4 : GLOBAL_GET	fold-right
                                      4: [ [Closure/core:cons] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure/core:cons] () (1 2) ]
[ 3]   0 : MAKE_ENV	3	; (fn base lst)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0/10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0/10] [K1/6] ]
[ 2]   3 : LOCAL_GET	0	2	; lst
                                      3: [ [K0/10] [K1/6] (1 2) ]
[ 3]   4 : GLOBAL_GET	length
                                      4: [ [K0/10] [K1/6] (1 2) [Closure/core:length] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0/10] [K1/6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0/10] [K1/6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/10] 2 ]
[ 2]   6 : LABEL	"K1"
                                      2: [ [K0/10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0/10] 2 0 ]
[ 3]   8 : GLOBAL_GET	=
                                      4: [ [K0/10] 2 0 [Closure/core:=] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0/10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0/10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : LABEL	"L5"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	19
                                      1: [ [K2/19] ]
[ 1]  16 : LOCAL_GET	0	2	; lst
                                      2: [ [K2/19] (1 2) ]
[ 2]  17 : GLOBAL_GET	car
                                      3: [ [K2/19] (1 2) [Closure/core:car] ]
[ 3]  18 : JMP_CLOSURE	1
                                      2: [ [K2/19] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K2/19] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]  19 : LABEL	"K2"
                                      1: [ 1 ]
[ 1]  20 : SAVE_RETURN	"K3"	30
                                      2: [ 1 [K3/30] ]
[ 2]  21 : LOCAL_GET	0	0	; fn
                                      3: [ 1 [K3/30] [Closure/core:cons] ]
[ 3]  22 : LOCAL_GET	0	1	; base
                                      4: [ 1 [K3/30] [Closure/core:cons] () ]
[ 4]  23 : SAVE_RETURN	"K4"	27
                                      5: [ 1 [K3/30] [Closure/core:cons] () [K4/27] ]
[ 5]  24 : LOCAL_GET	0	2	; lst
                                      6: [ 1 [K3/30] [Closure/core:cons] () [K4/27] (1 2) ]
[ 6]  25 : GLOBAL_GET	cdr
                                      7: [ 1 [K3/30] [Closure/core:cons] () [K4/27] (1 2) [Closure/core:cdr] ]
[ 7]  26 : JMP_CLOSURE	1
                                      6: [ 1 [K3/30] [Closure/core:cons] () [K4/27] (1 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ 1 [K3/30] [Closure/core:cons] () [K4/27] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [K3/30] [Closure/core:cons] () (2) ]
[ 5]  27 : LABEL	"K4"
                                      5: [ 1 [K3/30] [Closure/core:cons] () (2) ]
[ 5]  28 : GLOBAL_GET	fold-right
                                      6: [ 1 [K3/30] [Closure/core:cons] () (2) [Closure] ]
[ 6]  29 : JMP_CLOSURE	3
                                      5: [ 1 [K3/30] [Closure/core:cons] () (2) ]
[ 5]   0 : MAKE_ENV	3	; (fn base lst)
                                      2: [ 1 [K3/30] ]
[ 2]   1 : SAVE_RETURN	"K0"	10
                                      3: [ 1 [K3/30] [K0/10] ]
[ 3]   2 : SAVE_RETURN	"K1"	6
                                      4: [ 1 [K3/30] [K0/10] [K1/6] ]
[ 4]   3 : LOCAL_GET	0	2	; lst
                                      5: [ 1 [K3/30] [K0/10] [K1/6] (2) ]
[ 5]   4 : GLOBAL_GET	length
                                      6: [ 1 [K3/30] [K0/10] [K1/6] (2) [Closure/core:length] ]
[ 6]   5 : JMP_CLOSURE	1
                                      5: [ 1 [K3/30] [K0/10] [K1/6] (2) ]
[ 5]   0 : CALL_PRIMOP	"length"
                                      5: [ 1 [K3/30] [K0/10] [K1/6] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 [K3/30] [K0/10] 1 ]
[ 4]   6 : LABEL	"K1"
                                      4: [ 1 [K3/30] [K0/10] 1 ]
[ 4]   7 : PUSH_CONST	0
                                      5: [ 1 [K3/30] [K0/10] 1 0 ]
[ 5]   8 : GLOBAL_GET	=
                                      6: [ 1 [K3/30] [K0/10] 1 0 [Closure/core:=] ]
[ 6]   9 : JMP_CLOSURE	2
                                      5: [ 1 [K3/30] [K0/10] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"="
                                      4: [ 1 [K3/30] [K0/10] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [K3/30] #f ]
[ 3]  10 : LABEL	"K0"
                                      3: [ 1 [K3/30] #f ]
[ 3]  11 : JMP_IF_FALSE	"L5"	14
                                      2: [ 1 [K3/30] ]
[ 2]  14 : LABEL	"L5"
                                      2: [ 1 [K3/30] ]
[ 2]  15 : SAVE_RETURN	"K2"	19
                                      3: [ 1 [K3/30] [K2/19] ]
[ 3]  16 : LOCAL_GET	0	2	; lst
                                      4: [ 1 [K3/30] [K2/19] (2) ]
[ 4]  17 : GLOBAL_GET	car
                                      5: [ 1 [K3/30] [K2/19] (2) [Closure/core:car] ]
[ 5]  18 : JMP_CLOSURE	1
                                      4: [ 1 [K3/30] [K2/19] (2) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ 1 [K3/30] [K2/19] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [K3/30] 2 ]
[ 3]  19 : LABEL	"K2"
                                      3: [ 1 [K3/30] 2 ]
[ 3]  20 : SAVE_RETURN	"K3"	30
                                      4: [ 1 [K3/30] 2 [K3/30] ]
[ 4]  21 : LOCAL_GET	0	0	; fn
                                      5: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] ]
[ 5]  22 : LOCAL_GET	0	1	; base
                                      6: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () ]
[ 6]  23 : SAVE_RETURN	"K4"	27
                                      7: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () [K4/27] ]
[ 7]  24 : LOCAL_GET	0	2	; lst
                                      8: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () [K4/27] (2) ]
[ 8]  25 : GLOBAL_GET	cdr
                                      9: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () [K4/27] (2) [Closure/core:cdr] ]
[ 9]  26 : JMP_CLOSURE	1
                                      8: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () [K4/27] (2) ]
[ 8]   0 : CALL_PRIMOP	"cdr"
                                      8: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () [K4/27] () ]
[ 8]   1 : RETURN_VAL
                                      7: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () () ]
[ 7]  27 : LABEL	"K4"
                                      7: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () () ]
[ 7]  28 : GLOBAL_GET	fold-right
                                      8: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () () [Closure] ]
[ 8]  29 : JMP_CLOSURE	3
                                      7: [ 1 [K3/30] 2 [K3/30] [Closure/core:cons] () () ]
[ 7]   0 : MAKE_ENV	3	; (fn base lst)
                                      4: [ 1 [K3/30] 2 [K3/30] ]
[ 4]   1 : SAVE_RETURN	"K0"	10
                                      5: [ 1 [K3/30] 2 [K3/30] [K0/10] ]
[ 5]   2 : SAVE_RETURN	"K1"	6
                                      6: [ 1 [K3/30] 2 [K3/30] [K0/10] [K1/6] ]
[ 6]   3 : LOCAL_GET	0	2	; lst
                                      7: [ 1 [K3/30] 2 [K3/30] [K0/10] [K1/6] () ]
[ 7]   4 : GLOBAL_GET	length
                                      8: [ 1 [K3/30] 2 [K3/30] [K0/10] [K1/6] () [Closure/core:length] ]
[ 8]   5 : JMP_CLOSURE	1
                                      7: [ 1 [K3/30] 2 [K3/30] [K0/10] [K1/6] () ]
[ 7]   0 : CALL_PRIMOP	"length"
                                      7: [ 1 [K3/30] 2 [K3/30] [K0/10] [K1/6] 0 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 1 [K3/30] 2 [K3/30] [K0/10] 0 ]
[ 6]   6 : LABEL	"K1"
                                      6: [ 1 [K3/30] 2 [K3/30] [K0/10] 0 ]
[ 6]   7 : PUSH_CONST	0
                                      7: [ 1 [K3/30] 2 [K3/30] [K0/10] 0 0 ]
[ 7]   8 : GLOBAL_GET	=
                                      8: [ 1 [K3/30] 2 [K3/30] [K0/10] 0 0 [Closure/core:=] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ 1 [K3/30] 2 [K3/30] [K0/10] 0 0 ]
[ 7]   0 : CALL_PRIMOP	"="
                                      6: [ 1 [K3/30] 2 [K3/30] [K0/10] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [K3/30] 2 [K3/30] #t ]
[ 5]  10 : LABEL	"K0"
                                      5: [ 1 [K3/30] 2 [K3/30] #t ]
[ 5]  11 : JMP_IF_FALSE	"L5"	14
                                      4: [ 1 [K3/30] 2 [K3/30] ]
[ 4]  12 : LOCAL_GET	0	1	; base
                                      5: [ 1 [K3/30] 2 [K3/30] () ]
[ 5]  13 : RETURN_VAL
                                      4: [ 1 [K3/30] 2 () ]
[ 4]  30 : LABEL	"K3"
                                      4: [ 1 [K3/30] 2 () ]
[ 4]  31 : LOCAL_GET	0	0	; fn
                                      5: [ 1 [K3/30] 2 () [Closure/core:cons] ]
[ 5]  32 : JMP_CLOSURE	2
                                      4: [ 1 [K3/30] 2 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ 1 [K3/30] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2) ]
[ 2]  30 : LABEL	"K3"
                                      2: [ 1 (2) ]
[ 2]  31 : LOCAL_GET	0	0	; fn
                                      3: [ 1 (2) [Closure/core:cons] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ 1 (2) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2)"  - expected "(1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (first x) (second x) (third x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:first foo:x) (core:second foo:x) (core:third foo:x)))
Compiled:
	CODE BLOCK # 115 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	first
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	second
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	third
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 115 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (first x) (second x) (third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	first
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	second
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	third
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	first
                                      3: [ [K0/8] (1 2 3 4 5) [Closure/core:car] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0/8] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   8 : LABEL	"K0"
                                      1: [ 1 ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ 1 [K1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ 1 [K1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	second
                                      4: [ 1 [K1/13] (1 2 3 4 5) [Closure/core:cadr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ 1 [K1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ 1 [K1/13] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 2 ]
[ 2]  13 : LABEL	"K1"
                                      2: [ 1 2 ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ 1 2 [K2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ 1 2 [K2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	third
                                      5: [ 1 2 [K2/18] (1 2 3 4 5) [Closure/core:caddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ 1 2 [K2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ 1 2 [K2/18] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 3 ]
[ 3]  18 : LABEL	"K2"
                                      3: [ 1 2 3 ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (after-first x) (after-second x) (after-third x)))
ParseNext ==>  (begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:after-first foo:x) (core:after-second foo:x) (core:after-third foo:x)))
Compiled:
	CODE BLOCK # 116 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	after-first
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	after-second
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	after-third
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  
	CODE BLOCK # 116 ; () => ((begin (set! x (quote (1 2 3 4 5))) (list (after-first x) (after-second x) (after-third x))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	after-first
	7	JMP_CLOSURE	1
8	LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	after-second
	12	JMP_CLOSURE	1
13	LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	after-third
	17	JMP_CLOSURE	1
18	LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0/8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	after-first
                                      3: [ [K0/8] (1 2 3 4 5) [Closure/core:cdr] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0/8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0/8] (2 3 4 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3 4 5) ]
[ 1]   8 : LABEL	"K0"
                                      1: [ (2 3 4 5) ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ (2 3 4 5) [K1/13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ (2 3 4 5) [K1/13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	after-second
                                      4: [ (2 3 4 5) [K1/13] (1 2 3 4 5) [Closure/core:cddr] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ (2 3 4 5) [K1/13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cddr"
                                      3: [ (2 3 4 5) [K1/13] (3 4 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  13 : LABEL	"K1"
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ (2 3 4 5) (3 4 5) [K2/18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	after-third
                                      5: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) [Closure/core:cdddr] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"cdddr"
                                      4: [ (2 3 4 5) (3 4 5) [K2/18] (4 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  18 : LABEL	"K2"
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ (2 3 4 5) (3 4 5) (4 5) [Closure/core:list] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ((2 3 4 5) (3 4 5) (4 5)) ]
[ 1]   1 : RETURN_VAL
test: got "((2 3 4 5) (3 4 5) (4 5))"  - expected "((2 3 4 5) (3 4 5) (4 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))) (add 0) (add 100) (add 0)
ParseNext ==>  (set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum)))
Parsed:  (set! foo:add (core:let ((foo:sum 0)) (lambda (foo:delta) (set! foo:sum (core:+ foo:sum foo:delta)) foo:sum)))
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((sum 0)) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((sum 0)) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((sum 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (sum 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ sum ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (sum) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (sum) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (sum) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (sum) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (sum) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((sum)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((sum)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((sum)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((sum)) ((lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] [Closure/core:cadr] ((sum 0)) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] [Closure/core:cadr] ((sum 0)) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] [Closure/core:cadr] ((sum 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (sum 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) [K5/30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (sum) (lambda (delta) (set! sum (+ sum delta)) sum)) 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	CODE BLOCK # 117 ; (delta) => ((set! sum (+ sum delta)) sum)
	0	MAKE_ENV	1	; (delta)
	1	SAVE_RETURN	"K1"	6
	2	LOCAL_GET	1	0	; sum
	3	LOCAL_GET	0	0	; delta
	4	GLOBAL_GET	+
	5	JMP_CLOSURE	2
6	LABEL	"K1"
	7	LOCAL_SET	1	0	; sum
	8	STACK_POP
	9	LOCAL_GET	1	0	; sum
	10	RETURN_VAL

	CODE BLOCK # 118 ; (sum) => ((lambda (delta) (set! sum (+ sum delta)) sum))
	0	MAKE_ENV	1	; (sum)
	1	MAKE_CLOSURE	[Closure]	; #117 : ((set! sum (+ sum delta)) sum)
	2	RETURN_VAL

	CODE BLOCK # 119 ; () => ((set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; #118 : ((lambda (delta) (set! sum (+ sum delta)) sum))
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	GLOBAL_SET	add
	7	RETURN_VAL

Running...
Executing:  
	CODE BLOCK # 119 ; () => ((set! add (let ((sum 0)) (lambda (delta) (set! sum (+ sum delta)) sum))))
	0	MAKE_ENV	0	; ()
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; #118 : ((lambda (delta) (set! sum (+ sum delta)) sum))
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	GLOBAL_SET	add
	7	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [K0/5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; #118 : ((lambda (delta) (set! sum (+ sum delta)) sum))
                                      3: [ [K0/5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] 0 ]
[ 2]   0 : MAKE_ENV	1	; (sum)
                                      1: [ [K0/5] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; #117 : ((set! sum (+ sum delta)) sum)
                                      2: [ [K0/5] [Closure] ]
[ 2]   2 : RETURN_VAL
                                      1: [ [Closure] ]
[ 1]   5 : LABEL	"K0"
                                      1: [ [Closure] ]
[ 1]   6 : GLOBAL_SET	add
                                      1: [ [Closure] ]
[ 1]   7 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
ParseNext ==>  (add 0)
Parsed:  (foo:add 0)
Compiled:
	CODE BLOCK # 120 ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 120 ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 0 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 0 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K1"	6
                                      1: [ [K1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [K1/6] 0 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [K1/6] 0 0 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K1/6] 0 0 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K1/6] 0 0 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K1/6] 0 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 0 ]
[ 1]   6 : LABEL	"K1"
                                      1: [ 0 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 0 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 0 ]
[ 1]  10 : RETURN_VAL
test: got "0"  - expected "0"
ParseNext ==>  (add 100)
Parsed:  (foo:add 100)
Compiled:
	CODE BLOCK # 121 ; () => ((add 100))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	100
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 121 ; () => ((add 100))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	100
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	100
                                      1: [ 100 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 100 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 100 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K1"	6
                                      1: [ [K1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [K1/6] 0 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [K1/6] 0 100 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K1/6] 0 100 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K1/6] 0 100 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K1/6] 100 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 100 ]
[ 1]   6 : LABEL	"K1"
                                      1: [ 100 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 100 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 100 ]
[ 1]  10 : RETURN_VAL
test: got "100"  - expected "100"
ParseNext ==>  (add 0)
Parsed:  (foo:add 0)
Compiled:
	CODE BLOCK # 122 ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

Running...
Executing:  
	CODE BLOCK # 122 ; () => ((add 0))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	0
	2	GLOBAL_GET	add
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]   2 : GLOBAL_GET	add
                                      2: [ 0 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 0 ]
[ 1]   0 : MAKE_ENV	1	; (delta)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K1"	6
                                      1: [ [K1/6] ]
[ 1]   2 : LOCAL_GET	1	0	; sum
                                      2: [ [K1/6] 100 ]
[ 2]   3 : LOCAL_GET	0	0	; delta
                                      3: [ [K1/6] 100 0 ]
[ 3]   4 : GLOBAL_GET	+
                                      4: [ [K1/6] 100 0 [Closure/core:+] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K1/6] 100 0 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K1/6] 100 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 100 ]
[ 1]   6 : LABEL	"K1"
                                      1: [ 100 ]
[ 1]   7 : LOCAL_SET	1	0	; sum
                                      1: [ 100 ]
[ 1]   8 : STACK_POP
                                      0: [  ]
[ 0]   9 : LOCAL_GET	1	0	; sum
                                      1: [ 100 ]
[ 1]  10 : RETURN_VAL
test: got "100"  - expected "100"
SUCCESS



***** PrintAllStandardLibraries
ParseNext ==>  (package-set "core")
Executing:  
	CODE BLOCK # 42 ; () => ((package-set "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	package-set
                                      2: [ "core" [Closure/core:package-set] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "core" ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (package-export (quote (let let* letrec define and or cond case first second third rest fold-left fold-right)))
Executing:  
	CODE BLOCK # 43 ; () => ((package-export (quote (let let* letrec define and or cond case first second third rest fold-left fold-right))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let let* letrec define and or cond case first second third rest fold-left fold-right)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(let let* letrec define and or cond case first second third rest fold-left fold-right)
                                      1: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) ]
[ 1]   2 : GLOBAL_GET	package-export
                                      2: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) [Closure/core:package-export] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (let let* letrec define and or cond case first second third rest fold-left fold-right) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
ParseNext ==>  (defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
Executing:  
	CODE BLOCK # 45 ; () => ((defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
Executing:  
	CODE BLOCK # 47 ; () => ((defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
Executing:  
	CODE BLOCK # 51 ; () => ((defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
Executing:  
	CODE BLOCK # 53 ; () => ((defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
Executing:  
	CODE BLOCK # 55 ; () => ((defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
Executing:  
	CODE BLOCK # 57 ; () => ((defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro cond (first . rest) (if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
Executing:  
	CODE BLOCK # 59 ; () => ((defmacro cond (first . rest) (if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (defmacro case (key . rest) (let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] ((keyval (gensym "KEY"))) ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] ((keyval (gensym "KEY"))) [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] ((keyval (gensym "KEY"))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	let
                                      1: [ let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ let [K2/25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ let [K2/25] [K3/22] ]
[ 3]  19 : LOCAL_GET	0	0	; bindings
                                      4: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) ]
[ 4]  20 : GLOBAL_GET	car
                                      5: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) [Closure/core:car] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ let [K2/25] [K3/22] ((keyval (gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ let [K2/25] [K3/22] (keyval (gensym "KEY")) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]  22 : LABEL	"K3"
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ let [K2/25] (keyval (gensym "KEY")) [Closure/core:list] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ let [K2/25] (keyval (gensym "KEY")) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ let [K2/25] ((keyval (gensym "KEY"))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ let ((keyval (gensym "KEY"))) ]
[ 2]  25 : LABEL	"K2"
                                      2: [ let ((keyval (gensym "KEY"))) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ let ((keyval (gensym "KEY"))) [K4/44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] ]
[ 4]  28 : PUSH_CONST	let*
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* [Closure/core:list] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] [K5/31] (let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) ]
[ 4]  31 : LABEL	"K5"
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ]
[ 6]  34 : LOCAL_GET	0	0	; bindings
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) ]
[ 7]  35 : GLOBAL_GET	cdr
                                      8: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) [Closure/core:cdr] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] ((keyval (gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] [K7/37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]  37 : LABEL	"K7"
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () [Closure/core:list] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) [K6/40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ]
[ 5]  40 : LABEL	"K6"
                                      5: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; body
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ let ((keyval (gensym "KEY"))) [K4/44] (let*) (()) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ let ((keyval (gensym "KEY"))) [K4/44] (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  44 : LABEL	"K4"
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:list] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (let ((keyval (gensym "KEY"))) (let* () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; bindings
                                      2: [ [K0/5] () ]
[ 2]   3 : GLOBAL_GET	null?
                                      3: [ [K0/5] () [Closure/core:null?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1/11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [K1/11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1/11] begin [Closure/core:list] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1/11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1/11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : LABEL	"K1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; body
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) [Closure/core:append] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((keyval (gensym "KEY"))) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (bindings body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0/24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0/24] [K1/21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0/24] [K1/21] [K2/7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0/24] [K1/21] [K2/7] lambda [Closure/core:list] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0/24] [K1/21] [K2/7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0/24] [K1/21] [K2/7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   7 : LABEL	"K2"
                                      3: [ [K0/24] [K1/21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0/24] [K1/21] (lambda) [K3/17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] ]
[ 5]  10 : GLOBAL_GET	car
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) ]
[ 7]  12 : GLOBAL_GET	map
                                      8: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) [Closure/core:map] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] [Closure/core:car] ((keyval (gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  core:car
	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ keyval ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] [K4/14] (keyval) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]  14 : LABEL	"K4"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) [Closure/core:list] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] (keyval) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0/24] [K1/21] (lambda) [K3/17] ((keyval)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0/24] [K1/21] (lambda) ((keyval)) ]
[ 4]  17 : LABEL	"K3"
                                      4: [ [K0/24] [K1/21] (lambda) ((keyval)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:append] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0/24] [K1/21] (lambda) ((keyval)) ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0/24] [K1/21] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  21 : LABEL	"K1"
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) [Closure/core:list] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0/24] (lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0/24] ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  24 : LABEL	"K0"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] ]
[ 2]  26 : GLOBAL_GET	cadr
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) ]
[ 4]  28 : GLOBAL_GET	map
                                      5: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) [Closure/core:map] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] [Closure/core:cadr] ((keyval (gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  core:cadr
	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (keyval (gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (gensym "KEY") ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) [K5/30] ((gensym "KEY")) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]  30 : LABEL	"K5"
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) [Closure/core:append] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))) ((gensym "KEY")) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (keyval) (begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))) (gensym "KEY")) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 63 ; () => ((defmacro case (key . rest) (let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
ParseNext ==>  (define first car)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ first car ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (first) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (first) (car) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (first) (car) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (first) (car) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! first car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! first car) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! first car) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! first car) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! first car) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! first car) [K4/28] quote first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! first car) [K4/28] quote first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! first car) [K4/28] quote first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! first car) [K4/28] (quote first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! first car) (quote first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! first car) (quote first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! first car) (quote first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! first car) (quote first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 64 ; () => ((define first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	car
                                      1: [ [Closure/core:car] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure/core:car] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	first
                                      1: [ first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define second cadr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ second cadr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (second) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (second) (cadr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (second) (cadr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (second) (cadr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! second cadr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! second cadr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! second cadr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! second cadr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! second cadr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! second cadr) [K4/28] quote second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! second cadr) [K4/28] quote second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! second cadr) [K4/28] quote second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! second cadr) [K4/28] (quote second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! second cadr) (quote second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! second cadr) (quote second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! second cadr) (quote second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 65 ; () => ((define second cadr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cadr
	2	GLOBAL_SET	second
	3	STACK_POP
	4	PUSH_CONST	second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cadr
                                      1: [ [Closure/core:cadr] ]
[ 1]   2 : GLOBAL_SET	second
                                      1: [ [Closure/core:cadr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	second
                                      1: [ second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define third caddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ third caddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (third) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (third) (caddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (third) (caddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (third) (caddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! third caddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! third caddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! third caddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! third caddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! third caddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! third caddr) [K4/28] quote third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! third caddr) [K4/28] quote third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! third caddr) [K4/28] quote third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! third caddr) [K4/28] (quote third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! third caddr) (quote third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! third caddr) (quote third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! third caddr) (quote third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 66 ; () => ((define third caddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	caddr
	2	GLOBAL_SET	third
	3	STACK_POP
	4	PUSH_CONST	third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	caddr
                                      1: [ [Closure/core:caddr] ]
[ 1]   2 : GLOBAL_SET	third
                                      1: [ [Closure/core:caddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	third
                                      1: [ third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define rest cdr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ rest cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] rest ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] rest [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] rest ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] rest ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] rest [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (rest) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (rest) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (rest) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (rest) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (rest) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (rest) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! rest cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! rest cdr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! rest cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! rest cdr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! rest cdr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! rest cdr) [K4/28] quote rest ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! rest cdr) [K4/28] quote rest [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! rest cdr) [K4/28] quote rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! rest cdr) [K4/28] (quote rest) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! rest cdr) (quote rest) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! rest cdr) (quote rest) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! rest cdr) (quote rest)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 67 ; () => ((define rest cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	rest
	3	STACK_POP
	4	PUSH_CONST	rest
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	rest
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	rest
                                      1: [ rest ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-first cdr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-first cdr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-first ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-first [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-first [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-first) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-first) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-first) (cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-first) (cdr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-first) (cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-first cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-first cdr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-first cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-first cdr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-first cdr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-first cdr) [K4/28] quote after-first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-first cdr) [K4/28] quote after-first [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-first cdr) [K4/28] quote after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-first cdr) [K4/28] (quote after-first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-first cdr) (quote after-first) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-first cdr) (quote after-first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-first cdr) (quote after-first)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 68 ; () => ((define after-first cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	after-first
	3	STACK_POP
	4	PUSH_CONST	after-first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdr
                                      1: [ [Closure/core:cdr] ]
[ 1]   2 : GLOBAL_SET	after-first
                                      1: [ [Closure/core:cdr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-first
                                      1: [ after-first ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-second cddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-second cddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-second ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-second [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-second [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-second) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-second) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-second) (cddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-second) (cddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-second) (cddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-second cddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-second cddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-second cddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-second cddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-second cddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-second cddr) [K4/28] quote after-second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-second cddr) [K4/28] quote after-second [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-second cddr) [K4/28] quote after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-second cddr) [K4/28] (quote after-second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-second cddr) (quote after-second) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-second cddr) (quote after-second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-second cddr) (quote after-second)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 69 ; () => ((define after-second cddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cddr
	2	GLOBAL_SET	after-second
	3	STACK_POP
	4	PUSH_CONST	after-second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cddr
                                      1: [ [Closure/core:cddr] ]
[ 1]   2 : GLOBAL_SET	after-second
                                      1: [ [Closure/core:cddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-second
                                      1: [ after-second ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define after-third cdddr)
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ after-third cdddr ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] after-third ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] after-third [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] after-third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] after-third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] after-third [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (after-third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (after-third) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (after-third) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (after-third) (cdddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (after-third) (cdddr) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (after-third) (cdddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! after-third cdddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! after-third cdddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! after-third cdddr) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! after-third cdddr) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! after-third cdddr) [K4/28] quote after-third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! after-third cdddr) [K4/28] quote after-third [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! after-third cdddr) [K4/28] quote after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! after-third cdddr) [K4/28] (quote after-third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! after-third cdddr) (quote after-third) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! after-third cdddr) (quote after-third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! after-third cdddr) (quote after-third)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 70 ; () => ((define after-third cdddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdddr
	2	GLOBAL_SET	after-third
	3	STACK_POP
	4	PUSH_CONST	after-third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	cdddr
                                      1: [ [Closure/core:cdddr] ]
[ 1]   2 : GLOBAL_SET	after-third
                                      1: [ [Closure/core:cdddr] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	after-third
                                      1: [ after-third ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (fold-left fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (fold-left fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (fold-left fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (fold-left fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (fold-left fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (fold-left fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] fold-left ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-left ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define fold-left ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define fold-left [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define fold-left [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-left [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-left [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-left [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-left [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-left [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define fold-left [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define fold-left [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fold-left fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] [K9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-left [K6/56] (lambda) [K8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-left [K6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define fold-left [K6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-left [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-left [K6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] fold-left ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] fold-left [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] fold-left ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] fold-left ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] fold-left [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (fold-left) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (fold-left) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (fold-left) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (fold-left) ((lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] quote fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) [K4/28] (quote fold-left) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-left (lambda (fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))) (quote fold-left)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 72 ; () => ((define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #71 : ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
	2	GLOBAL_SET	fold-left
	3	STACK_POP
	4	PUSH_CONST	fold-left
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #71 : ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-left
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-left
                                      1: [ fold-left ]
[ 1]   5 : RETURN_VAL
ParseNext ==>  (define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] (fold-right fn base lst) ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] (fold-right fn base lst) [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] (fold-right fn base lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	define
                                      1: [ define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ define [K5/37] ]
[ 2]  34 : LOCAL_GET	0	0	; name
                                      3: [ define [K5/37] (fold-right fn base lst) ]
[ 3]  35 : GLOBAL_GET	car
                                      4: [ define [K5/37] (fold-right fn base lst) [Closure/core:car] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ define [K5/37] (fold-right fn base lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ define [K5/37] fold-right ]
[ 3]   1 : RETURN_VAL
                                      2: [ define fold-right ]
[ 2]  37 : LABEL	"K5"
                                      2: [ define fold-right ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ define fold-right [K6/56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ define fold-right [K6/56] [K7/43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ define fold-right [K6/56] [K7/43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ define fold-right [K6/56] [K7/43] lambda [Closure/core:list] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ define fold-right [K6/56] [K7/43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ define fold-right [K6/56] [K7/43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ define fold-right [K6/56] (lambda) ]
[ 4]  43 : LABEL	"K7"
                                      4: [ define fold-right [K6/56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ define fold-right [K6/56] (lambda) [K8/52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] ]
[ 6]  46 : LOCAL_GET	0	0	; name
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) ]
[ 7]  47 : GLOBAL_GET	cdr
                                      8: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) [Closure/core:cdr] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fold-right fn base lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] [K9/49] (fn base lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  49 : LABEL	"K9"
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) [Closure/core:list] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] (fn base lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ define fold-right [K6/56] (lambda) [K8/52] ((fn base lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ define fold-right [K6/56] (lambda) ((fn base lst)) ]
[ 5]  52 : LABEL	"K8"
                                      5: [ define fold-right [K6/56] (lambda) ((fn base lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; body
                                      6: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:append] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ define fold-right [K6/56] (lambda) ((fn base lst)) ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ define fold-right [K6/56] (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  56 : LABEL	"K6"
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) [Closure/core:list] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (define fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))) ]
[ 2]   0 : MAKE_ENVDOT	1	; (name body)
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0/5] ]
[ 1]   2 : LOCAL_GET	0	0	; name
                                      2: [ [K0/5] fold-right ]
[ 2]   3 : GLOBAL_GET	atom?
                                      3: [ [K0/5] fold-right [Closure/core:atom?] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0/5] fold-right ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0/5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1/22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1/22] [K2/13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1/22] [K2/13] set! [Closure/core:list] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1/22] [K2/13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1/22] [K2/13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1/22] (set!) ]
[ 3]  13 : LABEL	"K2"
                                      3: [ begin [K1/22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1/22] (set!) [K3/18] ]
[ 4]  15 : LOCAL_GET	0	0	; name
                                      5: [ begin [K1/22] (set!) [K3/18] fold-right ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1/22] (set!) [K3/18] fold-right [Closure/core:list] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1/22] (set!) [K3/18] fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1/22] (set!) [K3/18] (fold-right) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1/22] (set!) (fold-right) ]
[ 4]  18 : LABEL	"K3"
                                      4: [ begin [K1/22] (set!) (fold-right) ]
[ 4]  19 : LOCAL_GET	0	1	; body
                                      5: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [Closure/core:append] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1/22] (set!) (fold-right) ((lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1/22] (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  22 : LABEL	"K1"
                                      2: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; name
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right [Closure/core:list] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] quote fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) [K4/28] (quote fold-right) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  28 : LABEL	"K4"
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) [Closure/core:list] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! fold-right (lambda (fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))) (quote fold-right)) ]
[ 1]   1 : RETURN_VAL
Executing:  
	CODE BLOCK # 74 ; () => ((define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #73 : ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
	2	GLOBAL_SET	fold-right
	3	STACK_POP
	4	PUSH_CONST	fold-right
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0	; ()
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; #73 : ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	fold-right
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	fold-right
                                      1: [ fold-right ]
[ 1]   5 : RETURN_VAL


*** ALL CODE BLOCKS

	CODE BLOCK # 1 ; core:+
	0	CALL_PRIMOP	"+"
	1	RETURN_VAL

	CODE BLOCK # 2 ; core:-
	0	CALL_PRIMOP	"-"
	1	RETURN_VAL

	CODE BLOCK # 3 ; core:*
	0	CALL_PRIMOP	"*"
	1	RETURN_VAL

	CODE BLOCK # 4 ; core:/
	0	CALL_PRIMOP	"/"
	1	RETURN_VAL

	CODE BLOCK # 5 ; core:=
	0	CALL_PRIMOP	"="
	1	RETURN_VAL

	CODE BLOCK # 6 ; core:!=
	0	CALL_PRIMOP	"!="
	1	RETURN_VAL

	CODE BLOCK # 7 ; core:<
	0	CALL_PRIMOP	"<"
	1	RETURN_VAL

	CODE BLOCK # 8 ; core:<=
	0	CALL_PRIMOP	"<="
	1	RETURN_VAL

	CODE BLOCK # 9 ; core:>
	0	CALL_PRIMOP	">"
	1	RETURN_VAL

	CODE BLOCK # 10 ; core:>=
	0	CALL_PRIMOP	">="
	1	RETURN_VAL

	CODE BLOCK # 11 ; core:cons
	0	CALL_PRIMOP	"cons"
	1	RETURN_VAL

	CODE BLOCK # 12 ; core:list
	0	CALL_PRIMOP	"list"
	1	RETURN_VAL

	CODE BLOCK # 13 ; core:append
	0	CALL_PRIMOP	"append"
	1	RETURN_VAL

	CODE BLOCK # 14 ; core:length
	0	CALL_PRIMOP	"length"
	1	RETURN_VAL

	CODE BLOCK # 15 ; core:not
	0	CALL_PRIMOP	"not"
	1	RETURN_VAL

	CODE BLOCK # 16 ; core:null?
	0	CALL_PRIMOP	"null?"
	1	RETURN_VAL

	CODE BLOCK # 17 ; core:cons?
	0	CALL_PRIMOP	"cons?"
	1	RETURN_VAL

	CODE BLOCK # 18 ; core:string?
	0	CALL_PRIMOP	"string?"
	1	RETURN_VAL

	CODE BLOCK # 19 ; core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

	CODE BLOCK # 20 ; core:boolean?
	0	CALL_PRIMOP	"boolean?"
	1	RETURN_VAL

	CODE BLOCK # 21 ; core:atom?
	0	CALL_PRIMOP	"atom?"
	1	RETURN_VAL

	CODE BLOCK # 22 ; core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

	CODE BLOCK # 23 ; core:cdr
	0	CALL_PRIMOP	"cdr"
	1	RETURN_VAL

	CODE BLOCK # 24 ; core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

	CODE BLOCK # 25 ; core:cddr
	0	CALL_PRIMOP	"cddr"
	1	RETURN_VAL

	CODE BLOCK # 26 ; core:caddr
	0	CALL_PRIMOP	"caddr"
	1	RETURN_VAL

	CODE BLOCK # 27 ; core:cdddr
	0	CALL_PRIMOP	"cdddr"
	1	RETURN_VAL

	CODE BLOCK # 28 ; core:nth
	0	CALL_PRIMOP	"nth"
	1	RETURN_VAL

	CODE BLOCK # 29 ; core:nth-tail
	0	CALL_PRIMOP	"nth-tail"
	1	RETURN_VAL

	CODE BLOCK # 30 ; core:nth-cons
	0	CALL_PRIMOP	"nth-cons"
	1	RETURN_VAL

	CODE BLOCK # 31 ; core:map
	0	CALL_PRIMOP	"map"
	1	RETURN_VAL

	CODE BLOCK # 32 ; core:mx1
	0	CALL_PRIMOP	"mx1"
	1	RETURN_VAL

	CODE BLOCK # 33 ; core:mx
	0	CALL_PRIMOP	"mx"
	1	RETURN_VAL

	CODE BLOCK # 34 ; core:trace
	0	CALL_PRIMOP	"trace"
	1	RETURN_VAL

	CODE BLOCK # 35 ; core:gensym
	0	CALL_PRIMOP	"gensym"
	1	RETURN_VAL

	CODE BLOCK # 36 ; core:package-set
	0	CALL_PRIMOP	"package-set"
	1	RETURN_VAL

	CODE BLOCK # 37 ; core:package-get
	0	CALL_PRIMOP	"package-get"
	1	RETURN_VAL

	CODE BLOCK # 38 ; core:package-import
	0	CALL_PRIMOP	"package-import"
	1	RETURN_VAL

	CODE BLOCK # 39 ; core:package-imports
	0	CALL_PRIMOP	"package-imports"
	1	RETURN_VAL

	CODE BLOCK # 40 ; core:package-export
	0	CALL_PRIMOP	"package-export"
	1	RETURN_VAL

	CODE BLOCK # 41 ; core:package-exports
	0	CALL_PRIMOP	"package-exports"
	1	RETURN_VAL

	CODE BLOCK # 42 ; () => ((package-set "core"))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	package-set
	3	JMP_CLOSURE	1

	CODE BLOCK # 43 ; () => ((package-export (quote (let let* letrec define and or cond case first second third rest fold-left fold-right))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	(let let* letrec define and or cond case first second third rest fold-left fold-right)
	2	GLOBAL_GET	package-export
	3	JMP_CLOSURE	1

	CODE BLOCK # 44 ; (bindings body) => ((append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings)))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	map
	13	JMP_CLOSURE	2
14	LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	map
	29	JMP_CLOSURE	2
30	LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

	CODE BLOCK # 45 ; () => ((defmacro let (bindings . body) (append (list (append (list (quote lambda)) (list (map car bindings)) body)) (map cadr bindings))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 46 ; (bindings body) => ((if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body))))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; bindings
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	LOCAL_GET	0	1	; body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	LABEL	"L8"
	16	PUSH_CONST	let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; bindings
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; bindings
	35	GLOBAL_GET	cdr
	36	JMP_CLOSURE	1
37	LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	LABEL	"K6"
	41	LOCAL_GET	0	1	; body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

	CODE BLOCK # 47 ; () => ((defmacro let* (bindings . body) (if (null? bindings) (append (list (quote begin)) body) (list (quote let) (list (car bindings)) (append (list (quote let*)) (list (cdr bindings)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 48 ; (v) => ((list (car v) nil))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K3"	5
	2	LOCAL_GET	0	0	; v
	3	GLOBAL_GET	car
	4	JMP_CLOSURE	1
5	LABEL	"K3"
	6	GLOBAL_GET	nil
	7	GLOBAL_GET	list
	8	JMP_CLOSURE	2

	CODE BLOCK # 49 ; (v) => ((append (list (quote set!)) v))
	0	MAKE_ENV	1	; (v)
	1	SAVE_RETURN	"K5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K5"
	6	LOCAL_GET	0	0	; v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

	CODE BLOCK # 50 ; (bindings body) => ((append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body))
	0	MAKE_ENVDOT	1	; (bindings body)
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	SAVE_RETURN	"K1"	15
	7	SAVE_RETURN	"K2"	12
	8	MAKE_CLOSURE	[Closure]	; #48 : ((list (car v) nil))
	9	LOCAL_GET	0	0	; bindings
	10	GLOBAL_GET	map
	11	JMP_CLOSURE	2
12	LABEL	"K2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	LABEL	"K1"
	16	SAVE_RETURN	"K4"	21
	17	MAKE_CLOSURE	[Closure]	; #49 : ((append (list (quote set!)) v))
	18	LOCAL_GET	0	0	; bindings
	19	GLOBAL_GET	map
	20	JMP_CLOSURE	2
21	LABEL	"K4"
	22	LOCAL_GET	0	1	; body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

	CODE BLOCK # 51 ; () => ((defmacro letrec (bindings . body) (append (list (quote let)) (list (map (lambda (v) (list (car v) nil)) bindings)) (map (lambda (v) (append (list (quote set!)) v)) bindings) body)))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 52 ; (name body) => ((if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body))))
	0	MAKE_ENVDOT	1	; (name body)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; name
	3	GLOBAL_GET	atom?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	LABEL	"K3"
	19	LOCAL_GET	0	1	; body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	LABEL	"L10"
	32	PUSH_CONST	define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; name
	35	GLOBAL_GET	car
	36	JMP_CLOSURE	1
37	LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; name
	47	GLOBAL_GET	cdr
	48	JMP_CLOSURE	1
49	LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

	CODE BLOCK # 53 ; () => ((defmacro define (name . body) (if (atom? name) (list (quote begin) (append (list (quote set!)) (list name) body) (list (quote quote) name)) (list (quote define) (car name) (append (list (quote lambda)) (list (cdr name)) body)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 54 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K8"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

	CODE BLOCK # 55 ; () => ((defmacro and (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if)) (list first) rest (list (quote #f))) (list (quote if) first (append (list (quote and)) rest) (quote #f))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 56 ; (first rest) => ((if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest)))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; rest
	18	GLOBAL_GET	length
	19	JMP_CLOSURE	1
20	LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	=
	23	JMP_CLOSURE	2
24	LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	LABEL	"K5"
	36	LOCAL_GET	0	1	; rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	LABEL	"K7"
	48	LOCAL_GET	0	1	; rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

	CODE BLOCK # 57 ; () => ((defmacro or (first . rest) (if (null? rest) (car (list first)) (if (= (length rest) 1) (append (list (quote if*)) (list first) rest) (list (quote if*) first (append (list (quote or)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 58 ; (first rest) => ((if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest))))
	0	MAKE_ENVDOT	1	; (first rest)
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; rest
	3	GLOBAL_GET	null?
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; first
	9	GLOBAL_GET	cons?
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K2"
	18	LOCAL_GET	0	0	; first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; first
	30	GLOBAL_GET	car
	31	JMP_CLOSURE	1
32	LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; first
	41	GLOBAL_GET	cdr
	42	JMP_CLOSURE	1
43	LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	LABEL	"K9"
	53	LOCAL_GET	0	1	; rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

	CODE BLOCK # 59 ; () => ((defmacro cond (first . rest) (if (null? rest) (if (cons? first) (append (list (quote begin)) first) (list (quote begin) first)) (list (quote if) (car first) (append (list (quote begin)) (cdr first)) (append (list (quote cond)) rest)))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 60 ; (elt) => ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	0	MAKE_ENV	1	; (elt)
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; elt
	3	GLOBAL_GET	cons?
	4	JMP_CLOSURE	1
5	LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	=
	9	LOCAL_GET	1	0	; keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; elt
	12	GLOBAL_GET	car
	13	JMP_CLOSURE	1
14	LABEL	"K8"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	3
17	LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; elt
	20	GLOBAL_GET	cdr
	21	JMP_CLOSURE	1
22	LABEL	"K9"
	23	GLOBAL_GET	cons
	24	JMP_CLOSURE	2
25	LABEL	"L10"
	26	LOCAL_GET	0	0	; elt
	27	RETURN_VAL

	CODE BLOCK # 61 ; (keyval) => ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	0	MAKE_ENV	1	; (keyval)
	1	PUSH_CONST	let
	2	SAVE_RETURN	"K1"	11
	3	SAVE_RETURN	"K2"	8
	4	LOCAL_GET	0	0	; keyval
	5	LOCAL_GET	1	0	; key
	6	GLOBAL_GET	list
	7	JMP_CLOSURE	2
8	LABEL	"K2"
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	LABEL	"K1"
	12	SAVE_RETURN	"K3"	26
	13	SAVE_RETURN	"K4"	17
	14	PUSH_CONST	cond
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	LABEL	"K4"
	18	SAVE_RETURN	"K5"	23
	19	MAKE_CLOSURE	[Closure]	; #60 : ((if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt))
	20	LOCAL_GET	1	1	; rest
	21	GLOBAL_GET	map
	22	JMP_CLOSURE	2
23	LABEL	"K5"
	24	GLOBAL_GET	append
	25	JMP_CLOSURE	2
26	LABEL	"K3"
	27	GLOBAL_GET	list
	28	JMP_CLOSURE	3

	CODE BLOCK # 62 ; (key rest) => ((let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	0	MAKE_ENVDOT	1	; (key rest)
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	"KEY"
	3	GLOBAL_GET	gensym
	4	JMP_CLOSURE	1
5	LABEL	"K0"
	6	MAKE_CLOSURE	[Closure]	; #61 : ((begin (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest)))))
	7	JMP_CLOSURE	1

	CODE BLOCK # 63 ; () => ((defmacro case (key . rest) (let* ((keyval (gensym "KEY"))) (list (quote let) (list (list keyval key)) (append (list (quote cond)) (map (lambda (elt) (if (cons? elt) (cons (list (quote =) keyval (car elt)) (cdr elt)) elt)) rest))))))
	0	MAKE_ENV	0	; ()
	1	PUSH_CONST	()
	2	RETURN_VAL

	CODE BLOCK # 64 ; () => ((define first car))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	first
	5	RETURN_VAL

	CODE BLOCK # 65 ; () => ((define second cadr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cadr
	2	GLOBAL_SET	second
	3	STACK_POP
	4	PUSH_CONST	second
	5	RETURN_VAL

	CODE BLOCK # 66 ; () => ((define third caddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	caddr
	2	GLOBAL_SET	third
	3	STACK_POP
	4	PUSH_CONST	third
	5	RETURN_VAL

	CODE BLOCK # 67 ; () => ((define rest cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	rest
	3	STACK_POP
	4	PUSH_CONST	rest
	5	RETURN_VAL

	CODE BLOCK # 68 ; () => ((define after-first cdr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdr
	2	GLOBAL_SET	after-first
	3	STACK_POP
	4	PUSH_CONST	after-first
	5	RETURN_VAL

	CODE BLOCK # 69 ; () => ((define after-second cddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cddr
	2	GLOBAL_SET	after-second
	3	STACK_POP
	4	PUSH_CONST	after-second
	5	RETURN_VAL

	CODE BLOCK # 70 ; () => ((define after-third cdddr))
	0	MAKE_ENV	0	; ()
	1	GLOBAL_GET	cdddr
	2	GLOBAL_SET	after-third
	3	STACK_POP
	4	PUSH_CONST	after-third
	5	RETURN_VAL

	CODE BLOCK # 71 ; (fn base lst) => ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
	0	MAKE_ENV	3	; (fn base lst)
	1	SAVE_RETURN	"K0"	10
	2	SAVE_RETURN	"K1"	6
	3	LOCAL_GET	0	2	; lst
	4	GLOBAL_GET	length
	5	JMP_CLOSURE	1
6	LABEL	"K1"
	7	PUSH_CONST	0
	8	GLOBAL_GET	=
	9	JMP_CLOSURE	2
10	LABEL	"K0"
	11	JMP_IF_FALSE	"L5"	14
	12	LOCAL_GET	0	1	; base
	13	RETURN_VAL
14	LABEL	"L5"
	15	LOCAL_GET	0	0	; fn
	16	SAVE_RETURN	"K2"	25
	17	LOCAL_GET	0	1	; base
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	2	; lst
	20	GLOBAL_GET	car
	21	JMP_CLOSURE	1
22	LABEL	"K3"
	23	LOCAL_GET	0	0	; fn
	24	JMP_CLOSURE	2
25	LABEL	"K2"
	26	SAVE_RETURN	"K4"	30
	27	LOCAL_GET	0	2	; lst
	28	GLOBAL_GET	cdr
	29	JMP_CLOSURE	1
30	LABEL	"K4"
	31	GLOBAL_GET	fold-left
	32	JMP_CLOSURE	3

	CODE BLOCK # 72 ; () => ((define (fold-left fn base lst) (if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst)))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #71 : ((if (= (length lst) 0) base (fold-left fn (fn base (car lst)) (cdr lst))))
	2	GLOBAL_SET	fold-left
	3	STACK_POP
	4	PUSH_CONST	fold-left
	5	RETURN_VAL

	CODE BLOCK # 73 ; (fn base lst) => ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
	0	MAKE_ENV	3	; (fn base lst)
	1	SAVE_RETURN	"K0"	10
	2	SAVE_RETURN	"K1"	6
	3	LOCAL_GET	0	2	; lst
	4	GLOBAL_GET	length
	5	JMP_CLOSURE	1
6	LABEL	"K1"
	7	PUSH_CONST	0
	8	GLOBAL_GET	=
	9	JMP_CLOSURE	2
10	LABEL	"K0"
	11	JMP_IF_FALSE	"L5"	14
	12	LOCAL_GET	0	1	; base
	13	RETURN_VAL
14	LABEL	"L5"
	15	SAVE_RETURN	"K2"	19
	16	LOCAL_GET	0	2	; lst
	17	GLOBAL_GET	car
	18	JMP_CLOSURE	1
19	LABEL	"K2"
	20	SAVE_RETURN	"K3"	30
	21	LOCAL_GET	0	0	; fn
	22	LOCAL_GET	0	1	; base
	23	SAVE_RETURN	"K4"	27
	24	LOCAL_GET	0	2	; lst
	25	GLOBAL_GET	cdr
	26	JMP_CLOSURE	1
27	LABEL	"K4"
	28	GLOBAL_GET	fold-right
	29	JMP_CLOSURE	3
30	LABEL	"K3"
	31	LOCAL_GET	0	0	; fn
	32	JMP_CLOSURE	2

	CODE BLOCK # 74 ; () => ((define (fold-right fn base lst) (if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst))))))
	0	MAKE_ENV	0	; ()
	1	MAKE_CLOSURE	[Closure]	; #73 : ((if (= (length lst) 0) base (fn (car lst) (fold-right fn base (cdr lst)))))
	2	GLOBAL_SET	fold-right
	3	STACK_POP
	4	PUSH_CONST	fold-right
	5	RETURN_VAL

*** END OF ALL CODE BLOCKS


SUCCESS
